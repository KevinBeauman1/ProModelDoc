<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="587" MadCap:lastWidth="624">
    <head>
        <link href="../Resources/Stylesheets/Promodel.css" rel="stylesheet" />
    </head>
    <body>
        <h2 class="statements"><a name="C-01_2914010915_490764"></a>
            <MadCap:keyword term="ReleaseEventsObject" />ReleaseEventsObject</h2>
        <p class="p"><span class="Lower_Label" style="font-weight: bold;">Syntax</span><span class="_Override" style="font-weight: bold;">:  </span>ReleaseEventsObject</p>
        <p class="p"><span class="Lower_Label" style="font-weight: bold;">Description</span><span class="_Override" style="font-weight: bold;">:  </span>This method is only useful when used with the GetEventsObject method. Its purpose is to remove the connection between the ProModel events object and any event handler(s) contained in the user’s code. After this connection is removed, the user’s event handler(s) will no longer receive event notifications emitted by the ProModel events object. </p>
        <p class="p"><span class="Lower_Label" style="font-weight: bold;">Parameters</span><span class="_Override" style="font-weight: bold;">:</span>  None</p>
        <p class="p"><span class="Lower_Label" style="font-weight: bold;">Returns</span><span class="_Override" style="font-weight: bold;">:</span>  Nothing</p>
        <p class="p"><span class="_Override" style="font-weight: bold;">Example:</span>This example releases an events object from the ProModel application object. The code also contains an events handler that listens for events emitted by the events object. Whenever the events object emits an event, it is received by the events handler. This causes a message to be printed to the VBA Immediate window (Ctrl+G to open). After the simulation has been running for 30 minutes, pmObject.ReleaseEventsObject() is called. This causes all events to stop printing to the Immediate window. </p>
        <p class="p">&#160;</p>
        <p class="objects">Private WithEvents pmEventsObject As PMCPLib.PmEvents</p>
        <p class="p">&#160;</p>
        <p class="objects">Sub HandleEventsUntilRelease()</p>
        <p class="objects2">	Dim pmObject As ProModel.CProModel</p>
        <p class="objects2">	Dim CurSimTime As Double</p>
        <p class="objects2">&#160;</p>
        <p class="objects2">	CurSimTime=0</p>
        <p class="objects2">	Set pmObject = CreateObject("ProModel")</p>
        <p class="objects2">	Set pmEventsObject = pmObject.GetEventsObject()</p>
        <p class="objects2">	pmObject.LoadModel "mfg_cost.mod"</p>
        <p class="objects2">	pmObject.Simulate</p>
        <p class="objects2">&#160;</p>
        <p class="objects2">	Do While CurSimTime , 1800</p>
        <p class="objects3">		pmObject.GetSimTime CurSimTime</p>
        <p class="objects3">		DoEvents</p>
        <p class="objects2">	Loop</p>
        <p class="objects2">&#160;</p>
        <p class="objects2"><span class="_Override" style="font-weight: bold;">pmObject.ReleaseEventsObject</span>
        </p>
        <p class="objects2">	pmObject.EndSimulation</p>
        <p class="objects2">&#160;</p>
        <p class="objects2">	Set pmObject = Nothing</p>
        <p class="objects2">	Set pmEventsObject = Nothing</p>
        <p class="objects">End Sub</p>
        <p class="Example">&#160;</p>
        <p class="objects">The ProModel events handler</p>
        <p class="objects">Private Function pmEventsObject_PmEventsHandler(ByVal PmEventID As Long, ByVal Description As String) As Long</p>
        <p class="objects2">	Debug.Print "Event ID:" &amp; PmEventID &amp; Chr(13) &amp; "Event Description:" &amp; Description </p>
        <p class="objects">End Function</p>
    </body>
</html>