define({"77":{i:0.00132844475584566,u:"../Content/Topics/SelectMainRecordByIndex.htm",a:"Syntax:  SelectMainRecordByIndex RecordType, RecordIndex Description:  Selects a record by its Record Index (row number).  This method is very useful in looping through all the records in a table. Parameters: RecordType (Long)  The Record Type (Table Number) of the table you wish to work with. ...",t:"SelectMainRecordByIndex"},"78":{i:0.00132844475584566,u:"../Content/Topics/SelectMainRecordByName.htm",a:"Syntax:  SelectMainRecordByName RecordType, RecordName Description:  Selects a record by its Name or ID value.  This method can only be used with record types that have a name or ID field.  If the table does not have a Name or ID field, you must use the SelectMainRecordByIndex method. Parameters: ...",t:"SelectMainRecordByName"},"79":{i:0.00132844475584566,u:"../Content/Topics/SetIntFieldValue.htm",a:"Syntax:  SetIntFieldValue RecordType, FieldIndex, FieldValue Description:  Changes the value for the specified integer field of the selected record. Parameters: RecordType (Long)  The Record Type (Table Number) of the table you wish to work with. FieldIndex (Long)  The Field Index (Column Number) of ...",t:"SetIntFieldValue"},"80":{i:0.00132844475584566,u:"../Content/Topics/SetRealFieldValue.htm",a:"Syntax:  RecordType, FieldIndex, FieldValue Description:  Changes the value for the specified real field of the selected record.  When setting values for real fields, it is best to place the number into a variable of the correct type, then use the variable in the method call.  This will avoid ...",t:"SetRealFieldValue"},"81":{i:0.00132844475584566,u:"../Content/Topics/SetStringFieldValue.htm",a:"Syntax:  SetStringFieldValue RecordType, FieldIndex, FieldValue Description:  Changes the value for the specified string field of the selected record. Parameters: RecordType(Long)  The Record Type (Table Number) of the table you wish to work with. FieldIndex (Long)  The Field Index (Column Number) ...",t:"SetStringFieldValue"},"82":{i:0.00132844475584566,u:"../Content/Topics/The RDBDataServer Object.htm",a:"The  RDBDataServer Object To use the RDBDataServer object it must be registered, which should have done automatically during installation. This library is listed as RDBSrv in the references in your VB Editor.   As you work with the RDBDataServer, keep in mind that you are working with a database, ...",t:"The RDBDataServer Object"},"83":{i:0.00132844475584566,u:"../Content/Topics/CloseFile.htm",a:"Syntax:  CloseFile Description:  Closes the previously opened RDB file. Parameters:  None Returns:  Nothing Example:This example opens the mfg_cost.rdb, selects data, displays it, then closes the file. Sub Get_Data() \tDim RDBObj As Object \tDim x   \tSet RDBObj = CreateObject(\"RDBDataServer\") ...",t:"CloseFile"},"84":{i:0.00132844475584566,u:"../Content/Topics/FieldName.htm",a:"Syntax:  FieldName Description:  Returns the name of the current field. Parameters:  None Returns:  The name of the specified field (column), or “invalid” if the SelectData specifications are not valid. Example:This example opens the mfg_cost.rdb, displays some of the data, then closes the file. Sub ...",t:"FieldName"},"85":{i:0.00132844475584566,u:"../Content/Topics/GetPositionInfo.htm",a:"Syntax:  GetPositionInfo Description:  Returns the scenario, period, replication, table, field, record and data value of the current selection.  This can be useful in loops. Returns:  Details of current data selection, as follows: Scenario: Scenario Name Replication: Replication Number Period: ...",t:"GetPositionInfo"},"86":{i:0.00132844475584566,u:"../Content/Topics/GetValue.htm",a:"Syntax:  GetValue Description:  Returns the data value for the current data selection. Parameters:  None Returns:  The data value of the current position (or zero if the current selection is not valid). Example:This example opens the mfg_cost.rdb, gets and displays some of the data, then closes the ...",t:"GetValue"},"87":{i:0.00132844475584566,u:"../Content/Topics/OpenFile.htm",a:"Syntax:  OpenFile FileName Description:  Call this function first to open and load the proper .RDB file. Parameters:   FileName (String)  Path and filename of any valid .rdb file. Returns:  Nothing Example:This example opens the mfg_cost.rdb, gets and displays some of the data, then closes the file. ...",t:"OpenFile"},"88":{i:0.00132844475584566,u:"../Content/Topics/PeriodName.htm",a:"Syntax:  PeriodName Description:  Returns the name of the Period in the current data selection. Parameters:  None Returns:  The current period name, or “invalid” if the current selection is not valid. Example:This example opens the mfg_cost.rdb, gets and displays some of the data, then closes the ...",t:"PeriodName"},"89":{i:0.00132844475584566,u:"../Content/Topics/PositionIsValid.htm",a:"Syntax:  PositionIsValid Description:  Check the data for the most recent data selection \u0026 return “True” if it is valid, “False” if it is not.  This method is a little tricky, because it really doesn’t do much unless it is used in an “If…Then” or “Select Case” statement (the ‘x = ...",t:"PositionIsValid"},"90":{i:0.00132844475584566,u:"../Content/Topics/RecordName.htm",a:"Syntax:  RecordName Description:  Returns the name of the Record in the current data selection. Parameters:  None Returns:  The current record name, or “invalid” if the current selection is not valid. Example:This example opens the mfg_cost.rdb, gets and displays some of the data, then closes the ...",t:"RecordName"},"91":{i:0.00132844475584566,u:"../Content/Topics/ReplicationNumber.htm",a:"Syntax:  ReplicationNumber Description:  Returns the number of the Replication in the current data selection. Parameters:  None Returns:  The current replication number, or “invalid” if the current selection is not valid. Example:This example opens the mfg_cost.rdb, gets and displays some of the ...",t:"ReplicationNumber"},"92":{i:0.00132844475584566,u:"../Content/Topics/ScenarioName.htm",a:"Syntax:  ScenarioName Description:  Returns the name of the Scenario in the current data selection. Parameters:  None Returns:  The current scenario name, or “invalid” if the current selection is not valid. Example:This example opens the mfg_cost.rdb, gets and displays some of the data, then closes ...",t:"ScenarioName"},"93":{i:0.00132844475584566,u:"../Content/Topics/SelectData.htm",a:"Syntax SelectData Scenario, Replication, Period, Table, Field, Record Description:  Retrieves the specified data element from the .rdb file.  All of the parameters must be specified, even if there is only one scenario, replication or period. Parameters: Scenario\t(Long)  Scenario number containing ...",t:"SelectData"},"94":{i:0.00132844475584566,u:"../Content/Topics/TableName.htm",a:"Syntax:  TableName Description:  Returns the name of the Table in the current data selection. Parameters:  None Returns:  The current table name, or “invalid” if the current selection is not valid. Example:This example opens the mfg_cost.rdb, gets and displays some of the data, then closes the file. ...",t:"TableName"},"95":{i:0.00245766114671717,u:"../Content/Topics/AppendixA.htm",a:"ProModelData Table Definitions To help you determine the RecordType values, the pmconst.bas file defines the constants used in the examples. For the complete list of ProActiveX constants, click  here . The following is a list of RecordType values, Visual Basic record type constants, and field types ...",t:"Appendix: Table Definitions"},"96":{i:0.0598399909371983,u:"../Content/Topics/Locations Table (1)_ pmd.htm",a:"Location Clock Downtimes Subtable (25): PMD_Table_LocClockDTs Location Entry Downtimes Subtable (26): PMD_Table_LocEntryDTs Location Usage Downtimes Subtable (27): PMD_Table_LocUsageDTs Location Setup Downtimes Subtable (28): PMD_Table_LocSetupDTs Location Called Downtimes Subtable (63): ...",t:"Locations Table (1): PMD_Table_Location"},"97":{i:0.00132844475584566,u:"../Content/Topics/RuntimeTable.htm",a:"Locations Runtime Fields (1): pmrTblLocation Single Capacity Locations Runtime Fields (2): pmrTblLocSingle Multi Capacity Locations Runtime Fields (3): pmrTblLocMulti Resource Runtime Fields (5): pmrTblResource Resource States (By Percentage) Runtime Fields (6): pmrTblResState Node Entries Runtime ...",t:"Runtime Table."},"98":{i:0.00132844475584566,u:"../Content/Topics/ResultCodes(Errors).htm",a:"Result Codes (Errors)",t:"Result Codes (Errors)"},"99":{i:0.00132844475584566,u:"../Content/Topics/Events.htm",a:"Events",t:"Events"},"100":{i:0.00132844475584566,u:"../Content/Topics/PathColors.htm",a:"Path Colors",t:"Path Colors"},"101":{i:0.00132844475584566,u:"../Content/Topics/Menu Ids.htm",a:"Menu Ids This method is defined as: MenuCommand\u003cMenuId\u003e,\u003cParameter\u003e For most commands, Parameter has no meaning and a zero should be passed. The following is a list of menu IDs that have no equivalent method in the CProModel interface.    ",t:"Menu Ids"},"102":{i:0.00237299137070032,u:"../Content/Word Imports 1/ProActiveX Constants.htm",a:"  PM = ProModel Application Object Constants PMD = ProModel Data Object Constants PME = ProModel Event Object Constants RDB = RDB Data Server Object Constants RTI = RunTime Object Constants   ---------------------------------------------------------------------------------------- Status Codes ...",t:"ProActiveX Constants"},"103":{i:0.00132844475584566,u:"../Content/Topics/ActiveXIX.htm",a:"Index",t:"Index"},"104":{i:0.00132844475584566,u:"../Content/AccumulatingEntitiesWithoutBatchingThem.htm",a:"Accumulate a specified quantity of entities before allowing them to continue processing.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( http://www.promodel.com/solutionscafe/howto/) .  A video demonstrating this ...",t:"Accumulating Entities without Batching Them"},"105":{i:0.00625887197780326,u:"../Content/Activate.htm",a:"Statement Syntax samples Activate \u003csubroutine\u003e({parameter1\u003e,\u003cparameter2\u003e...}) Activate Sub1() Description\n         Starts an independent subroutine. The calling logic then continues without waiting for the called subroutine to finish. Therefore, independent subroutines can run in parallel with the ...",t:"Activate"},"106":{i:0.0033213233262993,u:"../Content/ActivityProperties.htm",a:"Activity Properties Right-click on a shape, select Properties, and the Activity properties window displays. There are Seven sections in the Activity properties window in addition to the default properties. Resource Availability Batching Setup Downtimes Notes Advanced Name This is the ...",t:"Activity Dialog"},"107":{i:0.00132844475584566,u:"../Content/ActivityTime.htm",a:"The activity can be defined by a simple activity time that is either a constant value or a probability  distribution  (normal, triangular, etc). The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( ...",t:"Activity Time"},"108":{i:0.00132844475584566,u:"../Content/AddingAndEditingSchedules.htm",a:"Adding and Editing Schedules Adding or Editing Time Off To assign time off for \n an entire day, select Holiday, Vacation, or Other from the toolbar.  With the time off option \n selected, click on a day in the calendar that you want to assign the time \n off to or click and drag to assign the time off ...",t:"Calendar Editor"},"109":{i:0.00132844475584566,u:"../Content/AddingAScenario.htm",a:"Adding a Scenario When you click the Add Scenario button, the Add Scenario dialog opens so you can give your new scenario a name. Enter a name and click OK. A new column will be added to \n the table. The new scenario will have its parameter values filled in using the \n baseline scenario values.",t:"Adding a Scenario"},"110":{i:0.00132844475584566,u:"../Content/AddingScenarioParameters.htm",a:"When you click the Add Parameters button, a drop down list \n of available parameters for your simulation objects is displayed, sorted by object \n type. Clicking on the name of the parameter and clicking the Add Selected Parameter button will \n append a row to the scenario table with that parameter. ...",t:"Adding Scenario Parameters"},"111":{i:0.0029136106488651,u:"../Content/Animate.htm",a:"Statement Syntax samples\n         Animate \u003cexpression\u003e Animate 70 Animate Var1\n             Description\n         Sets the simulation’s animation speed. The higher the value, the faster the animation. Animate is used primarily to speed up or slow down a model for cursory or detailed observation ...",t:"Animate"},"112":{i:0.00245766114671717,u:"../Content/ApplyingDataGraphicsToShapes.htm",a:"Applying Data Graphics to Shapes in the Model  Select one or more shapes on the layout that you \n would like to apply a data graphic to. Click on the desired data graphic in the Data \n Graphic window.   Please note: Hovering \n over a data graphic displays a tooltip of its name.  Process \n Simulator ...",t:"Data Graphics"},"113":{i:0.00197954235417878,u:"../Content/ArrayExport.htm",a:"Export Array Data to Spreadsheets When you export the contents of an array to a Microsoft Excel® worksheet, Process Simulator loads the data into the worksheet from left to right (i.e., within a row), and then from top to bottom (i.e., within a column). Note: Exporting data from an array to a ...",t:"Export Arrays to Spreadsheets"},"114":{i:0.00197954235417878,u:"../Content/ArrayImport.htm",a:"When you import data from a Microsoft Excel® spreadsheet into an array, Process Simulator loads the data from left to right (i.e., within a row), and then from top to bottom (i.e., within a column). The limit to the number of rows and columns your arrays have depends upon the version of Excel you ...",t:"Import Data into Arrays"},"115":{i:0.00153193985350474,u:"../Content/Arrays.htm",a:"In Process Simulator, an array is a matrix of cells that contains integer values, real values, or expressions depending on which type of array is selected. Each cell in an array works much like a variable, and a reference to a cell in an array can be used anywhere a variable can be used. A ...",t:"Arrays"},"116":{i:0.00275913011949515,u:"../Content/ArrivalProperties.htm",a:"The Arrival properties define how entities enter the system at an activity. An arrival is defined by connecting an entity to an activity and setting the  properties to define the arrival. If no arrivals exist in the process when the simulation starts, arrivals will automatically be created at ...",t:"Arrival Properties"},"117":{i:0.00132844475584566,u:"../Content/ArrivingEntityTypesAreRandomlyDistributed.htm",a:"The distribution of entity types that arrive in the system is random.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( http://www.promodel.com/solutionscafe/howto/) . Solution Define all the different possible entity ...",t:"Arriving Entity Types are Randomly Distributed"},"118":{i:0.00189305295128141,u:"../Content/AssemblyActivities.htm",a:"One or more entities are attached to a base entity at an activity.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( http://www.promodel.com/solutionscafe/howto/) .  A video demonstrating this solution can be found ...",t:"Assembly Activities"},"119":{i:0.00245766114671717,u:"../Content/Asset Brower.htm",a:"Selecting Asset Browser will open the Process Simulator Factory Asset Browser Ribbon Search - Allows user to search for named assets in the Asset Browser. View button - Toggles Asset Browser view between Thumbnail and Tree  view. Sorting button - Allows user to sort assets in the Asset Browser. ...",t:"Asset Browser"},"120":{i:0.00132844475584566,u:"../Content/AssigningRawMaterialCostToAnEntity.htm",a:"Assign a raw material cost to an entity, which is the initial cost of the entity as it begins processing.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( http://www.promodel.com/solutionscafe/howto/) . Solution Open ...",t:"Assigning Raw Material Cost to an Entity"},"121":{i:0.00132844475584566,u:"../Content/AssigningValuesToVariablesAndAttributes.htm",a:"With a variable or attribute defined along with its initial value, at some point in the model you want to assign it a new value or increment/decrement its current value.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ...",t:"Assigning Values to Variables and Attributes"},"122":{i:0.00329238415908317,u:"../Content/Assignment.htm",a:"Statement Syntax samples\n         \u003cvariable, array element, or attribute\u003e = \u003cnumeric expression\u003e Var1 = 52 Acuity_Attr = 1 Product_Array[3, 5] = SKU_attr Description Assigns the value of a numeric expression to a designated variable, array element, or attribute. Valid In Any Logic Example Var1 = 300 ...",t:"Assignment"},"123":{i:0.00462743624522222,u:"../Content/Attach.htm",a:"Quantity  This allows you to specify the number of entities to be attached to the entity waiting at the connecting activity. Quantity Mode Allows you to select the behavior by which to attach the specified quantity. Entire Quantity With this option, the base entity will attach the total number of ...",t:"Attach"},"124":{i:0.00132844475584566,u:"../Content/AttributeBasedActivities.htm",a:"The activity time or other activity action is based on the value of a particular attribute. (For routings based on activity attributes see  Conditional Routings .)   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( ...",t:"Attribute-Based Activities"},"125":{i:0.00153193985350474,u:"../Content/Attributes.htm",a:"Attributes are place holders assigned to an entity and contain numerical \n information about that entity. An entity attribute is identified by its \n name and may be assigned a numerical value for its value. An entity attribute \n may be examined and acted upon in logic. Attributes have the following ...",t:"Attributes"},"126":{i:0.00132844475584566,u:"../Content/AutoDeskforPCS.htm",a:" Process Simulator - Autodesk® Edition The Process Simulator Autodesk® Edition ribbon is provided in addition for Autodesk® subscribers for additional capability beyond building, simulating models, and  review model results. The options include: Asset Browser Allows the user to toggle on or off the ...",t:"Process Simulator Toolbar"},"127":{i:0.00232807434019858,u:"../Content/AutomaticShapeConnection.htm",a:"To automatically connect entities and activities as they are placed \n on the layout, leave the Connector tool selected when dragging them onto \n the layout. This causes a connector to be automatically drawn from the \n previously placed shape to the new shape. If the connection was not wanted or it ...",t:"Automatic Shape Connection"},"128":{i:0.00132844475584566,u:"../Content/Balking.htm",a:"Customers balk, i.e., they refuse to enter a waiting line, if the line is too long.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( http://www.promodel.com/solutionscafe/howto/) . Solution Set the In Buffer capacity ...",t:"Balking"},"129":{i:0.00132844475584566,u:"../Content/BatchingOrConsolidatingActivities.htm",a:"Two or more entities are batched or consolidated at an activity.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( http://www.promodel.com/solutionscafe/howto/) .  A video demonstrating this solution can be found here. ...",t:"Batching or Consolidating Activities"},"130":{i:0.00491799316535276,u:"../Content/Break.htm",a:"Statement Syntax samples Break Description Exits the innermost While...Do, Do...While, or Do...Until loop. The next statement to be executed will be the one immediately following the end bracket associated with the innermost loop. If a Break is encountered outside any loop, then Process Simulator ...",t:"Break"},"131":{i:0.00491799316535276,u:"../Content/BreakBlk.htm",a:"Statement Syntax samples BreakBlk Description Exits from the innermost statement block. The next statement to be executed will be the one immediately following the end bracket of the innermost statement block. If a BreakBlk is executed outside any statement block, Process Simulator will exit the ...",t:"BreakBlk"},"132":{i:0.0108826895155301,u:"../Content/BufferProperties.htm",a:"Buffer Properties Right-click on a buffer shape, select Properties, and the Buffer properties window displays. There are Three sections in the Buffer properties window. Batching Notes Advanced A buffer shape provides a place in your process where entities can accumulate and optionally batch. Name ...",t:"Buffer Dialog"},"133":{i:0.0013702675851372,u:"../Content/CalDay.htm",a:"Function Syntax samples\n         CalDay() Description\n         The CalDay() function corresponds to the weekday of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options. Since CalDay() resets with the advent of a new week, every weekday will ...",t:"CalDay"},"134":{i:0.00160322106211771,u:"../Content/CalDOM.htm",a:"Function Syntax samples CalDOM() Description The CalDOM() function corresponds to the calendar day of the month you defined as part of the warm-up period or simulation begin date under simulation options. Values returned by this function will be integers in the range of 1 to 31. Valid In Any logic. ...",t:"CalDOM"},"135":{i:0.00262599954250755,u:"../Content/CalendarEditor.htm",a:"Shifts and time off for activities and resources \n are defined using the Calendar Editor. The interface consists of a Main Menu \n button, Quick Access toolbar, as well as the Calendar tab and Shifts tab, \n and the tab-specific toolbars. Clicking between the Calendar and Shifts \n tabs will display ...",t:"Calendar Editor"},"136":{i:0.00160322106211771,u:"../Content/CalHour.htm",a:"Function Syntax samples CalHour() Description The CalHour() function corresponds to the hour of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options. Since this function ties directly to the 24-hour clock displayed on the screen during ...",t:"CalHour"},"137":{i:0.00160322106211771,u:"../Content/CalMin.htm",a:"Function Syntax samples CalMin() Description The CalMin() function corresponds to the minute of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options. Since this function ties directly to the 24-hour clock displayed during simulation, CalMin() ...",t:"CalMin"},"138":{i:0.00160322106211771,u:"../Content/CalMonth.htm",a:"Function Syntax samples CalMonth() Description The CalMonth() function corresponds to the month of the year you defined as part of the warm-up period or simulation begin date under simulation options. Values returned by this function will be integers in the range of 1 to 12. Valid In Any logic. ...",t:"CalMonth"},"139":{i:0.00160322106211771,u:"../Content/CalYear.htm",a:"Function Syntax samples CalYear() Description The CalYear() function corresponds to the year of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options.  Valid In Any logic. Please Note: CalYear() works only when you select calendar date in the ...",t:"CalYear"},"140":{i:0.00132844475584566,u:"../Content/ChangingAnEntityNameOrItsGraphicalRepresentation.htm",a:"After completing a particular activity, it may be desirable to change the name or graphical representation of the entity being processed.   Please note: The graphical representation for an entity is changed by changing the entity name and using the graphic associated with that entity. So whether ...",t:"Changing an Entity\u0027s Name or its Graphical Representation"},"141":{i:0.0013702675851372,u:"../Content/Clock.htm",a:"Function Syntax samples Clock({\u003ctime unit\u003e}) If Clock(day) \u003e= 1.5 Then Pause Attr1 = Clock() Description Returns the value of the elapsed simulation time in the units specified. Clock units should be kept consistent when comparing values. If an attribute has been assigned a time in minutes, any time ...",t:"Clock()"},"142":{i:0.00132844475584566,u:"../Content/Comment.htm",a:"Documentation Symbols Syntax samples // /*...*/ Components // \tTwo forward slashes signal the start of a one-line comment. Process Simulator will ignore any characters on the rest of the line. /*...*/ A slash followed by an asterisk signals the start of a multi-line comment. Process Simulator will ...",t:"Comment"},"143":{i:0.00132844475584566,u:"../Content/Conditional.htm",a:"Condition \n   The condition that must be satisfied, i.e. evaluate to true, \n before this route is selected. The condition can be an \u003cEntity\u003e\n or any variable/attribute value. For other special conditions, the test can \n be made in the activity logic, which sets an attribute value that can \n be ...",t:"Conditional"},"144":{i:0.00245766114671717,u:"../Content/ConditionalRoutings.htm",a:"Route to one of several different activities depending on the type of entity or the value of a variable or entity attribute.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( ...",t:"Conditional Routings"},"145":{i:0.00132844475584566,u:"../Content/ConditionDependentBatching.htm",a:"Consolidate Entities into a Batch that have accumulated only until a condition becomes true (e.g., until a resource is available or until a truck has arrived).   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( ...",t:"Condition Dependent Batching"},"146":{i:0.0023519727769115,u:"../Content/ConnectingShapes.htm",a:"After placing the shapes on the layout, they should be connected to define the processing sequence or routing. To connect shapes: Click on the Connector tool, which puts you in connection mode.  Move the cursor over either the middle of the FROM shape or one of the four sides of the shape until a ...",t:"Connecting Shapes"},"147":{i:0.00264586387852908,u:"../Content/Connections.htm",a:"Connections are used to model the flow of entities through your simulation. \n Below is a brief description of the three available connection types. \n For more information on setting up and defining connections, see  Connecting Shapes (see Connecting Shapes on page 2) . Plain Connector \n   This ...",t:"Connections"},"148":{i:0.00132844475584566,u:"../Content/ConsumableReplenishableResources.htm",a:"Certain types of resources are consumed or replenished by an activity. Examples include energy, water and money.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( http://www.promodel.com/solutionscafe/howto/) .  A ...",t:"Consumable Replenishable Resources"},"149":{i:0.00132844475584566,u:"../Content/Contents.htm",a:"Table of Contents",t:"Table of Contents"},"150":{i:0.00132844475584566,u:"../Content/Continuous.htm",a:"If you select Continuous as the arrival type, an arrival will occur \n whenever the activity has available capacity. Entity \n   Shows the entity connected to the arrival connector and specifies the type of entities that will arrive. If an entity is not connected to the arrival connection, then this ...",t:"Continuous"},"151":{i:0.00132844475584566,u:"../Content/ConvertingExistingFlowChartsToProcessSimulatorModels.htm",a:"Converting Existing Flowcharts to Process Simulator Models You may convert an existing Visio flowchart to a Process Simulator model \n by choosing the Convert Diagram option from the Process Simulator \nribbon. You can also upgrade old Process Simulator diagrams to the latest version using the Convert ...",t:"Converting Existing Flow Charts to Process Simulator Models"},"152":{i:0.00132844475584566,u:"../Content/ConveyanceKanbanControlSystem.htm",a:"Cause entities to be held up until a signal is received that a downstream inventory has dropped to a specified inventory level.   The model used for this example, as well as all of the modeling \"how-to\" examples,  can be found in the ProModel Solutions Café ( ...",t:"Conveyance Kanban (Reorder Point) Control System"},"153":{i:0.00226952979374614,u:"../Content/Cost.htm",a:"Calculations Process Simulator allows you to collect cost data on entities, activities \n and resources. The unit cost for each entity processed is shown in the \n scoreboard in the output report. Total costs by activity, resource and \n entity can also be viewed in the output report.  To define a ...",t:"Cost"},"154":{i:0.00132844475584566,u:"../Content/CostModeling.htm",a:"The cost of doing business can be broken down into fixed and variable costs. Fixed or overhead costs remain constant from period to period, regardless of the amount and type of entities processed or services provided. Examples of fixed cost include rent, utilities and salaries. Variable costs are ...",t:"Cost Modeling"},"155":{i:0.00132844475584566,u:"../Content/Cover.htm",a:"  user guide   version 9.3       www.promodel.com  ",t:"Cover"},"156":{i:0.00181408276600478,u:"../Content/Create.htm",a:"When \n   Select whether to create the entity before or after the current \n activity. Entity \n   Select the name of the entity to be created. Quantity \n   The number of entities of the selected type to be created. \n This value may be entered as a number, or you can right click on the field \n to see a ...",t:"Create"},});