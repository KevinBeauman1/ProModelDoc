define({"0":{i:0.00132844475584566,u:"../Content/Topics/Title.htm",a:"    www.promodel.com",t:"Title"},"1":{i:0.00132844475584566,u:"../Content/Topics/Disclaimer.htm",a:"The information in this addendum has been provided by ProModel Corporation to document the ActiveX capabilities of ProModel, MedModel, and ServiceModel.  The information in this addendum is subject to change without notice and does not represent a commitment on the part of ProModel Corporation. The ...",t:"Disclaimer"},"2":{i:0.00132844475584566,u:"../Content/Topics/ActiveXTOC.htm",a:"Table of Contents",t:"Table of Contents"},"3":{i:0.00132844475584566,u:"../Content/Topics/C-01.htm",a:"ProModel’s ActiveX Components ProModel’s ActiveX Automation capability allows you to use any ActiveX-enabled language (e.g. Microsoft Visual Basic, VBA, Visual C#, or Visual C++) to: Build customized user interfaces for ProModel Add, Change or Delete model data from external data sources, such as ...",t:"Introduction"},"4":{i:0.00132844475584566,u:"../Content/Topics/ProModel Objects.htm",a:"All of the Type Libraries have an Application object, a Data object and a Runtime object.  Each object gives you access to different parts of ProModel.  The following is a brief description of these objects: Application – gives you operational control of ProModel.  For example, using this object you ...",t:"ProModel Objects"},"5":{i:0.00132844475584566,u:"../Content/Topics/OtherObjects.htm",a:"ProModel also provides a few other objects that will enable you to:  Access the data found in the classic output statistics files (*.rdb, *.rdt). Capture and respond to events that take place in ProModel\nThere are two files that allow you to work with the classic output statistics.  They are: ...",t:"Other Objects"},"6":{i:0.00132844475584566,u:"../Content/Topics/Methods.htm",a:"Each ProModel ActiveX Object has one or more methods (actions it can perform). Each method may or may not have Parameters (details that you provide or that ProModel returns). Syntax Most methods can be used in two different ways.  The first example shown below does not have a variable to receive the ...",t:"Methods"},"7":{i:0.00132844475584566,u:"../Content/Topics/Result Codes.htm",a:"Almost all of the methods in the ProModelData object may optionally be written to return a result code. Result codes help you know if the execution of the method was successful. For a list of result codes, see  Locations Table (1): PMD_Table_Location on page 2 . Definitions Record Type = Table ...",t:"Result Codes"},"8":{i:0.00132844475584566,u:"../Content/Topics/Parameters.htm",a:"ProModel has two kinds of parameters:  Input Parameters and Output Parameters.  Each parameter has a specific data type.  In this document, the data types shown are Visual Basic data types.  If you are programming in another ActiveX enabled language, you will need to use the equivalent types in that ...",t:"Parameters"},"9":{i:0.00132844475584566,u:"../Content/Topics/PM Constants.htm",a:"You may have noticed that the first parameter in the “SelectMainRecordByName” method used in the code sample in the Syntax section contains a number.  This number references the Locations table.  Because it can be difficult to remember the number codes associated with so many tables, fields, status ...",t:"PM Constants"},"10":{i:0.00132844475584566,u:"../Content/Topics/Working with Data.htm",a:"When you create a model, what you are actually doing is recording information about your business processes.  When you run a simulation, ProModel takes that information and uses it to display an animated representation of your processes and to generate the statistical information about your ...",t:"Working with Data"},"11":{i:0.00245766114671717,u:"../Content/Topics/Working with Graphics.htm",a:"Though the basic principles for working with data in the graphics tables are the same as working with any other data table in ProModel, there are some things that work a bit differently.  This section covers those differences.   We have already indicated that the Location Graphics table is a child ...",t:"Working with Graphics"},"12":{i:0.00132844475584566,u:"../Content/Topics/The ProModel Application.htm",a:"The  ProModel Application Object The ProModel Application object is found in ProModel.exe, MedModel.exe and ServiceModel.exe as “ProModel”, or “ProModel Type Library”. The “ProModelPM”, or “ProModel PM Type Library” is found exclusively in ProModel.exe. Likewise MedModel.exe contains \"ProModelMM\" or ...",t:"The ProModel Application Object"},"13":{i:0.00132844475584566,u:"../Content/Topics/EndReplication.htm",a:"Syntax:  EndReplication Description:  Terminates a Replication before completion.  Simulation will then proceed to the next replication.  If EndReplication is called during the final replication, the simulation will end. Parameters:  None Returns:  Nothing Example:This example loads a model, runs ...",t:"EndReplication"},"14":{i:0.00132844475584566,u:"../Content/Topics/EndSimulation.htm",a:"Syntax:  EndSimulation Description:  Terminates a simulation run before completion.  The EndSimulation method will have no effect if called when there is no simulation running.  If running multiple replications, the entire simulation will end (remaining replications will not be run). The output ...",t:"EndSimulation"},"15":{i:0.00132844475584566,u:"../Content/Topics/GetEventsObject.htm",a:"Syntax:  GetEventsObject Description:  Use this method to initialize the ProModel Events object.  For further instructions see the Events Handler section. Parameters:  None Returns:  Event Handler object. Example:This example is incomplete, but the code given shows how to use the GetEventsObject ...",t:"GetEventsObject"},"16":{i:0.00132844475584566,u:"../Content/Topics/GetSimTime.htm",a:"Syntax:  GetSimTime (Seconds) Description:  Gets the current simulation time in seconds. Parameters: Seconds\t(Double)  Output parameter that receives return value. Returns:  (Double) Current simulation clock time in seconds. Example:This example loads a model, runs it for 30 minutes (1800 seconds), ...",t:"GetSimTime"},"17":{i:0.00132844475584566,u:"../Content/Topics/GetStatus.htm",a:"Syntax:  GetStatus Description:  Gets the current state of a loaded model.  Use this method to trap events triggered by ProModel or the user. Note:  This method is easier to use than the Events Handler, but less robust and reliable.  For instance, the GetStatus method will work fine for simple ...",t:"GetStatus"},"18":{i:0.00132844475584566,u:"../Content/Topics/GetOutputPath.htm",a:"Syntax:  GetOutputPath Description:  Returns the fully qualified path where simulation ouptut will be written to. This path may also be found by using the ProModel user interface under Simulation Options | Output Path.  Parameters:  None. Returns:  A string containing the fully qualified path where ...",t:"GetOutputPath"},"19":{i:0.00132844475584566,u:"../Content/Topics/GetVersion.htm",a:"Syntax:  GetVersion Description:  Returns the version of the product you are using. This could be used to make certain that the user’s version of ProModel is recent enough to contain certain features. Parameters:  None. Returns:  (String)  Version number and build number shown in the ‘Help \u003e About’ ...",t:"GetVersion"},"20":{i:0.00132844475584566,u:"../Content/Topics/LoadDefaults.htm",a:"LoadDefaults Syntax:  LoadDefaults ININame Description:  Reloads the INI file, which contains the ProModel defaults.  Parameters: ININame\t The name of the INI file with the desired defaults.",t:"LoadDefaults"},"21":{i:0.00132844475584566,u:"../Content/Topics/LoadModel.htm",a:"Syntax:  LoadModel FileName Description:  Loads the specified model. Parameters: FileName\t(String)  Any valid path and model filename. Model files must have a .mod extension. Returns:  Nothing Example:This example loads a model, runs it for 30 minutes (1800 seconds), then terminates the simulation. ...",t:"LoadModel"},"22":{i:0.00132844475584566,u:"../Content/Topics/MenuCommand.htm",a:"Syntax:  MenuCommand CmdNum, lParam Description:  Executes a specified menu option (as if the user had selected it). Parameters: CmdNum\t (Long)  The ID number of the menu command you wish to use. See  Locations Table (1): PMD_Table_Location on page 2 .   lParam \t(Long)  For almost all MenuIDs, ...",t:"MenuCommand"},"23":{i:0.00132844475584566,u:"../Content/Topics/MergeModel.htm",a:"Syntax:  MergeModel FileName, Xpos, Ypos, Tag, Flags Description:  Merges the specified model into the currently loaded model. Model merging is useful when you wish to join sub models or fragmented model components to the original model. Parameters: FileName\t (String)  The name of the file you wish ...",t:"MergeModel"},"24":{i:0.00132844475584566,u:"../Content/Topics/MsgBox.htm",a:"Syntax:  MsgBox Message Description:  Displays a message box containing the indicated text. The message box will display in ProModel. If you wait for a response from within Excel or a custom VB interface, you may not see the message box. This may delay operations while the dialog awaits a response. ...",t:"MsgBox"},"25":{i:0.00132844475584566,u:"../Content/Topics/New.htm",a:"Syntax:  New Description:  Invokes the File/New command without launching the General Information Dialog. Parameters:  None Returns:  Nothing Example:This example opens ProModel and loads a new (empty) model.   Sub NewMod() \tDim pmObject As ProModel.CProModel   \tSet pmObject = ...",t:"New"},"26":{i:0.00132844475584566,u:"../Content/Topics/OpenModule.htm",a:"Syntax:  OpenModule Module Description:  Opens a specific build module. A module is a table in the ProModel Build menu. Passing a zero (0) value will close any open modules. Parameters: Module\t(Long)  A module ID number from the list below. Returns:  Nothing Module ID Numbers: 0 \t\tNo modules open 1 ...",t:"OpenModule"},"27":{i:0.00132844475584566,u:"../Content/Topics/Quit.htm",a:"Syntax: Quit Description:  Closes ProModel.  The “Save Changes?” prompt will appear, if applicable. Parameters: None Returns:  Nothing Example:This example opens ProModel, then closes it.   Sub ClosePM() \tDim pmObject As ProModel.CProModel   \tSet pmObject = CreateObject(\"ProModel\") pmObject.Quit   ...",t:"Quit"},"28":{i:0.00132844475584566,u:"../Content/Topics/RedrawLayout.htm",a:"Syntax:  RedrawLayout Description:  Refreshes the layout window. Useful when you add graphical objects via the ProModelData interface. Parameters:  None Returns:  Nothing Example:The following examples loads a model, adds a location record, attaches a library graphic to the location , and redraws ...",t:"RedrawLayout"},"29":{i:0.00132844475584566,u:"../Content/Topics/RedrawTables.htm",a:"Syntax:  RedrawTables Description:  Refreshes any open tables.  When using the ProModel Data Object to update model data, if the table being update is open, the screen will not show the changes until RedrawTables is executed or the module is closed and re-opened. Parameters:  None Returns:  Nothing ...",t:"RedrawTables"},"30":{i:0.00132844475584566,u:"../Content/Topics/ReleaseEventsObject.htm",a:"Syntax:  ReleaseEventsObject Description:  This method is only useful when used with the GetEventsObject method. Its purpose is to remove the connection between the ProModel events object and any event handler(s) contained in the user’s code. After this connection is removed, the user’s event ...",t:"ReleaseEventsObject"},"31":{i:0.00132844475584566,u:"../Content/Topics/RunScenarios.htm",a:"Syntax:  RunScenarios Description:  Runs scenarios defined in the model. Parameters:  None Returns:  Nothing Example:This example loads a model, then runs the defined simulation scenarios.   Sub MfgScenarios() \tDim pmObject As ProModel.CProModel   \tSet pmObject = CreateObject(\"ProModel\") ...",t:"RunScenarios"},"32":{i:0.00132844475584566,u:"../Content/Topics/Save.htm",a:"Syntax:  Save Description:  Saves any changes to the loaded model (to the same file). This method is only available with a professional license.  Parameters:  None Returns:  Nothing Examle:This example loads a model, adds a new record to the Entities table, then saves the changes.   Sub AddEnt() ...",t:"Save"},"33":{i:0.00132844475584566,u:"../Content/Topics/SaveAs.htm",a:"Syntax:  SaveAs ModelName Description:  Saves the loaded model to a specified file. This method is only available with a professional license.  Parameters: ModelName\t(String)  Any valid model path \u0026 filename. Returns:  Nothing Example:This example loads a model, adds a record to the Entities table, ...",t:"SaveAs"},"34":{i:0.00132844475584566,u:"../Content/Topics/SetMacro.htm",a:"Syntax:  SetMacro Macro Name, Macro Value Description:  Sets the value of a ProModel macro. Parameters: MacroName\t(String)  ID of any defined macro in loaded model. MacroValue\t (String)  New value for specified macro. Returns:  Nothing Example:This example loads a model, changes a macro value, then ...",t:"SetMacro"},"35":{i:0.00132844475584566,u:"../Content/Topics/SetMessageMode.htm",a:"Syntax:  SetMessageMode Flags Description:  This method only applies to standard message boxes, it will have no effect on error messages, translation dialog or data dialogs accessed from the menu.  With this method you can control what types of messages to display or not to display.  Types are based ...",t:"SetMessageMode"},"36":{i:0.00132844475584566,u:"../Content/Topics/SetPan.htm",a:"Syntax: SetPan x, y Description:  Moves the layout view so that the x-y coordinates specified are at the top left corner of the layout window (as if the user had moved the scroll bars). Parameters: x (Double)  Horizontal shift in pixels. y (Double)  Vertical shift in pixels. Returns:  Nothing ...",t:"SetPan"},"37":{i:0.00132844475584566,u:"../Content/Topics/SetView.htm",a:"Syntax:  SetView ViewName Description:  Sets the layout window to display a specific view. Parameters: ViewName\t(String)  The name of the view you wish to display. Returns:  Nothing Example:This example loads a model, then switches to the defined view.   Sub ShowFull() \tDim pmObject As ...",t:"SetView"},"38":{i:0.00132844475584566,u:"../Content/Topics/SetViewRect.htm",a:"Syntax:  SetViewRect Left, Top, Right, Bottom Description:  Zooms and pans the layout to allow the rectangle defined by the input coordinates to fill the layout window. Note: The x,y dimensions are always scaled equally. Parameters: Left (Double)  The left boundary. Top (Double)  The top boundary. ...",t:"SetViewRect"},"39":{i:0.00132844475584566,u:"../Content/Topics/SetWindowPos.htm",a:"Syntax:  SetWindowPos Window, xPos, yPos, xSize, ySize, Flags Description:  Defines the position, size and style of the application window or the layout window.  The application window position is relative to the screen, other layout window is relative to the application window. Parameters: Window ...",t:"SetWindowPos"},"40":{i:0.00132844475584566,u:"../Content/Topics/ShowTranslationDlg.htm",a:"Syntax:  ShowTranslationDlg Status Description:  Shows or hides the translation dialog. Parameters:  Status\t(Boolean) True displays the dialog, False hides the dialog. Returns:  Nothing Example:This example loads a model, sets the option to hide the Translation dialog, then runs the simulation.   ...",t:"ShowTranslationDlg"},"41":{i:0.00132844475584566,u:"../Content/Topics/Simulate.htm",a:"Syntax:  Simulate Description:  Starts the simulation. Parameters:  None Returns:  Nothing Example:This example loads a model, runs it for 30 minutes (1800 seconds), then terminates the simulation.   Sub SimIt() \tDim pmObject As ProModel.CProModel \tDim CurSimTime AS Double   \tSet pmObject = ...",t:"Simulate"},"42":{i:0.00245766114671717,u:"../Content/Topics/Zoom.htm",a:"Syntax:  Zoom PercentZoom Description:  Sets the zoom percentage of the model.  Passing a zero (0) in the PercentZoom parameter shrinks or expands the model to fit the layout window. Parameters:   PercentZoom (Double)  1 = 100%, 0.75 = 75%, etc. Returns:  Nothing Example:This example loads a model, ...",t:"Zoom"},"43":{i:0.00132844475584566,u:"../Content/Topics/The ProModel Events Obje.htm",a:"The PMEvents object is found in the ProModel Events 8.0 Type Library. This object provides methods for trapping and responding to certain events that happen in ProModel.  The PMEvents object must be initialized by the GetEventsObject method found in the ProModel Application object. In Visual Basic, ...",t:"The ProModel Events Object"},"44":{i:0.00132844475584566,u:"../Content/Topics/PMEventsHandler.htm",a:"To use the ProModel Events Handler, add a reference to the ProModel Events 8.0 Type Library (pmcp80.dll typically found in your “C:\\Program Files\\Common Files\\ProModel Corporation\\Components” folder).  Then, add the following to the Class Module 1  class module:  A module that contains the ...",t:"PMEventsHandler"},"45":{i:0.00132844475584566,u:"../Content/Topics/AnimSpeedChange.htm",a:"Syntax:  ObjectVariable_AnimSpeedChange(ByVal Speed As Long) As Long Description:  This event occurs whenever animation speed is changed by the user, by animate command encountered in model code, or via COM interface (VB program code). Parameters: Speed \t (Long) – Integer from 0 through 100 ...",t:"AnimSpeedChange"},"46":{i:0.00132844475584566,u:"../Content/Topics/InputTextPrompt.htm",a:"Syntax:  ObjectVariable_InputTextPrompt(ByVal Message As String, ByVal Default As String, Value As String, ByVal Flags As Long) As Long Description:  The prompt statement in ProModel can be defined either as a simple prompt/response dialog box or as a list of options to choose from.  This event ...",t:"InputTextPrompt"},"47":{i:0.00132844475584566,u:"../Content/Topics/ListSelectPrompt.htm",a:"Syntax:  ObjectVariable_ListSelectPrompt(ByVal Message As String, ByVal MenuItemCount As Long, psaLabels() As String, psaValues() As Double, Choice As Long, ByVal Flags As Long) As Long Description:  The prompt statement in ProModel can be defined either as a simple prompt/response dialog box or as ...",t:"ListSelectPrompt"},"48":{i:0.00132844475584566,u:"../Content/Topics/RunError.htm",a:"Syntax:  ObjectVariable_RunError(ByVal ErrorID As Long, ByVal Description As String, ByVal Flags As Long) As Long Description:  This event fires whenever an error is encountered during simulation.  This allows you to handle specific types of errors in different ways. Parameters: ErrorID \t(Long) – ...",t:"RunError"},"49":{i:0.00132844475584566,u:"../Content/Topics/TranslationError.htm",a:"Syntax:  ObjectVariable_TranslationError(ByVal ErrorID As Long, ByVal Description As String, ByVal Flags As Long) As Long Description:  This event occurs whenever an error is encountered during model translation (just before simulation begins). Parameters: ErrorID (Long) – error code generated by ...",t:"TranslationError"},"50":{i:0.00132844475584566,u:"../Content/Topics/UserZoom.htm",a:"Syntax:  ObjectVariable_UserZoom (ByVal ZoomPercent As Double) As Long Description:  Fired when zoom setting of the layout window is changed, either by explicit zoom or by changing views. Parameters: ZoomPercent \t(Double) – Factor by which the layout is magnified, 1 = 100% Returns:  Not used   ...",t:"UserZoom"},"51":{i:0.00132844475584566,u:"../Content/Topics/The ProModel Runtime Obj.htm",a:"The  ProModel Runtime Object The ProModel Runtime object is found in the ProModel Type Library.  If you do not see this library in your references list, you will need to run ProModel.exe (or MedModel.exe or ServiceModel.exe) with the “/regserver” command line option.   Using the ProModel Runtime ...",t:"The ProModel Runtime Object"},"52":{i:0.00132844475584566,u:"../Content/Topics/GetAnimationState.htm",a:"Syntax:  GetAnimationStateState Description:  Gets the current state of the animation, whether ON or OFF. Parameters: State (Long - Output Parameter)  Zero (0) if animation is off, one (1) if animation is on. Returns:  Long - Zero (0) if animation is off, one (1) if animation is on. Example: Dim ...",t:"GetAnimationState"},"53":{i:0.00132844475584566,u:"../Content/Topics/GetAnimationSpeed.htm",a:"Syntax:  GetAnimationSpeedSpeed Description:  Gets the current value …  When using GetAnimationSpeed and SetAnimationSpeed, the numeric value of a given speed may be slightly different for each method (because of rounding). Parameters: Speed (Long - Output Parameter) Numeric value representing ...",t:"GetAnimationSpeed"},"54":{i:0.00132844475584566,u:"../Content/Topics/GetIntArrayValues.htm",a:"Syntax:  GetIntArrayValues  Description:  Gets the values on an integer array during simulation runtime Parameters: Array Name\t (String) The name of integer array. Subset\t (String) A selection of elements from the integer array. The syntax is the same as the syntax used in VBA to index an array. For ...",t:"GetIntArrayValues"},"55":{i:0.00132844475584566,u:"../Content/Topics/GetRealArrayValues.htm",a:"Syntax:  GetRealArrayValues  Description:  Gets the values of a real array during simulation runtime Parameters: Array Name \t(String) The name of the real array. Subse t\t(String) A selection of elements from the real array. The syntax is the same as the syntax used in VBA to index an array. For ...",t:"GetRealArrayValues"},"56":{i:0.00132844475584566,u:"../Content/Topics/GetStatValue.htm",a:"Syntax:  GetStatValueTableID, RecordNum, StatID, SubRec, Value Description:  Gets the current value for the specified statistics element. Parameters: TableID (Long)  Table (Section) Number containing the data element you wish to retrieve. RecordNum (Long)  Record (Row) Number containing the data ...",t:"GetStatValue"},"57":{i:0.00132844475584566,u:"../Content/Topics/SetAnimationState.htm",a:"Syntax:  SetAnimationState State Description:  Sets the state of the animation to be either on or off. Parameters: State (Long) Zero (0) to turn animation off, one (1) to turn animation on. Returns:  Nothing Example: Dim pmRun as Promodel.CRuntime   pmObj.Simulate pmRun.SetAnimationState 0 ’Off   ...",t:"SetAnimationState"},"58":{i:0.00132844475584566,u:"../Content/Topics/SetAnimationSpeed.htm",a:"Syntax:  SetAnimationSpeed Speed Description:  Sets the animation speed.  When using GetAnimationSpeed and SetAnimationSpeed, the numeric value of a given speed may be slightly different for each method (because of rounding). Parameters: Speed (Long) Numeric value representing animation speed (1 to ...",t:"SetAnimationSpeed"},"59":{i:0.00132844475584566,u:"../Content/Topics/SetIntArrayValues.htm",a:"Syntax:  SetIntArrayValues Description:  Sets the value of an integer array during simulation runtime.  Parameters: ArrayName (String) The name of the integer array. Subset \t(String) A selection of elements from the integer array. The syntax is the same as the syntax used in VBA to index an array. ...",t:"SetIntArrayValues"},"60":{i:0.00132844475584566,u:"../Content/Topics/SetRealArrayValues.htm",a:"Syntax:  SetRealArrayValues Description:  Sets the values of a real array during simulation runtime.  Parameters: ArrayName (String) The name of the real array. Subset \t(String) A selection of elements from the real array. The syntax is the same as the syntax used in VBA to index an array. For ...",t:"SetRealArrayValues"},"61":{i:0.00132844475584566,u:"../Content/Topics/SetStatValue.htm",a:"  Syntax:  SetStatValueTableID, RecordNum, SubRec, StatID, NewVal Description:  Changes the current value for the specified statistics element.  To set variable values, use TableID = 12, StatID = 5. Parameters: TableID (Long)  Table (Section) Number containing the data element you wish to set. ...",t:"SetStatValue"},"62":{i:0.00132844475584566,u:"../Content/Topics/The ProModel Data Object.htm",a:"The  ProModel Data Object The ProModel Data object is found in the ProModel Type Library.  If you do not see this library in your references list, you will need to run ProModel.exe (or MedModel.exe or ServiceModel.exe) with the “/regserver” command line option.  This object provides access to your ...",t:"The ProModel Data Object"},"63":{i:0.00132844475584566,u:"../Content/Topics/AddBackgroundBitmap.htm",a:"Syntax:  AddBackgroundBitmap RecordType, Filename, Xpos, Ypos, Percent Description:  Adds the bitmap in the specified file to the background of the current model.  When adding more than one bitmap, they are placed one on top of the other, so be sure to add the one(s) in back first.  It is best to ...",t:"AddBackgroundBitmap"},"64":{i:0.00132844475584566,u:"../Content/Topics/AppendEntitySpot.htm",a:"Syntax:  AppendEntitySpot RecordIndex, XPosition, YPosition Description:  Appends an Entity Spot graphic to an existing Location record. Parameters: RecordIndex (Long)  The Record Index (Row Number) of the Location you wish to add an Entity Spot to. XPosition (Double)  Number of pixels over from the ...",t:"AppendEntitySpot"},"65":{i:0.00132844475584566,u:"../Content/Topics/AppendGraphicIcon.htm",a:"Syntax:  AppendGraphicIcon RecordType, RecordIndex, GraphicNumber, XPos, YPos Description:  Appends a graphic to an existing Location, Entity or Resource record, without changing its size. Parameters: RecordType (Long)  The Record Type (Table Number) of the table you wish to work with. RecordIndex ...",t:"AppendGraphicIcon"},"66":{i:0.00132844475584566,u:"../Content/Topics/AppendGraphicIconSize.htm",a:"Syntax:  AppendGraphicIconSize RecordType, RecordIndex, GraphicNumber, Xpos, Ypos, Xsize, Ysize Description:  Appends a graphic to an existing Location, Entity or Resource record.  This method lets you specify the size of the graphic as a percentage of its original size. Parameters: RecordType ...",t:"AppendGraphicIconSize"},"67":{i:0.00132844475584566,u:"../Content/Topics/AppendRecord.htm",a:"Syntax:  AppendRecord RecordType Description:  Adds a new record to the end of the specified table.  When using AppendRecord, you may use the Set…FieldValue methods without first calling the SelectRecordBy… method.  However, if you are using a method that requires the Record Index number as a ...",t:"AppendRecord"},"68":{i:0.00132844475584566,u:"../Content/Topics/AppendRoutingPoint.htm",a:"Syntax:  AppendRoutingPoint XPosition, Yposition Description:  Adds a new Routing Point and connects the previous end point to the new point.  You must first select the Processing and Routing records you wish to append the new Routing Point to. Parameters: Xposition \t(Double)  Number of pixels from ...",t:"AppendRoutingPoint"},"69":{i:0.00132844475584566,u:"../Content/Topics/DeleteRecord.htm",a:"Syntax:  DeleteRecord RecordType Description:  Deletes the currently selected record from the specified table.  Be very careful when using this method, because it will delete records without any data integrity checking.  This means that even if the record is referenced by a record in another table, ...",t:"DeleteRecord"},"70":{i:0.00132844475584566,u:"../Content/Topics/GetIntFieldValue.htm",a:"Syntax:  GetIntFieldValue RecordType, FieldNumber, FieldValue Description:  Returns the value of the specified integer field from the selected record. Parameters: RecordType \t (Long)  The Record Type (Table Number) of the table you wish to work with. FieldNumber\t(Long)  The field (column) number in ...",t:"GetIntFieldValue"},"71":{i:0.00132844475584566,u:"../Content/Topics/GetRealFieldValue.htm",a:"Syntax:  GetIntFieldValue RecordType, FieldNumber, FieldValue Description:  Returns the value of the specified real number field from the selected record. Parameters: RecordType \t (Long)  The Record Type (Table Number) of the table you wish to work with. FieldNumber (Long)  The field (column) number ...",t:"GetRealFieldValue"},"72":{i:0.00132844475584566,u:"../Content/Topics/GetRecordCount.htm",a:"Syntax:  GetRecordCount RecordType, Count Description:  Returns the current number of records in the specified table.  This is very useful in looping through each record in a table of unknown size. Parameters: RecordType (Long)  The Record Type (Table Number) for which you want the record count. ...",t:"GetRecordCount"},"73":{i:0.00132844475584566,u:"../Content/Topics/GetSelectedsFromType.htm",a:"Syntax:  GetSelectedsFromType RecordType, MainIndex, Field, SubIndex Description:  Returns record index values for the currently selected main and sub records. Parameters: RecordType (Long)  The Record Type (Table Number) of the table you want to work with. MainIndex (Long)  Returns Record Index ...",t:"GetSelectedsFromType"},"74":{i:0.00132844475584566,u:"../Content/Topics/GetStringFieldValue.htm",a:"Syntax:  GetStringFieldValue RecordType, FieldNumber, FieldValue Description:  Returns the value of the specified string field from the selected record. Parameters: RecordType \t(Long)  The Record Type (Table Number) of the table you want to work with. FieldNumber (Long)  The field (column) number in ...",t:"GetStringFieldValue"},"75":{i:0.00132844475584566,u:"../Content/Topics/InsertRecord.htm",a:"Syntax:  InsertRecord RecordType Description:  Inserts a new record before the selected record in the table. The newly inserted record will already be selected, so there is no need to use the SelectMainRecordBy… methods before populating the data. Parameters: RecordType \t (Long)  The Record Type ...",t:"InsertRecord"},"76":{i:0.00132844475584566,u:"../Content/Topics/Populate.htm",a:"Syntax:  Populate Description:  Populates the ProModelData object with the current, loaded model data. Call this method before using the data object. You must call the Populate method to initialize the ProModelData object with the model’s current information. Use Populate each time you open or close ...",t:"Populate"},});