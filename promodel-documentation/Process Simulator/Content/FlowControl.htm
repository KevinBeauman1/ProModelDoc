<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="1257" MadCap:lastWidth="880">
    <!-- InstanceBegin template="/Templates/PIProcess.dwt" codeOutsideHTMLIsLocked="false" -->
    <head><title>Flow Control</title>
        <!-- InstanceBeginEditable name="doctitle" -->
        <!-- InstanceEndEditable -->
        <!-- InstanceBeginEditable name="head" -->
        <!-- InstanceEndEditable -->
        <link href="Resources/Stylesheets/Stylesheet for online.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1>Flow Control</h1>
        <MadCap:keyword term="flow control" />
        <p>Before defining the properties of the Process Simulator objects that 
 have been placed on the layout, it is important to understand how entity 
 flow occurs when a Process Simulator model is run. Entities start the 
 process at the activities where Arrivals have been defined. The activity 
 sequence in which each entity flows through the process is controlled 
 by the routings that are defined from each activity. When an entity completes 
 an activity for which there are no routings defined, it exits the system. 
 Alternative routings from which to choose based on some percentage or 
 condition can also be defined from any activity. </p>
        <p>Controlling the timing of entity flow is also important in order to model the 
 correct behavior of the process. The timing of when entities 
 start the first activity is controlled by the way the entity Arrival is 
 defined for that activity. Controlling the timing of entity movement from 
 activity to activity can be accomplished by any combination of the following:</p>
        <ul>
            <li class="li_1">Specify the amount of time an entity should wait at an activity before moving on.</li>
            <li class="li_1">Specify a condition to be met (accumulation of a certain number of entities, waiting until a variable reaches a given value, etc.) before moving on. </li>
            <li class="li_1">Limit the capacity of the next activity or input buffer to the next activity (movement doesn't occur until there is available capacity at the destination activity).</li>
            <li class="li_1">Require a resource to make the move (movement doesn't occur until the resource specified for making the move is available).</li>
        </ul>
        <p>In Process Simulator, entities are not able to move from one activity to the next until:</p>
        <ol>
            <li>Any time delay or other activity logic specified for the current activity has been completed.</li>
            <li>There is available capacity at the next activity or at the input buffer of the next activity.</li>
            <li>Any specified resource required to make the move can be obtained (i.e. it is available).</li>
        </ol>
        <p>When an entity arrives at an activity either by an arrival that was 
 defined or by a routing that was completed, if an input buffer is defined 
 for the activity, the entity enters the input buffer and waits until capacity 
 is available at the activity. Once capacity is available, the entity gets 
 any resource that has been defined for the activity and enters the activity. 
 If no input buffer is defined, the entity enters directly into the activity 
 and then captures any resource specified for the activity. Once the resource 
 is obtained, the entity executes any logic defined for the activity and 
 then takes whatever activity time has been defined. </p>
        <p>Once the entity completes any activity logic and time that is defined, 
 if there is an output buffer defined, the entity waits until it is available 
 and then enters into it. If no output buffer is defined, or once the entity 
 has entered the output buffer, it selects the next activity to route to 
 based on the rule defined in the routing connection(s).</p>
        <p>Once the next activity is selected for routing, the entity must wait 
 until capacity is available at that destination activity (or its input buffer) before 
 it can route (an Attach routing doesn't require capacity at the next location, 
 but it does require a base entity to be present at the next activity for 
 it to attach to). Once capacity is available, the entity captures any resource 
 required for making the move, executes any logic defined for the routing, 
 and then initiates the move to the next activity. After it travels for 
 the specified move time, it enters into the next activity or, if defined, 
 into the input buffer for the next activity.</p>
        <!-- InstanceEndEditable -->
    </body>
    <!-- InstanceEnd -->
</html>