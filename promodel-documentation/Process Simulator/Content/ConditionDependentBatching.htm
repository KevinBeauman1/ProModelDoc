<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="2495" MadCap:lastWidth="1178">
    <head>
    </head>
    <body>
        <h3>Condition Dependent Batching</h3>
        <p class="p">Consolidate Entities into a Batch that have accumulated only until a condition becomes true (e.g., until a resource is available or until a truck has arrived).</p>
        <p class="p">&#160;</p>
        <p class="p">The model used for this example, as well as all of the modeling "how-to" examples,  can be found in the ProModel Solutions Café (<a href="http://www.promodel.com/solutionscafe/howto/">http://www.promodel.com/solutionscafe/howto/)</a>. <a href="http://www.youtube.com/watch?v=DWvxPeQVFp8&amp;list=UUjdNEjUGmpb-U5ifC2eBJEg&amp;index=18&amp;feature=plcp" target="_blank">A video demonstrating this solution can be found here.</a></p>
        <h4>Solution</h4>
        <ol>
            <li class="li_1">Define a global variable representing the condition to be met (e.g. vCondition).</li>
            <li class="li_1">Define another global variable representing the count of entities waiting to be batched (e.g., vCount).</li>
            <li class="li_1">Define another global variable representing the quantity of entities that will finally be batched (e.g., vBatchQty)</li>
            <li class="li_1">Define an Inventory Buffer equal to the largest permissible batch size plus any extra waiting entities.</li>
            <li class="li_1">INCrement the vCount variable in the Inventory logic.</li>
            <li class="li_1">DECrement the vCount variable on the route exiting the Inventory so you always have an accurate count of entities in the Inventory.</li>
            <li class="li_1">In the batching activity, click on the Batching button and select Batch.</li>
            <li class="li_1">For the batch size, enter the name of the variable representing the batch quantity (e.g. vBatchQty).</li>
            <li class="li_1">Create a trigger entity/activity combination with a single 1 time periodic arrival (1 entity entering a single activity not connected to any other activities in the model).</li>
            <li class="li_1">Click on the Logic button in the trigger activity properties dialog.</li>
            <li class="li_1">In the Logic Builder, define the following:</li>
        </ol>
        <p class="p_level1">While (Clock(min) &gt;= 0) Do</p>
        <p class="p_level1">{</p>
        <p class="p_level2">Wait Until (vCondition = 1)</p>
        <p class="p_level2">If (vCount &lt; 10)</p>
        <p class="p_level2">{</p>
        <p class="p_level3">Wait Until vCount &gt;= 10</p>
        <p class="p_level2">}</p>
        <p class="p_level2">If (vCount &gt;= 10 And vCount &lt;= 20)</p>
        <p class="p_level2">{</p>
        <p class="p_level3">vBatchQty = vCount</p>
        <p class="p_level3">Send vBatchQty Work Unit To Oven</p>
        <p class="p_level2">}</p>
        <p class="p_level2">Else</p>
        <p class="p_level2">{</p>
        <p class="p_level3">vBatchQty = 20</p>
        <p class="p_level3">Send 20 Work Unit To Oven</p>
        <p class="p_level2">}</p>
        <p class="p_level2">vCondition = 0</p>
        <p class="p_level1">}</p>
        <h5>Example</h5>
        <p class="p">At least 10, but no more than 20 completed parts are accumulated in a Buffer and then placed as a batch in an Oven for heat treatment whenever the Oven has completed a previous batch.</p>
        <p class="p">
            <img src="Resources/Images/conditionbatchingexample1.png" MadCap:mediastyle="@media print { max-width: 4in; }" style="border-left-style: solid;border-left-width: 1px;border-left-color: #1e90ff;border-right-style: solid;border-right-width: 1px;border-right-color: #1e90ff;border-top-style: solid;border-top-width: 1px;border-top-color: #1e90ff;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #1e90ff;" />
        </p>
        <h4>Solution</h4>
        <p class="p">Batch Trigger logic is shown below.</p>
        <p class="p">
            <img src="Resources/Images/conditionbatchingsolution1.png" MadCap:mediastyle="@media print { max-width: 4in; }" style="border-left-style: solid;border-left-width: 1px;border-left-color: #1e90ff;border-right-style: solid;border-right-width: 1px;border-right-color: #1e90ff;border-top-style: solid;border-top-width: 1px;border-top-color: #1e90ff;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #1e90ff;" />
        </p>
        <p class="p">Exit route logic is shown below.</p>
        <p>
            <img src="Resources/Images/conditionbatchingsolution2.png" MadCap:mediastyle="@media print { max-width: 4in; }" style="border-left-style: solid;border-left-width: 1px;border-left-color: #1e90ff;border-right-style: solid;border-right-width: 1px;border-right-color: #1e90ff;border-top-style: solid;border-top-width: 1px;border-top-color: #1e90ff;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #1e90ff;" />
        </p>
        <p class="p">Notice that in the logic for the routing dialog going out of the Oven, the vCondition variable is set to 1 indicating that the oven is now ready and available for the next batch of parts. Be sure to set the initial value of vCondition to 1 so that the first batch of 10 will be allowed to move to the Oven.</p>
    </body>
</html>