<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="1525" MadCap:lastWidth="1447">
    <head>
    </head>
    <body>
        <h3><a name="C-06_1157716610_1085295"></a>Example of Attributes in Logic<MadCap:keyword term="Attributes:example" /></h3>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">A Clinical model contains a location where different patients are given X-ray and Lab requests and sent to either radiology or the lab, respectively, for testing. If a type 1 patient arrives at the location, he or she must be joined with an X-ray request. If the patient is a type 2, he or she is given a Lab request. The entities, Xray_Rqst and Lab_Rqst are waiting at a queue to be joined to the Patients.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">Obviously, one way to model the different types of patients is to use two different patient types. This example shows how to achieve the same effect using a single entity type (patient) with an attribute designating whether it is Type 1 or Type 2.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">An attribute called “type,” defined in the attribute edit table, allows the location to tell what type of patient has arrived there. We will use a value of 1 to represent a patient needing an X-ray, and a value of 2 to represent a patient needing lab work. When the first type enters the system, we assign a value of 1 to the attribute TYPE with the statement TYPE=1. When the second type enters the system, we set its type to 2.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">At the location, we use the following logic:</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">An appliance manufacturer’s model contains an assembly location to join lids to pots.  The pots are either aluminum or steel and both types of pots arrive at the same assembly location.  If an aluminum pot arrives at the assembly location, it must be joined with an aluminum lid.  The same is true for a steel pot and lid.  The entities, steel_lids and alum_lids, are waiting at a queue to be joined to the pots.  </p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">Obviously, one way to model the different pot types is to use two different entity types.  This example shows how to achieve the same effect using a single entity type (pot) with an attribute designating whether it is steel or aluminum.  </p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">An attribute called “type,” defined in the attribute edit table, allows the location to tell what type of pot has arrived at the assembly location. We will use a value of 1 to represent a steel pot and a value of 2 to represent an aluminum pot. When a steel pot enters the system, we assign a value of 1 to the attribute TYPE with the statement TYPE=1. When an aluminum pot enters the system, we set its type to 2.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">At the assembly location, we use the following logic:</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">Customers arrive at the lobby of a local bank branch office for one of three types of service: 91% need to see a Teller for standard deposits and withdrawals, 5% wish to open or close an account with a Service Agent, and 4% wish to apply for a loan with a Loan Officer.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">Instead of modeling this situation with three separate entity types, an attribute is attached to each Customer entity to represent the type of service needed.  The attribute, TYPE, is assigned a value of 1, 2, or 3 based on the value returned from a discrete, user-defined distribution, Dist1.</p>
        <p class="Graphic" MadCap:conditions="PM-MM Conditionals.ServiceModel">
            <img src="6-1-6.png" MadCap:conditions="PM-MM Conditionals.ServiceModel" MadCap:mediastyle="@media print { max-width: 2in; }">
            </img>
        </p>
        <p class="Graphic" MadCap:conditions="PM-MM Conditionals.MedModel">
            <img src="../Resources/Images/MM - Examples of Attributes - Operation logic window.png" MadCap:conditions="PM-MM Conditionals.MedModel" MadCap:mediastyle="@media print { max-width: 3in;max-height: auto; }" style="max-height: auto;max-width: 4.00in;">
            </img>
        </p>
        <p class="Graphic" MadCap:conditions="PM-MM Conditionals.ProModel">
            <img src="../Resources/Images/PM - Examples of Attributes - Operation logic window.png" MadCap:conditions="PM-MM Conditionals.ProModel" MadCap:mediastyle="@media print { max-width: 3in;max-height: auto; }" style="max-height: auto;max-width: 4.00in;">
            </img>
        </p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">This logic selects Route1, Route2, or Route3 based on the value of attribute Type.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">This logic checks the type of patient and then joins a request according to that type.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">This logic checks the type of the pot and then joins a lid according to that type.</p>
    </body>
</html>