<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="490" MadCap:lastWidth="558">
    <head>
    </head>
    <body>
        <h3><a name="C-06_1157716610_1086091"></a>Using Arrays<MadCap:keyword term="Arrays:usage" /></h3>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">Using arrays can simplify a model.  Suppose you are modeling the operations of a fast food restaurant and need to keep track of the consumption of all food items each day.  Assume you will run the model for 30 days.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ServiceModel">An array could be defined with 30 rows (one row for each day) and as many columns as there are food items. Each day, you increment a variable to keep track of the current day (Day = 1–30). Each time a particular food item is ordered, you increment the appropriate cell of the array. For example, if you have 10 food items, and a hamburger is item #3, you would increment cell [1,3] for each hamburger ordered the first day, cell [2,3] for each hamburger ordered the second day, and so on. At the end of the model run you could create a report file listing the number of food items of each type ordered each day.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">Using arrays can simplify a model. Suppose you need to model an appointment system that assigns patients to the first available appointment time with the first available physician. Without an array, it would be a tedious process to keep track of the score of individual possibilities over any extended period of time. Instead, various cells in a one-dimensional array could track the variety of physicians and their respective appointment times for an extended period. </p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.MedModel">For Example, each row in the array could represent an individual physician (e.g., Internist, General Surgeon, etc.) and each column the available appointment periods (e.g., 8:00 am - 8:30 am). Placing the exact appointment time in each cell of the array and then replacing the value with a zero when no appointment was available, would enable the model not only to schedule patients, but obtain their respective appointment times as well. To see how this might be done, see the model, APPOINT.MOD.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">Using arrays can simplify a model.  Suppose you need to model an assembly line that attaches components to a computer motherboard.  Furthermore, you want to track the usage of component parts over time.  Without an array, hundreds of individual entities of various types would have to represent hundreds of individual components.  Keeping track of all the components would be very complex, not to mention all of the join operations and routings for performing the assembly. Instead, various cells in a one-dimensional array could track the number of each type of component used during the simulation.</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">&#160;</p>
        <p class="p" MadCap:conditions="PM-MM Conditionals.ProModel">An array can do the job more efficiently.  The initial inventory level for each component could be stored in an external file and read into the cells of the array at the start of the simulation.  The first cell might contain the inventory level of transistors; the second could contain the inventory level of capacitors and so on.  When a motherboard arrives at the location adding the components, each cell’s value is decremented according to the number of that type of component joined to the motherboard.  If each motherboard requires twelve transistors and five capacitors, then every time a motherboard arrives at the location, the array’s first cell is reduced by twelve and the second cell is reduced by five.  Thus the model becomes much less complex because it requires fewer entities and less logic.</p>
    </body>
</html>