<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="771" MadCap:lastWidth="1204">
    <head>
    </head>
    <body>
        <h3><a name="C-06_1157716610_1086264"></a><a name="C-06_1157716610_22968"></a>Subroutine Editor<MadCap:keyword term="Subroutines:edit:table" /></h3>
        <p class="p">The Subroutines edit table consists of several fields which identify the components of a subroutine.  Each of these fields is described below.</p>
        <p class="Graphic">
            <img src="6-5-2.jpg" MadCap:mediastyle="@media print { max-width: 3in; }" style="border-left-style: solid;border-left-width: 1px;border-left-color: #1e90ff;border-right-style: solid;border-right-width: 1px;border-right-color: #1e90ff;border-top-style: solid;border-top-width: 1px;border-top-color: #1e90ff;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #1e90ff;" />
        </p>
        <p class="p"><span class="Bold" style="font-weight: bold;">ID</span>   A name that identifies the subroutine.</p>
        <p class="p"><span class="Bold"><b>Type</b><MadCap:keyword term="Subroutines:type (none, real, integer or interactive)" /></span>   The type of numeric value returned by the subroutine can be Real, Integer, None, or Interactive. Use Real and Integer if the subroutine returns a number and None when no return value is expected, as is often the case in initialization or termination logic. </p>
        <p class="p"><span class="Bold"><b>Parameters</b><MadCap:keyword term="Subroutines:parameters" /></span>   Arguments passed to the subroutine get assigned to local variables called parameters. Items passed to a subroutine as arguments can have different names than the parameters that receive them. Parameters can be real or integer. The first parameter receives the first argument, the second parameter receives the second argument, and so on.</p>
        <p class="p"><span class="Bold"><b>Logic</b><MadCap:keyword term="Subroutines:logic" /></span>   One or more statements to be executed whenever the subroutine is called. Statements in subroutines must be valid in the logic that calls the subroutine. Subroutine logic may contain a <MadCap:keyword term="RETURN" />RETURN statement with a value to be returned from the subroutine. See <MadCap:xref class="lowercase_no_see" href="C-14-Return.htm#C-14_4292047180_1106907" target="" title="" alt="">Return on page 1</MadCap:xref> for the correct syntax and an example of this statement.</p>
        <p class="p_10">Subroutine Editor Notes: 1. 	If the subroutine is of type Integer and the return value is a real number, the return value will be truncated unless the <MadCap:keyword term="ROUND()" />Round() function is used (e.g., RETURN Round(&lt;numeric expression&gt;)). 2. 	If you do not want a stand-alone subroutine referenced in operation logic to be treated as an implicit wait statement, define the subroutine as type None.  3. 	When using the <MadCap:keyword term="ACTIVATE" />Activate statement to call a subroutine, the calling logic continues without waiting for the called subroutine to finish. Therefore, independent subroutines can run in parallel with the logic that called them. 4. 	Independent subroutines called with the Activate statement cannot contain entity-specific or location-specific system functions.</p>
    </body>
</html>