define({"0":{i:0.00105296307399408,u:"../Content/Topics/Intro_Front.htm",a:"Introduction This section will introduce you to the user guide and provide information regarding assumptions this guide makes. You may also find information on support and consulting services.",t:"Introduction"},"1":{i:0.00105296307399408,u:"../Content/Topics/Intro-AbouttheUserGuide.htm",a:"The  MedModelUser Guide is designed as a reference to guide you through the process of building, running, and viewing the results of simulation models. The guide contains detailed information on the use of features and capabilities found within  MedModel  and serves as a compliment to the product ...",t:"About the User Guide"},"2":{i:0.00105296307399408,u:"../Content/Topics/Intro-SymbolsandNotation.htm",a:"To better help you navigate this text, please review the following symbols and conventions. Keyboard The names of keys are displayed in capital letters. For example, ESC refers to the Escape key and CTRL refers to the Control key. Keys are frequently specified in combinations or in a sequence of ...",t:"Symbols and Notation"},"3":{i:0.00105296307399408,u:"../Content/Topics/Intro-ProductSupport.htm",a:"Technical support is available to all licensed  MedModel  users with current maintenance and support agreements. Support representatives are glad to answer specific questions you may have and offer direction in solving specific modeling challenges you encounter.  Technical support Technical support ...",t:"Product Support"},"4":{i:0.00105296307399408,u:"../Content/Topics/Intro-ModelingServices.htm",a:" If you find yourself in need of extra help or specific expertise to complete your simulation project, let us help you. ProModel Corporation Modeling Services will meet all of your needs with fast, accurate results at competitive rates.  Whether simple or complex, partial or complete, ProModel ...",t:"Modeling Services "},"5":{i:0.00105296307399408,u:"../Content/Topics/Intro-ReportingSuggestions.htm",a:"It is our goal to make  MedModel  the ultimate  health-care  simulation tool. To do this, we rely on your input. Please feel free to submit comments and ideas on how we may improve the  MedModel  software and documentation. Send us your comments. MedModel  Product Team ProModel Corporation 705 E ...",t:"Reporting Suggestions"},"6":{i:0.00105296307399408,u:"../Content/Topics/C-01-WelcometoMedModel.htm",a:"MedModel is a powerful Windows-based simulation tool for simulating and analyzing health care systems of all types and sizes. MedModel provides the perfect combination of ease-of-use and complete flexibility and power for modeling nearly any situation, and its realistic animation capabilities makes ...",t:"Welcome to MedModel"},"7":{i:0.00105296307399408,u:"../Content/Topics/C-01-UsingMedModel.htm",a:"MedModel views a health care system as an arrangement of locations, such as clinics or workstations, through which items (or entities) are managed according to some health care process logic. A system may also include paths, such as aisle-ways for movement, as well as supporting resources, such as ...",t:"Using MedModel"},"8":{i:0.00105296307399408,u:"../Content/Topics/C-01-BuildingModels.htm",a:"Models are created by completing the necessary modules selected from the Home tab on the ribbon shown below. Each module consists of various edit tables and dialog boxes used to supply model information. A layout window also appears with graphical tools for placing locations, path networks and other ...",t:"Building Models"},"9":{i:0.00105296307399408,u:"../Content/Topics/C-01-RunningModels.htm",a:"Completed models are run using the Simulate button. Model data is automatically checked for consistency and completeness before each simulation begins. As shown in the dialog below,  MedModel  allows you to specify a run length, warm-up period, number of replications, and other special options ...",t:"Running Models"},"10":{i:0.00105296307399408,u:"../Content/Topics/C-01-CreatingRun-TimeModels.htm",a:"One of the most powerful features in  MedModel  is the ability to create models that may be run by others who do not own the full software. ProModel allows you to install the software on any machine to run a model. However, without the security key, the user has limited ability to build or make ...",t:"Creating Run-Time Models"},"11":{i:0.00105296307399408,u:"../Content/Topics/C-01-TraceWindow.htm",a:"Trace Window Several tools are available to help you verify and validate your models. During model execution you may trace the activity of the simulation events to see exactly what is happening in the model. The example below shows a brief portion of a trace window.",t:"Trace Window"},"12":{i:0.00105296307399408,u:"../Content/Topics/C-01-LocationInformationWindows.htm",a:"In addition to trace files, you may track the activity at any location through a Location Information window. This feature gives up-to-the-minute information about a selected location, such as current contents, total entries, and operational state (i.e., idle, blocked, or in operation).",t:"Location Information Windows"},"13":{i:0.00105296307399408,u:"../Content/Topics/C-01-ViewingOutput.htm",a:"The output generator gathers statistics on each location, entity, resource, path network, and variable in the system. You may, however, turn off reporting capability for any element you do not wish to include. The default level of statistics is at the summary level (i.e., average values, % values, ...",t:"Viewing Output"},"14":{i:0.00105296307399408,u:"../Content/Topics/C-02-InstallationandLicensing.htm",a:"General Setup Information This section describes how to install and license your  MedModel  simulation software. Hardware Requirements Minimum \n\t\t\tIntel Pentium 4 - 3.0 GHz / AMD Sempron 2.3 GHz or better 1 GB RAM 2 GB Free Disk Space 64 MB Video Card or Shared RAM Windows 10 Recommended \n\t\t\tIntel ...",t:"Installation and Licensing"},"15":{i:0.00105296307399408,u:"../Content/Topics/C-02-StandardInstallationProcedure.htm",a:"Start Windows. Insert the CD-ROM or download the setup file from the Solutions Cafe.  Run the installation by selecting Install from the CD splash screen or double-clicking on the  MedModel  Professional.exe file. Click OK. If any prerequisite components are needed, the setup will install them for ...",t:"Standard Installation Procedure"},"16":{i:0.00194799402334195,u:"../Content/Topics/C-02-LicensingProModelMedModelServiceModel.htm",a:"Licensing  MedModel Your  MedModel  product must be licensed. If you do not license  MedModel , you will only have access to a limited version of  MedModel  which will not allow model building. If you purchased License, you will log into the software after the installation process. How to license  ...",t:"Licensing MedModel"},"17":{i:0.00105296307399408,u:"../Content/Topics/C-02-CheckingforUpdates.htm",a:"Checking for  MedModel  Updates The Check for \n             MedModel  Update allows you to downloads any available update, and then installs the update. In order to have access to updates, you will need current Maintenance and Support agreement or subscription. If you have questions regarding your ...",t:"Checking for MedModel Updates"},"18":{i:0.00105296307399408,u:"../Content/Topics/C-02-License Check Out.htm",a:"Optionally there are times that you may need to disconnect from the internet. ProModel\u0027s licensing now allows for you to Check Out a license to go off line. To go off line: 1. Go to File \u003e About. 2. Select Checkout in the About screen. 3. The Check Out Window will open allowing you to check your ...",t:"License Check Out"},"19":{i:0.00105296307399408,u:"../Content/Topics/C-02-SoftwareLicenseKeyFAQ.htm",a:"I need to move my software license to another computer, can I do this? Yes. If the software is installed on that machine, then go ahead and log in. You must be logged out of the previous machine though. I want to upgrade my computer’s operating system, or make a major change to my computer’s ...",t:"Software License Key FAQ"},"20":{i:0.00105296307399408,u:"../Content/Topics/C-03-PlanningtheModel.htm",a:"Simulation Steps Introduction Doing simulation requires more than just knowing how to use a simulation product. A simulation study is, by its very nature, a project. Like any project, there are tasks to be completed and resources required to complete them. To be successful, a simulation project ...",t:"Planning the Model"},"21":{i:0.00105296307399408,u:"../Content/Topics/C-03-GeneralProcedure.htm",a:"A decision to do a simulation usually results from a perception that simulation can help resolve one or more issues associated with the design of a new system or the modification of an existing system. Before launching into a simulation project, one or more individuals should have been assigned to ...",t:"General Procedure"},"22":{i:0.00105296307399408,u:"../Content/Topics/C-03-Step1PlanningtheStudy.htm",a:"Many simulation projects are doomed to failure from the outset due to poor planning. Undefined objectives, unrealistic expectations and a general lack of understanding of requirements frequently result in frustration and disappointment. If a simulation project is to be successful, a plan must be ...",t:"Step 1: Planning the Study"},"23":{i:0.00105296307399408,u:"../Content/Topics/C-03-Step2DefiningtheSystem.htm",a:"Step 2:  Defining the System With clearly defined objectives and a well organized plan for the study, the system that will be simulated can begin to be defined in detail. This can be viewed as the development of a conceptual model on which the simulation model will be based. The process of gathering ...",t:"Step 2: Defining the System"},"24":{i:0.00105296307399408,u:"../Content/Topics/C-03-Step3BuildingtheModel.htm",a:"Step 3:  Building the Model Once sufficient information has been compiled to define the basic system operation, the model building activity can begin. While starting to build a model too early can be a wasted exercise, waiting until all of the information is completely gathered and validated may ...",t:"Step 3: Building the Model"},"25":{i:0.00105296307399408,u:"../Content/Topics/C-03-Step4ConductingExperiments.htm",a:"Step 4:  Conducting Experiments The fourth step in a simulation study is to conduct simulation experiments with the model. Simulation is basically an application of the scientific method. In simulation, one begins with a theory of why certain design rules or management strategies are better than ...",t:"Step 4: Conducting Experiments"},"26":{i:0.00105296307399408,u:"../Content/Topics/C-03-Step5AnalyzingtheOutput.htm",a:"Output analysis deals with drawing inferences about the actual system based on the simulation output. When conducting simulation experiments, extreme caution should be used when interpreting the simulation results. Since the results of a simulation experiment are random (given the probabilistic ...",t:"Step 5: Analyzing the Output"},"27":{i:0.00105296307399408,u:"../Content/Topics/C-03-Step6ReportingtheResults.htm",a:"The last step in the simulation procedure is to make recommendations for improvement in the actual system based on the results of the simulated model. These recommendations should be supported and clearly presented so that an informed decision can be made. Documentation of the data used, the ...",t:"Step 6: Reporting the Results"},"28":{i:0.00105296307399408,u:"../Content/Topics/C-03-PitfallsofSimulation.htm",a:"If the steps that have been outlined are followed, the chances of performing a successful simulation project are very good. Typical reasons why simulation projects fail include the following: Failure to state clear objectives at the outset. Failure to involve individuals affected by outcome. ...",t:"Pitfalls in Simulation"},"29":{i:0.00105296307399408,u:"../Content/Topics/C-03-StepsforSimulationSummary.htm",a:"A simulation project has distinct phases that must be understood and followed in order to be successful. Simulation requires careful planning with realistic goals and expectations. Steps to performing a simulation study include planning the study, defining the system, building the model, conducting ...",t:"Summary"},"30":{i:0.00105296307399408,u:"../Content/Topics/C-03-BuildingaModel.htm",a:"MedModel  gives you the flexibility to create a model in several ways—the easiest is to use the graphical point-and-click approach. To build a model, you should first define any locations in the system. With locations defined, you are ready to create entities (parts, customers, calls, etc.) and ...",t:"Building a Model"},"31":{i:0.00105296307399408,u:"../Content/Topics/C-03-ModelingScenario.htm",a:"Before we actually begin building a model, let\u0027s look at a fictitious scenario for our model building session. A local hospital has a small Urology Clinic that sees patients with appointments throughout the day.  The clinic consists of a physician, a nurse-clinician, a treatment room, doctor’s ...",t:"Modeling Scenario"},"32":{i:0.00105296307399408,u:"../Content/Topics/C-03-PhasedModelingApproach.htm",a:"Instead of trying to build a model all at once, you may want to implement a phased modeling approach where you build the model in stages. This will help you understand the basic modeling elements before moving on to more complex ones like attributes and If-Then logic. The following elements are ...",t:"Phased Modeling Approach"},"33":{i:0.00105296307399408,u:"../Content/Topics/C-03-Phase1BasicModelElements.htm",a:"The first step in building the model is to define the model\u0027s basic elements. \tGeneral Information The General Information dialog box, accessed through the File tab, allows you to name your model and specify default information such as time and distance units. You also specify the name of the ...",t:"Phase 1: Basic Model Elements"},"34":{i:0.00105296307399408,u:"../Content/Topics/C-03-ImportingBackgroundGraphics.htm",a:"Simple background graphics are imported easily by inserting a Picture from the Insert ribbon tab. MedModel also allows you to import complex graphics files such as AutoCAD drawings to use as the background for your simulations. Often, importing a background graphic makes the process of placing ...",t:"Importing a Background Graphic"},"35":{i:0.00105296307399408,u:"../Content/Topics/C-03-DefiningLocations.htm",a:"Locations are defined easily by selecting the desired icon and placing it in the layout window. Each time a location is placed in the layout window, a corresponding record is entered in the Location edit table. This table lists each location along with location parameters such as the capacity, ...",t:"Defining Locations"},"36":{i:0.00105296307399408,u:"../Content/Topics/C-03-DefiningEntities.htm",a:"Defining  Entities Once all locations have been defined, we define entities in a similar way by selecting an icon for each entity type. As we do this, a record is created in the Entity edit table for each entity type. For more information on how to define entities, see  Entities . In this model the ...",t:"Defining Entities"},"37":{i:0.00105296307399408,u:"../Content/Topics/C-03-DefiningArrivals.htm",a:"According to our records, patients arrive every 45 minutes. Therefore, frequency (i.e., time between arrivals) is set to 45. Since the default time unit for the model was set to minutes, this entry will produce arrivals every 45 minutes—exactly. To take a more probabilistic approach, you can create ...",t:"Defining Arrivals"},"38":{i:0.00105296307399408,u:"../Content/Topics/C-03-DefiningProcessLogic.htm",a:"The last step in executing Phase 1 of your model building is to define the processing of entities at each location. MedModel simplifies this task by allowing you to select an entity type and then use the mouse to click on the locations in the order in which they will process the entity. Each time ...",t:"Defining Process Logic"},"39":{i:0.00105296307399408,u:"../Content/Topics/C-03-Phase2AddingResourcesandVariability.htm",a:"In this phase we wish to add a nurse and doctor that provide for the care and movement of patients in the clinic. This is done with Resources and to get them moving in the model, MedModel requires that all dynamic resources travel on a path network. Therefore, we need to define resources and path ...",t:"Phase 2: Adding Resources and Variability"},"40":{i:0.00105296307399408,u:"../Content/Topics/C-03-Phase3AdditionalOperations.htm",a:"Phase 3:  Additional Operations In Phase 3 and beyond in your model building process, you will further add elements that model your actual process and utilize such build constructs such as attributes, user distributions, and downtimes. Attributes allow you to tag your entities with information like ...",t:"Phase 3: Additional Operations"},"41":{i:0.00105296307399408,u:"../Content/Topics/C-03-DefiningAttributes.htm",a:"Defining Attributes The Attributes module allows you to define an Entity Attribute that can be used to tag entities with unique values. For example, if we assign an attribute the value of one, the patient will be considered acute; if two, the patient will be considered chronic.",t:"Defining Attributes"},"42":{i:0.00105296307399408,u:"../Content/Topics/C-03-DefiningaDistribution.htm",a:"Defining  a Distribution One way to model whether a patient is either acute or chronic is to sample from a user-defined distribution. To define the distribution, simply click the mouse on the Table button and fill in the distribution parameters. In this exampe, 60% of the patients will receive the ...",t:"Defining a Distribution"},"43":{i:0.00105296307399408,u:"../Content/Topics/C-03-DefiningLocationDowntimes.htm",a:"Downtimes may be defined in either the Shift Assignments, Locations or Resources module. For this example, the Resource module is employed because the break is unscheduled and no daily shift schedule has been established to represent multiple work days. In the example above, we have defined a ...",t:"Defining Downtimes"},"44":{i:0.00105296307399408,u:"../Content/Topics/C-03-RunningaModel.htm",a:"Running a model is a fun and easy process. Models are compiled automatically at runtime, keeping you apart from any complex compilation process. If your model contains any errors, a detailed message explains the nature of the error and points to the module and line number where the error occurred. ...",t:"Running a Model"},"45":{i:0.00105296307399408,u:"../Content/Topics/C-03-SimulationOptions.htm",a:"When you select Simulation Options from the Home ribbon tab,  MedModel  displays the Simulation Options dialog. This dialog contains several options for controlling the simulation, such as the run length, warm-up period, clock precision, and the name of the output file. You can also set the number ...",t:"Simulation Options"},"46":{i:0.00105296307399408,u:"../Content/Topics/C-03-AnimationScreen.htm",a:"The  MedModel  animation screen has a ribbon of its own, with selections for controlling many simulation parameters (such as run speed). You can also control the animation through  panning,  zooming, and  pausing. The screen above shows the  speed control bar, along with the  clock selection button ...",t:"Animation Screen"},"47":{i:0.00105296307399408,u:"../Content/Topics/C-03-OptionsMenu.htm",a:"View Options The View Options group provides capability for viewing different areas of your model and dynamically displaying performance variable plots.  Zoom, which allows you to zoom in or out to any degree on the animation;  Views, which allows you to quickly and easily access specific areas of ...",t:"View and Trace Options"},"48":{i:0.00105296307399408,u:"../Content/Topics/C-03-InformationMenu.htm",a:"The Information Options group contains selections for obtaining model information during the run. To find out the current value of any variable or the exact data contained in any Array, select Variables or Arrays from the Info group. For up-to-the-minute location information, such as current ...",t:"Information Options"},"49":{i:0.00105296307399408,u:"../Content/Topics/C-03-ViewingModelStatistics.htm",a:"The purpose of any simulation model is to gain a deeper understanding of the system under study.  MedModel \u0027s Output Viewer helps you to see the interactions between various system elements through tabular and graphical representation of system parameters such as resource utilization, throughput ...",t:"Viewing Model Statistics \u0026 Reports"},"50":{i:0.00105296307399408,u:"../Content/Topics/C-04-ModelingEnvironment.htm",a:"The Modeling Environment is everything contained within the  MedModel  window. When you open a model or select New from the File menu, your screen appears with a Ribbon bar across the top of the screen and a Layout window. You will also be given access to the  MedModel  Getting Started Panel. For ...",t:"Modeling Environment"},"51":{i:0.00105296307399408,u:"../Content/Topics/C-04-MenuBar.htm",a:"All of the tools necessary to build and run a model and view the corresponding output are accessed through the ribbon bar. The ribbon bar is located just beneath the  MedModel  title bar and contains the tabs listed on the following page. These ribbon tabs access other items with functionality ...",t:"Ribbon Bar"},"52":{i:0.00105296307399408,u:"../Content/Topics/C-04-AutodeskHome .htm",a:"The ProModel AutoCAD® Edition allows the user to build models within ProModel using Factory Assets and open the assets used in AutoCAD® Architecture or Mechanical 2019, 2020, 2021, and 2022 with the use of Autodesk\u0027s® Factory Design Utilities 2019, 2020, 2021, and 2022. ProModel AutoCAD® Edition ...",t:"AutoCAD®Edition"},"53":{i:0.00150047854866801,u:"../Content/Topics/C-04-AutodeskHomeTab.htm",a:"The Autodesk® Home ribbon tab provides access to most of the modules for developing your model, simulating and creating scenarios, and various other common functions of the program. As you hover your mouse over the buttons in the ribbon, tooltips will appear describing the module as well as showing ...",t:"Autodesk®Edition Home Tab"},"54":{i:0.00105296307399408,u:"../Content/Topics/Add Asssets To Library.htm",a:"In the Autodesk® section of the ProModel Home Ribbon you can select Add Assets To Library. This will allow you to add Autodesk® assets to your model\u0027s graphic library. Selecting Add Assets To Library will open the Add Assets Window where you can select from System, User, User Cloud, and Vault ...",t:"Add Assets To Library"},"55":{i:0.00150047854866801,u:"../Content/Topics/C-04-AutoCAD Plug-in .htm",a:"The ProModel AutoCAD® Edition\u0027s AutoCAD® plug-in is a powerful tool that allows you to give your CAD drawing (DWG file) ProModel simulation properties. The ProModel AutoCAD® Edition Plug-in provides a ribbon tab that provides quick access for developing your model and opening it in ProModel. As you ...",t:"AutoCAD Plug-in"},"56":{i:0.00105296307399408,u:"../Content/Topics/C-04-ACAD Simulation Browser.htm",a:"The ProModel AutoCAD® Edition\u0027s Simulation Browser can be accessed from the ProModel Ribbon within AutoCAD®.  Once open, you will see the below tabs: Locations, Conveyors, Entities, Flows, Resources, and Path Networks. Within each tab, you can add, delete, and reorder. Locations, Conveyors, Flow, ...",t:"Simulation Browser"},"57":{i:0.00120213489888539,u:"../Content/Topics/C-04-FileMenu.htm",a:"The File application menu is the first tab on the ribbon bar and consists of six sections divided by separator lines along with a listing of the most recently loaded models.  Information about the currently loaded model is the first section in the menu. The file management section contains functions ...",t:"File Menu"},"58":{i:0.00314136862247243,u:"../Content/Topics/C-05-GeneralInformation.htm",a:"The  General Information dialog box allows you to specify basic information about a model, such as its name, default time units, default distance units, and graphic library. You also may specify the model\u0027s initialization and termination logic. Finally, a notes window is available for specifying ...",t:"General Information"},"59":{i:0.00828365267707506,u:"../Content/Topics/C-05-GeneralInformationDialogBox.htm",a:"The fields of the General Information dialog box are as follows: Title    An optional, brief description of the model. Information will be displayed in the caption bar and included in the model and results files. Time Units    The unit for any time value in the model that does not have an explicitly ...",t:"General Information Dialog Box"},"60":{i:0.00105296307399408,u:"../Content/Topics/C-04-FileManagement.htm",a:"The File menu provides four functions related to model files such as saving and loading.  Files in the  MedModel  format use the MOD extension.  The following defines each of the selections available from the file management section shown previously. New Closes any currently opened model so a new ...",t:"File Management"},"61":{i:0.00105296307399408,u:"../Content/Topics/C-04-ModelPackaging.htm",a:"The Create Model Package option allows you to copy the current model and its associated files to a specific directory as a single file entitled \u003cmodel name\u003e.PKG. This file includes the model file (*.MOD), the graphic library (unless you check the Exclude Graphic Library option), and any external ...",t:"Model Packaging"},"62":{i:0.00105296307399408,u:"../Content/Topics/C-04-CreatingaModelPackage.htm",a:"How to create a model package: Select Create Model Package from the Package button in the File application menu. Enter the name you wish to use for the model package (by default,  MedModel  uses the name of the current model with a *.pkg extension). You may also use the Browse... button to select ...",t:"C-04-CreatingaModelPackage"},"63":{i:0.00105296307399408,u:"../Content/Topics/C-04-InstallingaModelPackage.htm",a:"How to install a model package: Select Install Model Package from the Package button on the File application menu. \tSelect the model package (*.pkg) from the Install Model Package dialog. in the Destination field, type the name of the directory to which you want to copy the model package. Select OK. ...",t:"C-04-InstallingaModelPackage"},"64":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewPrintModelText.htm",a:"The modular nature of  MedModel  makes it easy to focus on the individual elements of a model. However, it can still be useful to see an entire model with all of the model elements in view at one time.  MedModel  provides two ways to accomplish this. Through the Export Model Text and the Print ...",t:"View/Print Model Text"},"65":{i:0.00105296307399408,u:"../Content/Topics/C-08-Options.htm",a:"The Options section in the File application menu provides access to application level settings in the Options dialog and product version and Serial Number in the About window. The Options dialog contains default settings for folders, edit table record deletion, time between auto-saves, and Logic ...",t:"Options"},"66":{i:0.00194799402334195,u:"../Content/Topics/C-04-ViewMenuLogicWindows.htm",a:"Logic Window Settings\n        Logic Window Font Logic windows are used extensively in  MedModel  for entering logic.  MedModel  allows you to specify the font to be used in these windows.  This feature enables you to select the font, font style, and font size of the text for all logic statements ...",t:"Logic Window Settings\n        "},"67":{i:0.00120213489888539,u:"../Content/Topics/C-04-HomeTab.htm",a:"The Home ribbon tab provides access to most of the modules for developing your model, simulating and creating scenarios, and various other common functions of the program. As you hover your mouse over the buttons in the ribbon, tooltips will appear describing the module as well as showing hotkeys ...",t:"Home Tab"},"68":{i:0.00105296307399408,u:"../Content/Topics/C-08-ExpressionSearch.htm",a:"The Expression Search capability is accessed from the Home ribbon tab and is used to find or replace text entered into logic windows and expression fields, such as location downtime logic or location capacity. Name fields can be found, but not replaced. Reference fields can be found and replaced. ...",t:"Expression Search"},"69":{i:0.00105296307399408,u:"../Content/Topics/C-08-FindExpression.htm",a:"Find Expression allows you to find each occurrence of an expression in a model. How to find an expression: From the Tools menu, select Expression Search. From the Home ribbon tab, select Find (or use the hotkey Ctrl+F). Supply the necessary details in the Find dialog box shown below. Clicking Select ...",t:"Find Expression"},"70":{i:0.00105296307399408,u:"../Content/Topics/C-08-ReplaceExpression.htm",a:"Replace Expression allows you to find each occurrence of an expression in a model and replace that expression with a new expression. How to replace an expression with another expression: From the Home ribbon tab, select Replace (or use the hotkey Ctrl+H). Supply the necessary details in the Replace ...",t:"Replace Expression"},"71":{i:0.00105296307399408,u:"../Content/Topics/C-08-ImportantNotesRegardingExpressionSearches.htm",a:"\tNot every field of every module is included. Fields such as statistics, text in graphics, or yes/no fields which may not be edited cannot be searched for or replaced. To replace record identifiers, see number six.  Under “Modules to Search,” the Other option refers to information entered in places ...",t:"Important Notes Regarding Expression Searches"},"72":{i:0.00105296307399408,u:"../Content/Topics/C-08-LocalFindandReplace.htm",a:"Local Find and Replace In the process of creating logic, you may need to search for specific text. The local find and replace button in the logic window opens a dialog that will allow you to search that logic for specific text.",t:"Local Find and Replace"},"73":{i:0.00209716584823326,u:"../Content/Topics/C-04-InsertTab.htm",a:"The  Insert ribbon tab allows you to insert text, pictures and various shapes into your model layout using the functionality provided in the various ribbon groups. You can also merge models built by co-workers or submodels you have built as common or foundational pieces to any model. Merge  Allows ...",t:"Insert Tab"},"74":{i:0.00373061228095849,u:"../Content/Topics/C-04-ModelMerging.htm",a:"Model merging is a powerful feature that allows large or complex models to be built in smaller segments. A model segment may be as small as a single workstation or as large as an entire department. After all segments are ready, they can be merged together to form a single model. The Merge feature ...",t:"Model Merging"},"75":{i:0.00120213489888539,u:"../Content/Topics/C-04-AnalysisTab.htm",a:"The Analysis ribbon tab provides options for performing various analyses on your model and integrating historical data into your model. You can take data from your actual system you are modeling and fit it to custom or standard statistical distributions, optimize your model given a range of inputs ...",t:"Analysis Tab"},"76":{i:0.00120213489888539,u:"../Content/Topics/C-04-ViewMenu.htm",a:"The View ribbon tab provides options for modifying the model editing environment. These options are defaults, used each time the program is started and are not specific to any particular model. The View tab consists of five groups: Show, Views,  Zoom, Layout and  Docking. The functionality ...",t:"View Tab"},"77":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuGettingStarted.htm",a:"MedModel  provides several ways by which you can easily get started with building a model and with simulation. When the  MedModel  program starts, the Getting Started dialog box immediately appears and provides several options by which you can get information and/or assistance for building or ...",t:"Getting Started"},"78":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuModelInstructions.htm",a:"The Model Instructions window displays background information about a previously constructed model that has been loaded into the  MedModel  program. The information can be helpful in using demonstration models or models created by ProModel\u0027s consultants. If a file containing the background ...",t:"Model Instructions"},"79":{i:0.00105296307399408,u:"../Content/Topics/C-04-Switches.htm",a:"The following selections are available from the Show group of the View ribbon tab. Toggles are options you can check or uncheck to turn on or off. Show Grid  Check this toggle to show the grid in the layout window. Show Layout Coordinates Displays the coordinates of your mouse (when within the ...",t:"Layout Toggles"},"80":{i:0.00307957069707853,u:"../Content/Topics/C-04-ViewMenuView.htm",a:"The Views feature allows you to define, then quickly and easily access specific areas of the model layout. Selecting a view scrolls the layout window and adjusts the zoom so you see a specific region of the layout regardless of the layout window’s size. Once a view is defined, you can select it ...",t:"Views"},"81":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuZoom.htm",a:"Zoom Options\n         Zoom options are accessible during both edit and run time. In edit mode, Zoom is found in the View ribbon tab. The Zoom List dropdown gives several options for zooming including a custom zoom. Zoom to Fit Shrinks or enlarges the contents in the layout window to show the entire ...",t:"Zoom Options\n        "},"82":{i:0.00194799402334195,u:"../Content/Topics/C-04-ViewMenuLayoutSettings.htm",a:"The following selections are available from the Layout group of the View ribbon tab.  The Layout group contains selections for changing the grid characteristics, color of the layout window background, routing arrow colors, and the snap to grid toggle. These, as well as default setting changes, apply ...",t:"Layout Settings"},"83":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuDocking.htm",a:"Docking The Docking group of the View ribbon tab currently only contains one option for controlling the working viewspace of the application. Reset Window Positions Causes all edit tables to return to their default positions and sizes.",t:"Docking"},"84":{i:0.00120213489888539,u:"../Content/Topics/C-08-ToolsTab.htm",a:"The Tools ribbon tab gives you access to powerful tools to help you through the model building process. Calendar Editor Shifts and time off for activities and resources are defined using the Calendar Editor. Graphic Editor Allows you to create, edit, rearrange, or delete library graphics for use as ...",t:"Tools Tab"},"85":{i:0.00105296307399408,u:"../Content/Topics/C-05-CalendarEditor.htm",a:"Shifts and time off for activities and resources are defined using the Calendar Editor. Time off for holidays and vacation is defined in the Calendar tab by simply selecting the specific days to take off. A change in which shift an activity or resource is on can also be defined in the Calendar tab. ...",t:"Calendar Editor"},"86":{i:0.00105296307399408,u:"../Content/Topics/C-05-AddingandEditingTimeOff,WorkandBreakTime.htm",a:"Adding or Editing Time Off \tTo assign time off for an entire day, select Holiday, Vacation, or Other from the toolbar.  \tWith the time off option selected, click on a day in the calendar that you want to assign the time off to or click and drag to assign the time off to multiple days. Or right-click ...",t:"Adding and Editing Time Off, Work and Break Time"},"87":{i:0.00207187060760649,u:"../Content/Topics/C-08-GraphicEditor.htm",a:"The Graphic Editor allows you to create, edit, rearrange, or delete library graphics within a particular graphics library file. You can also copy graphics from one library to another. Graphics from several libraries can even be merged into a single graphic. Each graphics library is saved with the ...",t:"Graphic Editor"},"88":{i:0.00105296307399408,u:"../Content/Topics/C-08-Overview.htm",a:"The Graphic Editor consists of a menu bar, a Graphic Tools button bar, a Graphic Library menu, Library Edit buttons, an Edit window, and a set of icons representing the graphics in the graphics library. Each of the tools in the Graphic Tools button bar is discussed in this section, including the ...",t:"Overview"},"89":{i:0.00105296307399408,u:"../Content/Topics/C-08-FileMenu.htm",a:"New   Creates an empty graphics library. Open  Brings up the Open Library Graphics dialog box for specifying which graphics library file to retrieve. Graphics library files have the file extension GLB. Close   Closes the current graphic library. If the graphics library has been changed since the ...",t:"File Menu"},"90":{i:0.00105296307399408,u:"../Content/Topics/C-08-EditMenu.htm",a:"Use the Edit menu for selecting and duplicating the individual objects comprising a library graphic. You may also use it to exchange graphics with other applications. To use the Edit menu functions, load the graphic you wish to edit by selecting its icon from the library and clicking the Edit ...",t:"Edit Menu"},"91":{i:0.00105296307399408,u:"../Content/Topics/C-08-GraphicsMenu.htm",a:"The Graphics menu is for manipulating one or more objects that comprise a library graphic. With this menu, you can group several objects together, flip and rotate objects, and alter the color, fill pattern and line style of objects. You can also adjust the dimensions of the entire graphic. Flip ...",t:"Graphics Menu"},"92":{i:0.00105296307399408,u:"../Content/Topics/C-08-OptionsMenu.htm",a:"The Options menu controls the editing environment. With this menu you can use a grid to help align objects, edit that grid, and require objects to snap to it. Finally, the Options menu allows you to zoom in and out on the graphic so you can edit the graphic at different sizes. Grid Settings   Brings ...",t:"Options Menu"},"93":{i:0.00105296307399408,u:"../Content/Topics/C-08-WindowMenu.htm",a:"The Window menu is used to manipulate the various windows in the Graphic Editor and follows the Microsoft Windows standard for Window menus. Tile   Causes all open windows to fit in the available screen space. Windows that may be hidden behind other windows will become visible. This is useful when ...",t:"Window Menu"},"94":{i:0.00105296307399408,u:"../Content/Topics/C-08-LibraryEditButtons.htm",a:"The Graphic Editor contains four library edit buttons: Edit, Save, Delete, and Clear. Edit Retrieves a selected graphic from the library to the edit window.  Save  Saves a graphic from the Edit window to the library. For a new graphic to be added to the library, the blank box at the end of the ...",t:"Library Edit Buttons"},"95":{i:0.00105296307399408,u:"../Content/Topics/C-08-ManipulatingGraphics.htm",a:"Among other things, a graphic can be reduced, enlarged, combined, and reordered. How to change  a graphic’s size: Select the graphic in the Edit window using the selector. Choose Group from the Graphics menu. Select one of the small gray boxes at the graphic edge to reduce or enlarge the graphic ...",t:"Manipulating Graphics"},"96":{i:0.00105296307399408,u:"../Content/Topics/C-08-CreateNewGraphicsandLibraries.htm",a:"C reate New Graphics and Libraries How to create a new graphic Select Graphic Editor from the Tools menu. Use the drawing tools to create the new graphic. Click the Save button on the graphic editor. The image appears at the end of the existing icons. How to create a new graphic library Select ...",t:"Create New Graphics and Libraries"},"97":{i:0.00150047854866801,u:"../Content/Topics/C-08-NamingaGraphic.htm",a:"Graphics can be named for resources, locations, and entities, or merely for easier identification. When a named graphic is chosen while building a model, instead of entering a default name, such as Loc1,  MedModel  will enter the graphic\u0027s name, such as Desk. If the name already exists for a ...",t:"Naming a Graphic"},"98":{i:0.00150047854866801,u:"../Content/Topics/C-08-GraphicToolsButtonBar.htm",a:"The Graphic Tools Button Bar contains the tools necessary to create and edit a graphic’s component objects. The drawing tools are the main tools through which graphics are created and edited in the Editing window. The drawing tools include the following: Selector The Selector is a pointing device ...",t:"Graphic Tools Button Bar"},"99":{i:0.00105296307399408,u:"../Content/Topics/C-08-EditingaLibraryGraphic.htm",a:"Various editing functions allow you to alter the objects that comprise a library graphic. These functions may be applied to the entire graphic or to one of the objects from which the graphic is constructed. The following is a description of how to edit a graphic (All mouse actions are performed ...",t:"Editing a Library Graphic"},"100":{i:0.00105296307399408,u:"../Content/Topics/C-04-EditingTable.htm",a:"Edit Tables When creating or modifying records in an edit table such as a Locations or Entities table, you can right-click on any field in any row and bring up a context menu. The context menu has options unique to each field but also has the following common options: The following table briefly ...",t:"Editing"},"101":{i:0.00105296307399408,u:"../Content/Topics/C-04-EditingProcessRecords.htm",a:"Editing  Process Records When editing the records in the Processing edit table, two additional options for copying and pasting entire process and routing records appear in the right-click context menu. The two additional menu items are as follows: Copy Record   Copies all fields of the current ...",t:"Editing Process Records"},"102":{i:0.00105296307399408,u:"../Content/Topics/C-04-EditingNotesWindows.htm",a:"You may annotate individual records of the locations, resources and entities tables through Notes windows. How to annotate a record: Click inside the record to be annotated. Click on the Notes button in the column header. The notes window contains a toolbar with six buttons. There are three edit ...",t:"Editing Notes Windows"},"103":{i:0.00183532488321777,u:"../Content/Topics/C-04-EditingLogicWindows.htm",a:"All multiple-line logic windows, such as the Operation logic window of the Process edit table, include the editing function buttons shown in the following example. These buttons include Cut, Copy, Paste, Undo, Redo, Find, Build, Compile, Print, and Help. Logic windows possess a number of features ...",t:"Editing Logic Windows"},"104":{i:0.00105296307399408,u:"../Content/Topics/C-04-EditingandMovingGraphics.htm",a:"MedModel  allows easy adjustment and fine tuning of the graphics in one window rather than opening individual modules to move each object. This makes it possible to move or rearrange a whole submodel or model after it has been merged. To move any or all graphics in a model,  MedModel  must be in ...",t:"Editing and Moving Graphics"},"105":{i:0.00105296307399408,u:"../Content/Topics/C-04-LayoutWindowNavigationShortcuts.htm",a:"MedModel  allows you to use certain navigation shortcuts within the layout window by using specific keyboard shortcuts and mouse buttons. The following keyboard shortcuts and mouse motions will facilitate navigation around, and viewing of, the layout window. CRTL+SHIFT while rolling the mouse wheel ...",t:"Layout Window Navigation Shortcuts"},"106":{i:0.00105296307399408,u:"../Content/Topics/C-05-BuildingtheModelGeneral.htm",a:"Home Ribbon Tab The Home ribbon tab is the gateway to all modeling elements used to define a model. Through this menu you specify the locations,  entity types,  arrival rates,  resources,  path networks,  downtimes,  processing logic,  variables,  attributes,  arrays,  macros, and  subroutines that ...",t:"Building the Model: General Elements"},"107":{i:0.00373805592203768,u:"../Content/Topics/C-05-Locations.htm",a:"Locations  represent places in the system where entities are routed for processing, storage, or some other activity or decision making. Locations should be used to model elements such as delivery locations, warehouse locations, network servers, and transaction processing centers. Every location has ...",t:"Locations"},"108":{i:0.00105296307399408,u:"../Content/Topics/C-05-LocationsEditor.htm",a:"The Locations Editor consists of three main windows: the Location Graphics window in the lower left portion of the screen, the Locations edit table along the top of the screen, and the Layout window in the lower-right portion of the screen. These windows can be moved, docked and resized using the ...",t:"Locations Editor"},"109":{i:0.00118058833212063,u:"../Content/Topics/C-05-LocationEditTable.htm",a:"A location\u0027s characteristics can be modified with the Location edit table. The Location edit table contains fields for displaying the graphic icon, specifying the location name, and defining other characteristics of each location. Each of these fields is explained below. You can edit the desired ...",t:"Location Edit Table"},"110":{i:0.00105296307399408,u:"../Content/Topics/C-05-LocationGraphicsWindow.htm",a:"The Location Graphics window provides a graphical means for creating locations and changing their icons. Icons added to the layout will either represent a new location or be added to an existing location\u0027s icon depending on whether the New box at the top left of the window is checked or unchecked. ...",t:"Location Graphics Window"},"111":{i:0.00105296307399408,u:"../Content/Topics/C-05-LocationGraphics.htm",a:" A location may have any one or more of the following graphics selected from the Location Graphics window.  Counter   A counter representing the current number of entities at a location. The options available with counters are explained next. Gauge    A vertical or horizontal sliding bar showing the ...",t:"Location Graphics "},"112":{i:0.00105296307399408,u:"../Content/Topics/C-05-CapacitiesandUnits.htm",a:"Capacities A location capacity is the maximum number of entities it can hold at any one time. In general, multi-capacity locations are used to model locations such as queues, waiting areas, or any other type of location where multiple entities may be held or processed concurrently. Consider the ...",t:"Capacities and Units"},"113":{i:0.00264424154509859,u:"../Content/Topics/C-05-LocationDowntimes.htm",a:"A downtime stops a location or resource from operating. A down resource or location no longer functions and is not available for use. Downtimes may represent scheduled interruptions such as shifts, breaks, or scheduled maintenance. Or, they may represent unscheduled, random interruptions such as ...",t:"Location Downtimes"},"114":{i:0.00105296307399408,u:"../Content/Topics/C-05-ClockDowntimeEditor.htm",a:"Clock downtimes are used to model downtimes that occur depending on the elapsed simulation time, such as when a downtime occurs every few hours, no matter how many entities a location has processed. The Clock Downtime Editor consists of the edit table shown below. To access the Clock Downtime ...",t:"Clock Downtime Editor"},"115":{i:0.00105296307399408,u:"../Content/Topics/C-05-EntryDowntimeEditor.htm",a:"Entry downtimes are used to model downtimes when a location needs to be serviced after processing a certain number of entities. For example, if a printer needs a new cartridge after printing 2000 shipping orders, an entry downtime should be defined. The downtime occurs after the entity that ...",t:"Entry Downtime Editor"},"116":{i:0.00105296307399408,u:"../Content/Topics/C-05-UsageDowntimeEditor.htm",a:"Usage downtimes are used to model downtimes that occur after a location has been operating for a certain amount of time, such as if a machine fails due to wear after so many hours of operation. Usage downtimes are different from clock downtimes because usage downtimes are based on location operation ...",t:"Usage Downtime Editor"},"117":{i:0.00105296307399408,u:"../Content/Topics/C-05-SetupDowntimeEditor.htm",a:"Setup downtimes should be used to model situations where a location can process different types of entities, but needs to be setup to do so. Setup downtimes will not overlap but will preempt other downtimes in a manner similar to that of an entity. Setup downtimes are only available for single ...",t:"Setup Downtime Editor"},"118":{i:0.00234914596703361,u:"../Content/Topics/C-05-CalledDowntimeEditor.htm",a:"Called downtimes are used in conjunction with the Down statement to make a location go down. When the name of the called downtime is referenced during simulation by the Down statement, the called downtime will execute its logic. Name The name of the called downtime. This is the name that will be ...",t:"Called Downtime Editor"},"119":{i:0.00293464644760096,u:"../Content/Topics/C-05-LocationPrioritiesandPreemption.htm",a:"Priorities determine which entity or downtime uses a location when more than one entity or downtime is contending for it. Priorities may be any value or expression between 0 and 999, with higher values having higher priority. For simple prioritizing, you should use priorities from 0 to 99. ...",t:"Location Priorities and Preemption"},"120":{i:0.00105296307399408,u:"../Content/Topics/C-05-SpecialNotesRegardingLocationDowntimes.htm",a:"When an entity preempts another entity (Example 1), or when an entity preempts a downtime (Example 2), or when a downtime preempts an entity (Example 3), any resources owned by the preempted entity or downtime will be freed temporarily until the preempting entity or downtime finishes at the ...",t:"Special Notes Regarding Location Downtimes"},"121":{i:0.00138746785252034,u:"../Content/Topics/C-05-RulesDialogBox.htm",a:"The Rules dialog box, opened by double-clicking in the Rules field in the Locations edit table, is used to choose the rule for  MedModel  to follow when making the following decisions: Selecting incoming entities Queuing for output Selecting a unit Note: The queuing rules for a location take effect ...",t:"Location Decision Rules Dialog Box"},"122":{i:0.00331796963541781,u:"../Content/Topics/C-05-Entities.htm",a:"Anything that a model processes is called an “Entity.” Documents, people, or phone calls should be modeled as entities. Entities may be grouped, such as when several boxes are stacked on a pallet (through the Group statement); consolidated into a single entity, such as when two or more documents are ...",t:"Entities"},"123":{i:0.00105296307399408,u:"../Content/Topics/C-05-EntitiesEditor.htm",a:"Entity types are created and edited with the Entities Editor. The Entities Editor consists of (1) an edit table to define the name and specifications of each entity type in the system, and (2) the Entity Graphics window for selecting one or more icons to represent each entity. The fields of the edit ...",t:"Entities Editor"},"124":{i:0.00118058833212063,u:"../Content/Topics/C-05-DefiningEntities.htm",a:"Entities are typically defined graphically by clicking on a desired library graphic in the Entity Graphics window. Alternatively, you may define entities by simply entering their names and characteristics in the Entity edit table. Entity graphics are optional. How to define entities graphically : ...",t:"Defining Entities"},"125":{i:0.00105296307399408,u:"../Content/Topics/C-05-EntityGraphicDimensions.htm",a:"An entity has two sets of dimensions, a logical (length and width) dimension, and a graphical (horizontal and vertical) dimension. An entity\u0027s length and width are used to determine the number of entities that can fit on a conveyor, and do not affect the size of the graphic on the screen during a ...",t:"Entity Graphic Dimensions"},"126":{i:0.00150047854866801,u:"../Content/Topics/C-05-DefiningMultipleEntityGraphics.htm",a:"Entity types can be assigned more than one graphic to represent the entity at various stages of production or traveling in different directions. An entity representing a loan application could be assigned three graphics: the first representing the application before a credit check has been received, ...",t:"Defining Multiple Entity Graphics"},"127":{i:0.00127672081133105,u:"../Content/Topics/C-05-PreemptiveEntities.htm",a:"Often during a simulation, it is desirable to have an entity preempt an activity at a location or resource in order to gain access to that location or resource. These situations can be modeled using preemptive priorities. An entity with a high enough priority can take over a location processing an ...",t:"Preemptive Entities"},"128":{i:0.00295150835892072,u:"../Content/Topics/C-05-Arrivals.htm",a:"Any time new entities are introduced into the system, it is called an arrival. An arrival record is defined by specifying the following information: Number of new entities per arrival Frequency of the arrivals Location of the arrival Time of the first arrival Total occurrences of the arrival Any ...",t:"Arrivals"},"129":{i:0.00105296307399408,u:"../Content/Topics/C-05-ArrivalsEditor.htm",a:"The Arrivals Editor consists of three windows that appear on the screen together. The Arrivals edit table contains the specifications of each arrival to the system and appears across the top of the screen. The Tools window contains tools for defining arrivals graphically and appears at the bottom ...",t:"Arrivals Editor"},"130":{i:0.00118058833212063,u:"../Content/Topics/C-05-ArrivalsEditTable.htm",a:"The Arrivals edit table lists all scheduled entity arrivals to the system. The various fields are explained next. Entity   The name of the arriving entity. Location   The name of the location where the entity is to arrive. Qty each...    The number (1 to 999999) of entities to arrive at each arrival ...",t:"Arrivals Edit Table"},"131":{i:0.00105296307399408,u:"../Content/Topics/C-05-DefiningArrivals.htm",a:"Arrivals may be defined graphically by using the tools in the Tools window, or by manually entering the arrival information directly in the Arrivals edit table. How to define arrivals graphically : Select Arrivals from the Home ribbon tab. Select the desired entity from the Tools window. Click in ...",t:"Defining Arrivals"},"132":{i:0.00194799402334195,u:"../Content/Topics/C-05-IndependentArrivals.htm",a:"An independent arrival is any arrival assigned to occur at a specific time or at a fixed interval. Independent arrivals include such things as appointments, meeting times, or pickup and delivery times. When defining independent arrivals, remember that simulation can model only predefined appointment ...",t:"Independent Arrivals"},"133":{i:0.00105296307399408,u:"../Content/Topics/C-05-ArrivalLogic.htm",a:"Arrival Logic allows you to perform certain logic as an entity enters the system and is used primarily for assigning initial entity attribute values. Suppose you process three different types of samples at  a clinic  and each sample takes either 8, 10, or 12 minutes to test. Fifty percent of the ...",t:"Arrival Logic"},"134":{i:0.0167160046875817,u:"../Content/Topics/C-05-Processing.htm",a:"Processing defines the routing of entities through the system and the operations that take place at each location they enter. Once entities have entered the system, as defined in the Arrivals table, processing specifies everything that happens to them until they exit the system. Processing is ...",t:"Processing"},"135":{i:0.00118058833212063,u:"../Content/Topics/C-05-UsingtheProcessingEditor.htm",a:"This discussion covers the procedures used to define operations and routings using the Processing Editor. As with most other procedures in  MedModel , they may be performed graphically using the mouse, or manually by typing the information directly in the edit tables. Before you begin to specify the ...",t:"Using the Processing Editor"},"136":{i:0.00105296307399408,u:"../Content/Topics/C-05-DefiningEntityProcessing.htm",a:"How to define entity processing graphically : Select an entity from the entity list in the Tools window. The selected entity will appear in the edit field at the top of the list—this entity will come into the location, it is not the entity that results from the process. Select the desired editing ...",t:"Defining Entity Processing"},"137":{i:0.00105296307399408,u:"../Content/Topics/C-05-ProcessingEditor.htm",a:"The Processing Editor consists of four windows that appear simultaneously, as shown in the following diagram. Although the windows are shown in their default arrangement, you may arrange them as desired. Process Edit Table   Appears in the upper left corner of the workspace and defines the ...",t:"Processing Editor"},"138":{i:0.00105296307399408,u:"../Content/Topics/C-05-ProcessEditTable.htm",a:"The Process edit table is used to create operation logic for each entity type at each location in the system. Processes for entities at locations may be in any order in the edit table, but for the sake of organization you should group them by entity type or location. The only time the order of ...",t:"Process Edit Table"},"139":{i:0.00372497402203732,u:"../Content/Topics/C-05-RoutingEditTable.htm",a:"The Routing edit table defines the outputs for each process record defined in the Process edit table. The Routing edit table is really just a sub-table to the Process edit table (i.e., all routings that appear in the routing edit table apply to the currently highlighted process), though the two ...",t:"Routing Edit Table"},"140":{i:0.00105296307399408,u:"../Content/Topics/C-05-RoutingRuleDialogBox.htm",a:"The Routing Rule dialog box provides methods for selecting an entity\u0027s destination after finishing a process. The Rule heading button in the Routing edit table, brings up the Routing Rule dialog box. The fields of this dialog box are defined in the following example. Start new block Check this box ...",t:"Routing Rule Dialog Box"},"141":{i:0.007017631163518,u:"../Content/Topics/C-05-RoutingMoveLogic.htm",a:"The Move Logic window allows you to define the method of movement as well as any other logic to be executed prior to or after the move actually takes place. Once the route condition or rule has been satisfied for allowing an entity to route to a particular location, the move logic is immediately ...",t:"Routing Move Logic"},"142":{i:0.00105296307399408,u:"../Content/Topics/C-05-ProcessingTools.htm",a:"The Tools window provides graphical aids that may be used to define processing records and routing records. It is also used to define the graphical paths that entities follow when moving without a path network between locations. The Tools window, which appears along with the other Processing ...",t:"Processing Tools"},"143":{i:0.00709665469828645,u:"../Content/Topics/C-05-Resources.htm",a:"A resource is a person, piece of equipment, or some other device used for one or more of the following functions: transporting entities, assisting in performing operations on entities at locations, performing maintenance on locations, or performing maintenance on other resources. Resources consist ...",t:"Resources"},"144":{i:0.00105296307399408,u:"../Content/Topics/C-05-TypicalUseofResources.htm",a:"The diagram below shows the resource, wheelchairs. Wheelchairs pushed by LVN’s are used to transport patients from the Nursing Unit to any of the Or or X-ray locations. The Wheelchairs are dynamic resources and travel along the path network shown in the model layout.  The remainder of this section ...",t:"Typical Use of Resources"},"145":{i:0.00105296307399408,u:"../Content/Topics/C-05-ResourcesEditor.htm",a:"The Resources Editor consists of the Resources edit table and the Resource Graphics window. These windows are used together to specify the characteristics of a resource. Resources edit table  Appears along the top of the workspace with fields for specifying the name of each resource, the number of ...",t:"Resources Editor"},"146":{i:0.00105296307399408,u:"../Content/Topics/C-05-ResourcesEditTable.htm",a:"The Resources edit table defines the characteristics of each resource in the system. The fields of this table are defined below. Icon   The icon selected for this resource. Icons are selected using the Resource Graphics Window. If more than one icon is selected for the resource, the first icon is ...",t:"Resources Edit Table"},"147":{i:0.00105296307399408,u:"../Content/Topics/C-05-ResourceGraphicsWindow.htm",a:"The Resource Graphics Window appears when the Resources module is opened and is used to assign graphic symbols to resources.  If the New box is checked in the window, selecting a graphic creates a new resource. Multiple graphics are defined for a given resource by selecting the desired resource and ...",t:"Resource Graphics Window"},"148":{i:0.00118058833212063,u:"../Content/Topics/C-05-StaticResources.htm",a:"Static resources are resources not assigned to a path network and therefore do not visibly move. A static resource may be needed to perform an operation at only one location, such as an inspection operator, and will appear during the entire simulation in the same place it was defined graphically. ...",t:"Static Resources"},"149":{i:0.00118058833212063,u:"../Content/Topics/C-05-DynamicResources.htm",a:"Dynamic resources are resources that move along an assigned path network and may transport entities between locations as a forklift would. They may also need to process entities at several locations, such as an operator performing tasks at more than one location. For these reasons, it is usually ...",t:"Dynamic Resources"},"150":{i:0.00105296307399408,u:"../Content/Topics/C-05-MultipleResourceGraphics.htm",a:"MedModel  allows you to define several different graphic icons for the same resource. For example, you may wish to change the color of a resource whenever it becomes unavailable due to an unscheduled downtime. Resource graphics for dynamic resources may be changed during a simulation by using the  ...",t:"Multiple Resource Graphics"},"151":{i:0.00105296307399408,u:"../Content/Topics/C-05-MultipleUnitResourcesvsMultipleSingleUnitResources.htm",a:"Multi-Unit Resources When a resource is defined as having more than one unit, each resource unit is given a numeric suffix by which it is identified in the output report. For example, a resource (Res1) which has five units will display output statistics for resources called Res1.1, Res1.2, . . . . ...",t:"Multi-Unit Resources vs. Multiple Single-Unit Resources"},"152":{i:0.00150047854866801,u:"../Content/Topics/C-05-ResourceDowntimes.htm",a:"Resource downtimes refer to the times when a resource is unavailable due to scheduled events like breaks and shift changes, or unscheduled events like illness and random failures. For scheduled events, it is much easier and more straightforward to define these downtimes using the Shift Editor (see  ...",t:"Resource Downtimes"},"153":{i:0.00105296307399408,u:"../Content/Topics/C-05-Clock-BasedDowntime.htm",a:"Clock-based downtimes for resources are specified through the Clock Downtimes edit table shown below. The fields of this table are defined as follows: Frequency The time between downtimes. This may be a constant time as shown above, a distribution, or an expression. First Time The time of the first ...",t:"Clock-Based Downtime"},"154":{i:0.00105296307399408,u:"../Content/Topics/C-05-Usage-BasedDowntime.htm",a:"A usage-based downtime is a downtime based on how long a resources has been used, such as  how often a piece of equipment needs maintenance . Usage-based downtimes for resources are specified through the Usage Downtimes edit table shown below. Actual time in use includes any time that a resource is ...",t:"Usage-Based Downtime"},"155":{i:0.00105296307399408,u:"../Content/Topics/C-05-ResourcePrioritiesandPreemption.htm",a:"Priorities for resource requests may be assigned through a  Get,  Jointly Get, or  Use statement in operation logic, downtime logic, or move logic (or the subroutines called from these logics). Priorities for resource downtimes are assigned in the Priority field of the Clock and Usage downtime edit ...",t:"Resource Priorities and Preemption"},"156":{i:0.00127672081133105,u:"../Content/Topics/C-05-ResourceShiftDowntimePriorities.htm",a:"In  MedModel , you define the shift downtime priorities in the Shift Assignments module. The priority for a resource to start a shift downtime and the priority required for some other task to preempt the downtime must be set in the Shift Assignments module. Although a resource may be in use during a ...",t:"Resource Shift Downtime Priorities"},"157":{i:0.00105296307399408,u:"../Content/Topics/C-05-ResourceShiftCarryover.htm",a:"When a resource is preempted to go off shift, rather than requiring the exact unit of that resource to return and complete the work, the entity will make a request for another unit of the resource to continue the work. This allows, for example, another unit assigned to a second shift to take over ...",t:"Resource Shift Carryover"},"158":{i:0.00105296307399408,u:"../Content/Topics/C-05-ResourcePreemptionMatrix.htm",a:"The following Preemption Matrix shows the possibilities of entities and downtimes preempting each other in the use of a resource. “Current” refers to the entity or downtime in possession of the resource when the requesting entity or downtime attempts to capture it. Downtimes below refer to clock and ...",t:"Resource Preemption Matrix"},"159":{i:0.00150047854866801,u:"../Content/Topics/C-05-ResourceSpecificationsDialogBox.htm",a:"The Specifications dialog box contains information for defining the operating characteristics of each resource in the system. Many of the items pertain only to dynamic resources (i.e., resources with path networks). If the resource is static (i.e., not assigned to a path network) many of the options ...",t:"Resource Specifications Dialog Box"},"160":{i:0.00194799402334195,u:"../Content/Topics/C-05-ResourceSearchRoutines.htm",a:"Search routines refer to the instructions a dynamic resource will follow after being freed at a path node where a search routine was defined. Two types of search routines may be specified. Work Search   A list of locations where entities may be waiting for the resource. Work searches may be either ...",t:"Resource Search Routines"},"161":{i:0.00105296307399408,u:"../Content/Topics/C-05-WorkSearchEditTable.htm",a:"Work searches are defined for dynamic resources through the Work Search edit table shown below. If several resources share the same path network, each resource must have its own work search defined (i.e., resources cannot share work searches). \n/         The fields of the Work Search edit table are ...",t:"Work Search Edit Table"},"162":{i:0.00105296307399408,u:"../Content/Topics/C-05-ParkSearchEditTable.htm",a:"Park searches are defined for dynamic resources through the Park Search edit table shown next. If several resources share the same path network, each resource must have its own park search defined (i.e., resources cannot share park searches). The fields of the Park Search edit table are defined as ...",t:"Park Search Edit Table"},"163":{i:0.00105296307399408,u:"../Content/Topics/C-05-NodeLogicEditor.htm",a:"The Node Logic edit table is used to define special logic for a dynamic resource to perform upon entering or exiting a node. Node logic may be defined for any dynamic resource at any node. Typical uses of node logic are: Changing a resource graphic using the  Graphic statement Controlling traffic ...",t:"Node Logic Editor"},"164":{i:0.00205647740957286,u:"../Content/Topics/C-05-ResourcePoints.htm",a:"For a static resource, resource points are the layout coordinates of the resource graphics. For dynamic resources, resource points are auxiliary points where multiple resources may appear graphically when in use or parked at a multi-capacity node. When a resource arrives at a node, it will appear on ...",t:"Resource Points"},"165":{i:0.00494636051808476,u:"../Content/Topics/C-05-PathNetworks.htm",a:"When resources are modeled as dynamic resources which travel between locations, they follow path networks. Entities moving by themselves between locations may also move on path networks if referenced in the move logic of the routing. Otherwise, they follow the routing path. Multiple entities and ...",t:"Path Networks"},"166":{i:0.00118058833212063,u:"../Content/Topics/C-05-PathNetworksEditor.htm",a:"The Path Networks Editor consists of an edit table with fields for defining basic information about each network, such as the network name, the type of network (Non-Passing or Passing), and the basis for movement along the network (Speed and Distance or Time). Clicking on the appropriate heading ...",t:"Path Networks Editor"},"167":{i:0.00105296307399408,u:"../Content/Topics/C-05-PathSegmentEditTable.htm",a:"This table is used to define the Path Segments that make up a path network. When specifying travel according to time between nodes, the heading “Distance” changes automatically to “Time.” The following defines the fields of the Path Segment edit table. From The beginning node of the path segment. To ...",t:"Path Segment Edit Table"},"168":{i:0.00105296307399408,u:"../Content/Topics/C-05-AutomaticTimeandDistanceCalculator.htm",a:"The distance between two successive nodes or the time required to traverse a segment between two successive nodes is calculated according to the number of grid units between the nodes and the default time and distance values per grid unit.  MedModel  automatically enters this time or distance in the ...",t:"Automatic Time and Distance Calculation"},"169":{i:0.00105296307399408,u:"../Content/Topics/C-05-InterfacesEditTable.htm",a:"If an entity will be picked up or dropped off at a particular location by a resource, that location must connect to a node through a location-node interface. The Interfaces edit table is used to define location-node interfaces.  The graphic below shows how to set node N1 to interface with location ...",t:"Interfaces Edit Table"},"170":{i:0.00105296307399408,u:"../Content/Topics/C-05-MappingEditTable.htm",a:"If there are multiple paths emanating from one node to another node, the default path selection will be based on the shortest distance for speed \u0026 distance networks, and the least number of nodes for time based networks. These defaults can be overridden by explicitly mapping some destination nodes ...",t:"Mapping Edit Table"},"171":{i:0.00138746785252034,u:"../Content/Topics/C-05-NodesEditTable.htm",a:"The Nodes edit table lists the nodes that make up a path network and is used to limit the number of resources and entities that may occupy a node at any given time. In addition to controlling traffic on a path network, nodes also define where resources interface with locations or where entities ...",t:"Nodes Edit Table"},"172":{i:0.00105296307399408,u:"../Content/Topics/C-05-Pre-translationCheckforPathNetworks.htm",a:"When you run your simulation,  MedModel  will compile your model, check your path networks for errors and automatically calculate shortest distances between nodes. If your model has large, complex path networks, this could cause your model’s compilation time to run quite long. To combat this,  ...",t:"Pre-translation check for Path Networks and Automatic Mapping"},"173":{i:0.00118058833212063,u:"../Content/Topics/C-05-BackgroundGraphics.htm",a:"Background graphics allow you to enhance a model by adding a background to the animation. A background could show a floor-plan of a factory or any item that is not part of a location, entity, or resource. Backgrounds can be created using the tools in the Background Graphics Editor or by importing an ...",t:"Background Graphics"},"174":{i:0.00105296307399408,u:"../Content/Topics/C-05-BackgroundGraphicsEditor.htm",a:"Background Graphics  Editor The Background Graphics Editor allows you to place icons, text and other graphic shapes on the layout behind locations and other system element graphics. The default arrangement of the two windows is shown below. The Library Graphics window, containing all the icons in ...",t:"Background Graphics Editor"},"175":{i:0.00105296307399408,u:"../Content/Topics/C-05-Background Graphic to Scale.htm",a:"Background Graphic  to Scale To acccess the Background Graphic to Scale button, you will navigate to the Insert ribbon which contains tools necessary to create background graphics of various shapes, including the Background Graphic to Scale Button. The Background Graphics to Scale allows you can ...",t:"Background Graphic to Scale"},"176":{i:0.00194799402334195,u:"../Content/Topics/C-06-Attributes.htm",a:"Attributes are place holders similar to variables, but are attached to specific locations and entities and usually contain information about that location or entity. Attributes may contain integers or real numbers. You may also assign model element names (e.g.,  Exam_Rm1 ) to an attribute, which is ...",t:"Attributes"},"177":{i:0.00105296307399408,u:"../Content/Topics/C-06-AttributeTypes.htm",a:"Attributes are classified as follows: Entity Attributes Entity attributes are place holders assigned to an entity and contain numerical information about that entity.  An entity attribute is identified by its name and may be assigned a value or model element name stored as a value.  An entity ...",t:"Attribute Types"},"178":{i:0.00105296307399408,u:"../Content/Topics/C-06-MemoryAllocationforAttributes.htm",a:"Because locations always exist during a simulation, location attributes always use memory.  However, attributes for entities are not created until the first time any of the entity’s attributes are examined or set.  At that time,  MedModel  allocates enough memory for all of the entity’s attributes.  ...",t:"Memory Allocation for Attributes"},"179":{i:0.00105296307399408,u:"../Content/Topics/C-06-Attributesvs.LocalVariables.htm",a:"Attributes are primarily useful where the value of the attribute is assigned in one logic section and evaluated in another logic section or field, perhaps at a different location. If, however, an attribute is assigned a value and evaluated within the same logic section (e.g., an operation logic), it ...",t:"Attributes vs. Local Variables"},"180":{i:0.00105296307399408,u:"../Content/Topics/C-06-CloningAttributes.htm",a:"Whenever one entity initiates the creation of other entities through a  Split As,  Create, or  Order statement, or as the result of specifying multiple outputs in a routing, the attributes of the original entity are automatically copied to each newly created entity. The following examples show two ...",t:"Cloning Attributes"},"181":{i:0.00105296307399408,u:"../Content/Topics/C-06-AttributeEditTable.htm",a:"This edit table is used to define entity and location attributes. ID   The name of the attribute. Type   The type of the attribute, real or integer. Classification   Entity attribute or location attribute. Notes   A general notes field for describing the attribute.  Notes fields contain user ...",t:"Attribute Edit Table"},"182":{i:0.00118058833212063,u:"../Content/Topics/C-06-ExamplesofAttributesinLogic.htm",a:"A Clinical model contains a location where different patients are given X-ray and Lab requests and sent to either radiology or the lab, respectively, for testing. If a type 1 patient arrives at the location, he or she must be joined with an X-ray request. If the patient is a type 2, he or she is ...",t:"Example of Attributes in Logic"},"183":{i:0.00975892518674513,u:"../Content/Topics/C-06-AttributesandtheJOINorLOADPERMStatement.htm",a:"In some cases, one entity joins onto a base entity using the  Join or Load Perm statement.See  Join  for more information. If both the joining and base entities possess attributes before the join occurs, the resulting joined entity will possess the attribute values of the base entity. In other ...",t:"Attributes and the Join or Load Perm Statement"},"184":{i:0.0102410052298148,u:"../Content/Topics/C-06-AttributesandtheGROUPUNGROUPStatement1.htm",a:"Suppose several entities, EntA, EntB, and EntC, are grouped together and called Batch. See  Group  and  Ungroup  for more information. Each of the original entities have attributes with values assigned to them before they are grouped. The Batch is processed for 30 minutes, sent to Loc5 and then ...",t:"Attributes and the Group/Ungroup Statements"},"185":{i:0.0102410052298148,u:"../Content/Topics/C-06-AttributesandtheLOADUNLOADStatement.htm",a:"The  Load statement permenantly or temporarily loads a specified quantity of entities on to a base entity. Temporary loaded entities retain their identity for future unloading through an  Unload statement. See  Load  and  Unload  for more information. When the entities are temporarily loaded onto ...",t:"Attributes and the Load/Unload Statements"},"186":{i:0.007017631163518,u:"../Content/Topics/C-06-AttributesandtheCOMBINEStatement.htm",a:"Consider the example where several entities are combined permanently into a single entity, Box. See  Combine  for more information. The combined entity, Box, assumes the attribute values of the last entity that was combined to the single entity. If three entities, EntA, EntB, and EntC, are combined ...",t:"Attributes and the Combine Statement"},"187":{i:0.0262871229621355,u:"../Content/Topics/C-06-Variables.htm",a:"Variables are of two types: global and local.  Global variables are place holders defined by the user to represent changing numeric values. Local variables are place holders which are available only within the logic that declared them. Variables can contain either Real numbers or Integers, including ...",t:"Variables"},"188":{i:0.00118058833212063,u:"../Content/Topics/C-06-VariableEditTable.htm",a:"This edit table is used to define Variables used globally in the model.  A description of each field is given below. Icon    This field shows “Yes” if an icon for the variable appears on the layout. A variable’s icon looks like a counter and displays the variable’s value. ID   The variable’s name. ...",t:"Variable Edit Table"},"189":{i:0.00105296307399408,u:"../Content/Topics/C-06-VariableLayout.htm",a:"An icon to show a variable’s value during a simulation may be placed anywhere on the layout.  The window below shows the icons for the variables Census and Counter placed in the upper left portion of the screen.  Each icon has been labeled with a background graphic. How to place an icon  for a ...",t:"Variable Layout"},"190":{i:0.00105296307399408,u:"../Content/Topics/C-06-EditingaVariable\u0027sIcon.htm",a:"A variable’s icon can be customized as necessary by simply double clicking on the icon and choosing Edit. A dialog box appears as shown below for specifying the characteristics of the variable icon or counter. How to edit a variable’s icon : Double click on the icon. Click on the Digit Color, Frame, ...",t:"Editing a Variable’s Icon"},"191":{i:0.00304977784739325,u:"../Content/Topics/C-06-LocalVariables.htm",a:"Local variables function as though they were temporary attributes defined in a specific logic section which disappear when the logic section is finished executing.  Local variables are useful for test variables in loops and storing locally used, unique values for each entity at the current location. ...",t:"Local Variables"},"192":{i:0.00232838858402852,u:"../Content/Topics/C-05-ShiftsandBreaks.htm",a:"Shifts and Breaks Weekly shifts and breaks for locations and resources are defined using the Calendar Editor. Shifts and breaks are defined by selecting blocks on a grid divided into days and hours.  How to access shift assignments : Select Shifts from the Miscellaneous group in the Home ribbon.",t:"Shifts and Breaks"},"193":{i:0.00118058833212063,u:"../Content/Topics/C-05-ShiftAssignments.htm",a:"The Shift Assignment module allows you to model everyday, real-life situations involving scheduling and availability issues, and you can easily define logic to control the way your model handles these problems.  If you have an employee that works a split shift, assign two shifts to the resource with ...",t:"Shift Assignments"},"194":{i:0.00105296307399408,u:"../Content/Topics/C-05-AssigningShifts.htm",a:"MedModel  allows you to can select multiple locations and resources and assign them to a shift in one record. Plus, you can: assign a location or resource to multiple shift files with a start time for each shift, define off-shift and break priorities, and create off-shift and break logic. The Shift ...",t:"Assigning Shifts"},"195":{i:0.00105296307399408,u:"../Content/Topics/C-05-ShiftandBreakLogic.htm",a:"Shift and break logic are optional and are defined in four distinct logic windows, each executed in a specific sequence throughout the simulation run. You can define logic to control how resources and locations go off line and what happens once they are off-line. To define shift or break logic, ...",t:"Shift and Break Logic"},"196":{i:0.00105296307399408,u:"../Content/Topics/C-05-FunctionsandStatements.htm",a:"MedModel  uses several functions and statements specifically for shift and break logic:  Skip,  Priority,  DTLeft(),  DTLength(),  ForLocation(), and  ForResource(). Following is a brief description of each. For more details, see  Statements and Functions . Skip If used in pre-logic, it causes the ...",t:"Functions and Statements"},"197":{i:0.00105296307399408,u:"../Content/Topics/C-05-PreemptionstoOff-ShiftorBreakLogic.htm",a:"Preemptions to Off-Shift or Break Logic If off-shift or break logic is defined using Wait or Use statements and happens to get preempted, the logic will resume one statement after the Wait or Use statement where it was preempted.",t:"Preemptions to Off-Shift or Break Logic"},"198":{i:0.00105296307399408,u:"../Content/Topics/C-05-ShiftDowntimePrinciples.htm",a:"Locations Shift Downtime Principles It is important to understand that when a location or resource goes off shift, it is essentially down. We call this type of downtime a shift downtime and it is treated slightly differently from other downtimes. Breaks, which are also part of the shift schedule, ...",t:"Shift Downtime Principles"},"199":{i:0.00284302497268981,u:"../Content/Topics/C-06-BuildingtheModelAdvanced.htm",a:"Building the Model: Advanced Elements The following Advanced Elements are useful in model building: Arrays  Macros Subroutines Arrival Cycles External Files User Defined Distributions Cost Table Functions Streams Tanks Pre-defined Tank Subroutines Materials Handling Systems Modeling Tips",t:"Building the Model: Advanced Elements"},"200":{i:0.00118058833212063,u:"../Content/Topics/C-06-Arrays.htm",a:"An array is a matrix of cells that contain real or integer values. Each cell in an array works much like a variable, and a reference to a cell in an array can be used anywhere a variable can be used. A one-dimensional array may be thought of as a single column of values. A two-dimensional array is ...",t:"Arrays"},"201":{i:0.00105296307399408,u:"../Content/Topics/C-06-ArraysEditTable.htm",a:"The Arrays edit table is used to define Arrays that are used in the model.  The fields of the Arrays edit table are explained on the following page. ID The name of the array. Dimensions The size of each dimension of the array in cells. For example, the dimensions of a one-dimensional array of 100 ...",t:"Arrays Edit Table"},"202":{i:0.00123196926386365,u:"../Content/Topics/C-06-InitializingArrays.htm",a:"By default, all cells in an array are initialized to zero. Initializing cells to some other value should be done in the initialization logic. A  While...Do loop is useful for initializing array cell values. The logic below fills a 3 x 5 array (3 rows and 5 columns) with values from an external, ...",t:"Initializing Arrays"},"203":{i:0.00123196926386365,u:"../Content/Topics/C-06-ImportDataintoArrays.htm",a:"When you import data, from either an external Excel spreadsheet or SQL database, into an array,  MedModel  loads the data from left to right, top to bottom. Although there is no limit to the quantity of values you may use,  MedModel  supports only two-dimensional arrays. Import from an Excel ...",t:"Import Data into Arrays"},"204":{i:0.00241563644457082,u:"../Content/Topics/C-06-ExportArraystoSpreadsheets.htm",a:"The fields in the Array Export File dialog have similar functionality as those for the Array Import File dialog. If you export multiple times to the same spreadsheet,  MedModel  will overwrite the spreadsheet with new data. If you wish to prevent your data from being overwritten, you can make a ...",t:"Export Arrays to Spreadsheets"},"205":{i:0.00105296307399408,u:"../Content/Topics/C-06-UsingArrays.htm",a:"Using arrays can simplify a model. Suppose you need to model an appointment system that assigns patients to the first available appointment time with the first available physician. Without an array, it would be a tedious process to keep track of the score of individual possibilities over any ...",t:"Using Arrays"},"206":{i:0.00105296307399408,u:"../Content/Topics/C-06-NotesonArrays.htm",a:"If a warm-up time is specified, array values are not reset.   Arrays can be nested. For example, if Arr1[2,3] is equal to three, then the statement Arr2[5,Arr1[2,3]] works exactly like the statement Arr2[5,3].   You can examine the value of a cell in an array during a simulation by choosing ...",t:"Notes on Arrays"},"207":{i:0.00278504005585714,u:"../Content/Topics/C-06-AccessingFilesforArraysonSharePoint.htm",a:"You can access files on a SharePoint server for importing data into arrays and exporting data from arrays. If you want to import data from SharePoint into an array click the Import File... column heading or double-click in the associated text box in the Arrays Edit Table. A pop-up menu will appear ...",t:"Accessing Files for Arrays on SharePoint"},"208":{i:0.00356964651549,u:"../Content/Topics/C-06-Macros.htm",a:"A macro is a place holder for an often used expression, set of statements and functions, or any text that might be used in an expression or logic field. A macro can be typed once, and then the macro’s name can be substituted for the text it represents anywhere in the model and as many times as ...",t:"Macros"},"209":{i:0.00118058833212063,u:"../Content/Topics/C-06-MacroEditor.htm",a:"The Macro edit table is used to assign recurring text to a reference name. ID   A name to identify the macro. Text   Any text to be substituted where the macro name is called. This text may be a complete expression, an entire logic block, or even part of a logic block. Options   Allows you to define ...",t:"Macro Editor"},"210":{i:0.00386993364809077,u:"../Content/Topics/C-06-ScenarioParameters.htm",a:"Defining a scenario parameter for a macro allows the user to easily change parameters before the simulation starts. It provides an experimental framework for defining multiple scenarios to be run in a batch. See  Scenarios  for more information. A scenario parameter for a macro allows a macro’s text ...",t:"Scenario Parameters"},"211":{i:0.00105296307399408,u:"../Content/Topics/C-06-ResourceGrouping.htm",a:"Resou rce Grouping Resource grouping allows you to define specific groups of resources rather than define each unit separately. For example, suppose you need a specific technician to perform an operation. If the technician is not available, you may use either another technician or one of two ...",t:"Resource Grouping"},"212":{i:0.0258631287040553,u:"../Content/Topics/C-06-Subroutines.htm",a:"A subroutine is a user-defined command that can be called to perform a block of logic and optionally return a value. Subroutines may have parameters (local variables) that act as variables local to the subroutine and that take on the values of arguments (i.e., numeric expressions) passed to the ...",t:"Subroutines"},"213":{i:0.0116116522414284,u:"../Content/Topics/C-06-SubroutineEditor.htm",a:"The Subroutines edit table consists of several fields which identify the components of a subroutine.  Each of these fields is described below. ID   A name that identifies the subroutine. Type   The type of numeric value returned by the subroutine can be Real, Integer, None, or Interactive. Use Real ...",t:"Subroutine Editor"},"214":{i:0.00105296307399408,u:"../Content/Topics/C-06-SubroutineFormat.htm",a:"A subroutine may be named any unique, valid name.  The general format for calling a subroutine is as follows: SubroutineName(arg1, arg2,....,argn) Subroutine call GetOpTime(3,7) DoInitialization() Subroutine Format Notes: 1. \tIf no arguments are specified, open and closed parentheses are still ...",t:"Subroutine Format"},"215":{i:0.00105296307399408,u:"../Content/Topics/C-06-SubroutineExample.htm",a:"Suppose that you build a Copy Center model and it is necessary to define the processing time at the operator assisted machines as a function of two parameters: Order Quantity and Quality Level. In addition, you would also like to write the processing times at each copy machine to a file called ...",t:"Subroutine Example"},"216":{i:0.007017631163518,u:"../Content/Topics/C-06-ExternalSubroutines.htm",a:"There may be some cases where you need to perform actions  MedModel  is not capable of doing. You may need extended capabilities with more sophisticated commands.  MedModel  allows you to interface with external subroutines located in thirty-two bit Windows DLL files you have created. This feature ...",t:"External Subroutines"},"217":{i:0.00105296307399408,u:"../Content/Topics/C-06-SubroutinesvsMacros.htm",a:"Although subroutines and macros work similarly, they have subtle differences. Any logic may use both macros and subroutines. The main difference is in the way they are used. Only subroutines can be used when you need to pass arguments, get a return value, or activate the independent execution of ...",t:"Subroutines vs. Macros"},"218":{i:0.00105296307399408,u:"../Content/Topics/C-06-ArrivalCycles.htm",a:"An arrival cycle is a pattern of individual arrivals which occurs over a certain time period. Some examples of arrival cycles that exhibit a pattern are the arrival of customers to a store and the arrival of delivery trucks to a truck dock. At the beginning of the day, arrivals may be sparse; but as ...",t:"Arrival Cycles"},"219":{i:0.00105296307399408,u:"../Content/Topics/C-06-ArrivalCyclesEditTable.htm",a:"Arrival cycles are defined by entering the proper data into the Cycle edit table.  The fields of the Cycle edit table are explained below. ID   The cycle name. Qty / %   Select either Percent or Quantity as the basis for the total number of arrivals per cycle occurrence. Cumulative...   Select Yes ...",t:"Arrival Cycles Edit Table"},"220":{i:0.00118058833212063,u:"../Content/Topics/C-06-ArrivalCyclesExample.htm",a:"Suppose we are modeling the operations of a bank (or any service or manufacturing system) and we need to specify a pattern for customer arrivals. From past data, we know that customers arrive throughout the day (9:00 am to 5:00 pm) according to the following approximate percentages. Defining the ...",t:"Arrival Cycles Example"},"221":{i:0.00105296307399408,u:"../Content/Topics/C-06-CumulativeCycleTables.htm",a:"In the previous example, percentages were expressed non cumulatively.  This same data could have been expressed cumulatively as follows: Before\t\tPercent 9:00 am\t0  10:30 am\t10  11:30 am\t25  1:00 pm\t55  4:00 pm\t70  5:00 pm\t100 The data is now expressed cumulatively and could be entered in the cycle ...",t:"Cumulative Cycle Tables"},"222":{i:0.00105296307399408,u:"../Content/Topics/C-06-ArrivalCyclesbyQuantity.htm",a:"The previous example was based on the assumption that a certain percentage of arrivals came within a specified time interval.  An alternate method of specifying an arrival cycle is to specify the number of arrivals to arrive within each time interval. Example 1 Suppose that in the bank example we ...",t:"Arrival Cycles by Quantity"},"223":{i:0.00284302497268981,u:"../Content/Topics/C-06-ExternalFiles.htm",a:"External files may be used during the simulation to read  data into the simulation or write data as output from the simulation. Files can also be used to specify such things as operation times, arrival schedules, shift schedules, and external subroutines. All external files used with a model must be ...",t:"External Files"},"224":{i:0.00118058833212063,u:"../Content/Topics/C-06-ExternalFilesEditor.htm",a:"The External Files Editor consists of an edit table with fields specifying the external files to be used during the simulation.  Each of these fields is defined below. ID   An alias to be used in the model for referencing the file.  Note that this ID does not have to be the same as the file name. ...",t:"External Files Editor"},"225":{i:0.00725356912955109,u:"../Content/Topics/C-06-FileTypes.htm",a:"External files may be defined as one of several types depending upon the purpose of the file. General Read File A General Read file contains numeric values read into a model using a Read statement. Values must be separated by a space, comma, or end of line. Any non-numeric data will be automatically ...",t:"File Types"},"226":{i:0.00310779103377696,u:"../Content/Topics/C-06-AccessingExternalFileswithSharePoint.htm",a:"You can read data from, or write data to, external files on a SharePoint server. If you want to access data from SharePoint click the File Name... column heading or double-click in the associated text box in the External Files Editor. A pop-up menu will appear for specifying either a file stored ...",t:"Accessing External Files with SharePoint"},"227":{i:0.00162820719069844,u:"../Content/Topics/C-06-UserDefinedDistributions.htm",a:"Occasionally, none of  MedModel ’s built-in distributions can adequately represent a data set. In these cases, the user may define a User Distribution to represent the data set. User Distributions specify the parameters of user-defined (empirical), discrete, or continuous probability distributions. ...",t:"User Defined Distributions"},"228":{i:0.00105296307399408,u:"../Content/Topics/C-06-UserDistributionEditTable.htm",a:"A user-defined distribution is a table of empirically gathered data.  User distributions may be either continuous or discrete, and may be cumulative or non-cumulative (more information concerning these options is found later in this section).  The data is entered into the User Distribution edit ...",t:"User Distribution Edit Table"},"229":{i:0.00105296307399408,u:"../Content/Topics/C-06-DiscreteDistributions.htm",a:"Discrete distributions are characterized by a finite set of outcomes, together with the probability of obtaining each outcome.  In the following  example, there are three possible outcomes for the group size: 30% of the time the group size will be 10, 60% of the time the group size will be 20, and ...",t:"Discrete Distributions"},"230":{i:0.00105296307399408,u:"../Content/Topics/C-06-ContinuousDistributions.htm",a:"Continuous distributions are characterized by an infinite number of possible outcomes, together with the probability of observing a range of these outcomes.  In the following  example, there are an infinite number of possible operation times between the values 2.0 minutes and 8.0 minutes.  Twenty ...",t:"Continuous Distributions"},"231":{i:0.0011806917160245,u:"../Content/Topics/C-05-Cost.htm",a:"With  MedModel ’s costing capability, you can make decisions about your system on a cost basis. Costing dialogs allow you to monitor costs associated with Locations, Entities, and Resources during a model run and the General Statistics Report includes Costing statistics, automatically generated at ...",t:"Cost"},"232":{i:0.00105296307399408,u:"../Content/Topics/C-05-CostDialogBox.htm",a:"Use the Cost Dialog box to define costs for Locations, Entities, and Resources. Fields in the Cost Dialog box vary between Object Types and  MedModel  evaluates expressions in these fields only during translation at run time. The General Statistics Report includes statistical information ...",t:"Cost Dialog Box"},"233":{i:0.00105296307399408,u:"../Content/Topics/C-05-BuildingaModelwithCosting.htm",a:"B uilding a Model with Costing When you build a model using the costing feature, you must first define the locations, resources, and entities used in the model. Once you define these model components, you may assign costing information to them through the Cost option in the Build menu. To collect ...",t:"Building a Model with Costing"},"234":{i:0.00105296307399408,u:"../Content/Topics/C-05-PreemptiveDowntime.htm",a:"P reemption/Downtime If you preempt an entity’s resource, an additional cost per use will apply once you re-acquire the resource. While waiting for the resource to return, the entity does not record operation or resource costs.  If an entity preempts another entity, the preempted entity continues to ...",t:"Preemption/Downtime"},"235":{i:0.00105296307399408,u:"../Content/Topics/C-05-JoinLoad.htm",a:"J oin/Load Joined and permanently loaded entities add their costs to their base entities, but not their time statistics. Loaded entities do not add their costs or time statistics to their base entities. When an Unload occurs,  MedModel  divides all costs accrued by a loaded entity among the unloaded ...",t:"Join/Load"},"236":{i:0.00105296307399408,u:"../Content/Topics/C-05-CombineGroup.htm",a:"C ombine/Group Combined entities add their costs to the resultant entity, but not their time statistics. The resultant entity begins with fresh time statistics. Grouped entities do not add their costs or statistics to the group sh ell (a temporary entity representing grouped entities that starts ...",t:"Combine/Group"},"237":{i:0.00105296307399408,u:"../Content/Topics/C-05-SpecialCostHandling.htm",a:"S pecial Cost Handling As soon as you acquire a resource, it begins to accrue cost. Unless obtained in the move logic,  MedModel  charges the “Cost per use” for a resource to the location that obtained it. Resources obtained in the move logic do not charge a “per use” cost to any location. MedModel  ...",t:"Special Cost Handling"},"238":{i:0.00105296307399408,u:"../Content/Topics/C-05-CostingOutputStatistics.htm",a:"MedModel  collects costing statistics only if you uncheck the Disable Cost Statistics option in the Simulation Options menu (see  Enable or Disable Costing ). Included in the General Statistics Report,  MedModel  calculates costing statistics. Locations Operational Cost = (Active Operation Time * ...",t:"Costing Output Statistics"},"239":{i:0.00239550949801588,u:"../Content/Topics/C-05-EnableorDisableCosting.htm",a:"Enable or Disable Costing To enable the costing feature, be sure that the Disable Cost option in the Simulation Options dialog is not checked.",t:"Enable or Disable Costing"},"240":{i:0.0011806917160245,u:"../Content/Topics/C-06-TableFunctions.htm",a:"Table functions provide an easy and convenient way to retrieve a value based on an argument (i.e., some other value) that is passed to the table. Table functions specify a relationship between an independent value and a dependent value. All table functions are defined in the Table Functions editor ...",t:"Table Functions"},"241":{i:0.00105296307399408,u:"../Content/Topics/C-06-TableFunctionsEditor.htm",a:"Table functions are defined by the user and return a dependent (or look-up) value based on the independent (or reference) value passed as the function argument.  Independent values must be entered in ascending order.  If the independent value passed to a table function falls between two independent ...",t:"Table Functions Editor"},"242":{i:0.00105296307399408,u:"../Content/Topics/C-06-TableFunctionEditTable.htm",a:"The Function Table Editor is where all function tables are created and edited.  The fields of the Function Table editor are defined below. ID   The name of the function table. Table...   Click on this heading button to open a table for defining the independent and dependent values of the function. ...",t:"Table Function Edit Table"},"243":{i:0.00328402726141946,u:"../Content/Topics/C-06-Streams.htm",a:"A stream is a sequence of independently cycling, random numbers. Streams are used in conjunction with distributions. Up to 100 streams may be used in a model. A stream generates random numbers between 0 and 1, which in turn are used to sample from selected distributions. By default, all streams use ...",t:"Streams"},"244":{i:0.00105296307399408,u:"../Content/Topics/C-06-StreamsEditTable.htm",a:"The Streams Editor consists of an edit table with three fields.  The fields of the Streams edit table are explained below. Stream # The stream number (1 to 100).  This number identifies each stream. Seed # The seed value (1 to 100). Streams having the same seed value generate the same sequence of ...",t:"Streams Edit Table"},"245":{i:0.00284302497268981,u:"../Content/Topics/C-06-UsingRandomNumberStreams.htm",a:"One of the most valuable characteristics of simulation is the ability to replicate and isolate probabilistic functions and activities within a system for specific study. In the real world, events tend to occur randomly, according to a certain statistical pattern or distribution. To help you model ...",t:"Using Random Number Streams"},"246":{i:0.00105296307399408,u:"../Content/Topics/C-06-StreamExample.htm",a:"The following example shows one reason why multiple streams are useful. Two analyzers, Analyzer_1 and Analyzer_2, are to go down approximately every 4 hours for servicing. To model this, the frequency or time between servicing is defined by a normal distribution with a mean value of 240 minutes and ...",t:"Stream Example"},"247":{i:0.00796494948779604,u:"../Content/Topics/C-05-Tanks.htm",a:"Tanks are simply locations to which  MedModel  associates a level instead of an entity routing. (As a result, the units and rules fields do not apply to tanks.) Using tanks, you can model the continuous flow of liquids and other substances into and out of tanks or similar vessels. Also, when ...",t:"Tanks"},"248":{i:0.00105296307399408,u:"../Content/Topics/C-05-BasicConcepts.htm",a:"Since tanks do not process discrete entities, you may not define routings to or from tanks. To control a tank level,  MedModel  provides predefined subroutines that fill, empty, and transfer tank contents. To monitor tank levels and initiate flows, you must define control subroutines using the ...",t:"Basic Concepts"},"249":{i:0.00105296307399408,u:"../Content/Topics/C-05-TankLogicBuilder.htm",a:"An expanded capability within  MedModel , the tank logic builder provides you with what you need to model complex tank and fluid system operations. The logic builder contains all available tank subroutines and provides you with a description of the components required to use each subroutine.  Please ...",t:"Tank Logic Builder"},"250":{i:0.00105296307399408,u:"../Content/Topics/C-05-Pre-definedTankSubroutines.htm",a:"Pre-defined Tank Subroutines",t:"Pre-defined Tank Subroutines"},"251":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Cap.htm",a:"Ta nk_Cap Syntax samples TANK_CAP (\u003cTank ID\u003e) TANK_CAP (TankA)  Description Returns the capacity defined for the specified tank. Use Tank_Cap when you need to know the defined capacity for a tank. Components \u003cTank ID\u003e The tank name or location index number.",t:"Tank_Cap"},"252":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Dec.htm",a:"Tan k_Dec Syntax samples TANK_DEC (\u003cTank ID\u003e, \u003cQuantity\u003e) TANK_DEC (SupplyTankB, 1000)  Description Instantly decreases the level of a tank by a specified quantity. If the tank has insufficient quantity, it empties as material becomes available.  MedModel  sets the tank state to Tank_Idle if you ...",t:"Tank_Dec"},"253":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_DoOperation.htm",a:"Ta nk_DoOperation Syntax samples TANK_DOOPERATION (\u003cTank ID\u003e, \u003cOperation time\u003e)  TANK_DOOPERATION (TankA, 30)  Description Sets the state of the tank to Tank_Operation and waits for the specified operation time.  MedModel  sets the state to Tank_Blocked after the operation.  Use Tank_DoOperation ...",t:"Tank_DoOperation"},"254":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Empty.htm",a:"Tan k_Empty Syntax samples TANK_EMPTY (\u003cTank ID\u003e, \u003cEmpty Quantity\u003e, \u003cEmpty Rate\u003e, \u003cResume Level\u003e) TANK_EMPTY (TankB, 2000, 40, 0)  Description Empties a tank by a specified quantity and rate. The state is set to Tank_Emptying, then to Tank_Idle if the tank becomes empty.  Use Tank_Empty when the ...",t:"Tank_Empty"},"255":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_FallTrigger.htm",a:"Tan k_FallTrigger Syntax sample TANK_FALLTRIGGER (\u003cTank ID\u003e, \u003cLevel\u003e) TANK_FALLTRIGGER (TankB, 500)  Description Waits until tank contents falls to a specified level. Use Tank_FallTrigger to initiate an action when a tank level falls to a specific level. Components \u003cTank ID\u003e The tank name or ...",t:"Tank_FallTrigger"},"256":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Fill.htm",a:"Tank _Fill Syntax samples TANK_FILL (\u003cTank ID\u003e, \u003cFill Quantity\u003e, \u003cFill Rate\u003e, \u003cResume Level\u003e) TANK_FILL (HoldingTank, 2000, 75, 1500) Description Fills a tank using a specific quantity and rate. The default tank state sets to Tank_Filling, then to Tank_Blocked if the tank becomes full. Use Tank_Fill ...",t:"Tank_Fill"},"257":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_FreeCap.htm",a:"T ank_FreeCap Syntax samples TANK_FREECAP (\u003cTank ID\u003e) TANK_FREECAP (TankA)  Description Returns the available capacity of the specified tank. Use Tank_FreeCap when you need to know the available capacity of a tank. Components \u003cTank ID\u003e  The tank name or location index number.",t:"Tank_FreeCap"},"258":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_GoDown.htm",a:"Ta nk_GoDown Syntax samples TANK_GODOWN (\u003cTank ID\u003e, \u003cDown time\u003e) TANK_GODOWN (TankA, 5) Description Sets the state of the tank to Tank_Down, waits for the specified downtime, then sets the state back to the previous setting. If you defined a downtime using the location downtime dialog, call the ...",t:"Tank_GoDown"},"259":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_GoDownSched.htm",a:"Tank _GoDownSched Syntax samples TANK_GODOWNSCHED (\u003cTank ID\u003e, \u003cDown time\u003e) TANK_GODOWNSCHED (TankA, 5) Description Sets the state of the tank to Tank_ScheduledDown, waits for the specified scheduled downtime, then sets the tank state back to its previous setting. If you defined a scheduled downtime ...",t:"Tank_GoDownSched"},"260":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Inc.htm",a:"Tan k_Inc Syntax samples TANK_INC (\u003cTank ID\u003e, \u003cQuantity\u003e)  TANK_INC (StorageTank, 5000)  Description Instantly increases the level of a tank by a specified quantity. If the tank has insufficient capacity, the level increases as capacity becomes available.  MedModel  sets the tank state to ...",t:"Tank_Inc"},"261":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Prep.htm",a:"Syntax samples TANK_PREP (\u003cTank ID\u003e, \u003cPrep time\u003e) TANK_PREP (TankA, 5)  Description Sets the state of the tank to Tank_Setup, waits for the specified time, then sets the state to Tank_Idle. Use Tank_Prep for cleaning activities after you empty a tank. Use Tank_Prep to take a tank off line for ...",t:"Tank_Prep"},"262":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Rate.htm",a:"Ta nk_Rate Syntax sample TANK_RATE (\u003cFROM tank ID\u003e, \u003cTO tank ID\u003e) TANK_RATE (TankA, TankB)  Description MedModel  calls this subroutine automatically if you pass a 0 value as the From Rate when using the Tank_Empty or Tank_Transfer subroutine. To return the desired rate value, enter the necessary ...",t:"Tank_Rate"},"263":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_RiseTrigger.htm",a:"Tan k_RiseTrigger Syntax samples TANK_RISETRIGGER (\u003cTank ID\u003e, \u003cLevel\u003e) TANK_RISETRIGGER (TankA, 3000)  Description Waits until tank contents rises to a specific level. Use Tank_RiseTrigger to initiate some action when a tank rises to a certain level. Components \u003cTank ID\u003e The tank name or location ...",t:"Tank_RiseTrigger"},"264":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_SelectInput.htm",a:"Ta nk_SelectInput Syntax samples TANK_SELECTINPUT (\u003cFirst Tank\u003e, \u003cNumber of Tanks\u003e, \u003cSelection Rule\u003e, \u003cMinimum Level\u003e, \u003cProduct Type\u003e) TANK_SELECTINPUT (Tank1, 5, Tank_InOrder, 1000, 0) Description Selects an input tank from among several tanks based on a selection rule. To use this function, you ...",t:"Tank_SelectInput"},"265":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_SelectOutput.htm",a:"Ta nk_SelectOutput Syntax samples TANK_SELECTOUTPUT   (\u003cFirst Tank\u003e, \u003cNumber of Tanks\u003e, \u003cSelection Rule\u003e, \u003cMaximum Level\u003e, \u003cProduct Type\u003e) TANK_SELECTOUTPUT (TankA, 3, Tank_InOrder, 5000, 0)  Description Selects an output tank from among several tanks based on a selection rule and optional product ...",t:"Tank_SelectOutput"},"266":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_SetLevel.htm",a:"Ta nk_SetLevel Syntax samples TANK_SETLEVEL (\u003cTank ID\u003e, \u003cQuantity\u003e) TANK_SETLEVEL (TankA, 1500)  Description Instantly sets the level of a tank to a specified quantity. If the quantity is negative or larger than the tank capacity, an error occurs. The tank state sets to Tank_Blocked if you set the ...",t:"Tank_SetLevel"},"267":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_SetState.htm",a:"Tan k_SetState Syntax samples TANK_SETSTATE   (\u003cTank ID\u003e, \u003cState\u003e) TANK_SETSTATE (TankA, Tank_Idle)  Description Sets the state of the tank (e.g., Tank_State[\u003cTank ID\u003e]) to a new state and updates the statistics since the last change of state. Use Tank_SetState to explicitly change the state of a ...",t:"Tank_SetState"},"268":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_Transfer.htm",a:"Tank_T ransfer Syntax samples TANK_TRANSFER (\u003cFROM Tank ID\u003e, \u003cTO Tank ID\u003e, \u003cTransfer Quantity\u003e, \u003cFROM Rate\u003e, \u003cTO Rate\u003e, \u003cResume Level\u003e) TANK_TRANSFER (Tank1, Tank2, 2000, 100, 0, 0)  Description Transfers a specified quantity from one tank to another.  MedModel  sets the state of the FROM tank to ...",t:"Tank_Transfer"},"269":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_TransferDown_To.htm",a:"Syntax samples TANK_TRANSFERDOWNTO (\u003cFROM Tank ID\u003e, \u003cTO Tank ID\u003e, \u003cTO Level \u003e, \u003cFROM Rate\u003e, \u003cTO Rate\u003e) TANK_TRANSFERDOWNTO (Tank1, Tank2, 1000, 80, 0)  Description Similar to Tank_Transfer except that Tank_TransferDownTo terminates the transfer when the FROM tank level lowers to a designated level ...",t:"Tank_TransferDownTo"},"270":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_TransferUp_To.htm",a:"Tank_T ransferUpTo Syntax samples TANK_TRANSFERUPTO (\u003cFROM Tank ID\u003e, \u003cTO Tank ID\u003e, \u003cTO Level \u003e, \u003cFROM Rate\u003e, \u003cTO Rate\u003e) TANK_TRANSFERUPTO (Tank1, Tank2, 8500, 75, 0)  Description Similar to Tank_Transfer except that Tank_TransferUpTo does NOT terminate a transfer based on the transferred quantity, ...",t:"Tank_TransferUpTo"},"271":{i:0.0010955835953916,u:"../Content/Topics/C-05-Subroutines-Tank_UpdateStats.htm",a:"T ank_UpdateStats Syntax samples TANK_UPDATESTATS (\u003cTank ID\u003e) TANK_UPDATESTATS (TankA)  Description MedModel  calls this subroutine automatically whenever you call any of the predefined subroutines that affect the tank level. If you change the value of the Tank_Level directly, call the ...",t:"Tank_UpdateStats"},"272":{i:0.00105296307399408,u:"../Content/Topics/C-05-Subroutines-PredefinedDataElements.htm",a:"The  MedModel  tank submodel provides the following data elements for modeling tanks. Unless otherwise specified, all arrays are single-dimensional and of type integer. Initially, these arrays are 100 elements in size to allow for up to 100 locations. If you define more than 100 locations, you will ...",t:"Pre-defined Data Elements"},"273":{i:0.00105296307399408,u:"../Content/Topics/C-05-Subroutines-DefiningTankControlSubroutines.htm",a:"Unlike defining entity activity at a location (defined in the Processing module), modeling tank location activity requires the use of subroutines. Many of these subroutines are user-defined and called using the Activate statement. Though you generally activate them from the initialization logic, you ...",t:"Defining Tank Control Subroutines"},"274":{i:0.00803740559459349,u:"../Content/Topics/C-05-Subroutines-ExamplesofTankLogic.htm",a:"The following examples show how to model different tank and flow situations. For full models illustrating these situations, see the reference model in the MODELS\\REFS directory within the  MedModel  directory. Filling from an Entity A typical tank modeling situation is the arrival of an entity ...",t:"Examples of Tank Control Logic"},"275":{i:0.00105296307399408,u:"../Content/Topics/C-06-MaterialHandlingSystems.htm",a:"Material Handling Systems The following section provides advanced techniques to model Material Handling Systems.",t:"Material Handling Systems"},"276":{i:0.00105296307399408,u:"../Content/Topics/C-06-Conveyors.htm",a:"A conveyor is any moving track, belt, chain, or roller which transports parts from one location to another. This section will help you better understand conveyors and how to model them using ProModel. ProModel determines the capacity of a conveyor by its speed and load spacing rather than a stated ...",t:"Conveyors"},"277":{i:0.00105296307399408,u:"../Content/Topics/C-06-AutomaticGuidedVehicleSystems.htm",a:"An automated guided vehicle system (AGVS) is a path network along which computer-controlled, driverless vehicles transport loads. One of the modeling requirements of AGVS is to accurately describe the method for controlling traffic. You can usually accomplish this in one of two ways: Zone blocking ...",t:"Automated Guided Vehicle Systems"},"278":{i:0.00105296307399408,u:"../Content/Topics/C-06-ManualMaterialHandlingSystems.htm",a:"Manual material handling systems (MMHS) are probably the most common systems for handling, moving, storing, retrieving, and managing materials. ProModel easily allows you to model  manual labor. With  shifts, breaks, and  downtimes (illness, training, etc.), model  people as resources. Whether ...",t:"Manual Material Handling Systems"},"279":{i:0.00105296307399408,u:"../Content/Topics/C-06-IndustrialVehicles.htm",a:"Industrial vehicles include all push or powered carts and vehicles that generally have free movement. Utilize powered vehicles such as lift trucks for medium distance movement of batched parts in a container or pallet. For short moves, use manual or semi-powered carts. Single load transporters are ...",t:"Industrial Vehicles"},"280":{i:0.00105296307399408,u:"../Content/Topics/C-06-AutomatedStorage-RetrievalSystems.htm",a:"An automated storage/retrieval system (AS/RS) is “a combination of equipment and controls which handles, stores, and retrieves materials with precision, accuracy, and speed under a defined degree of automation” (The Material Handling Institute 1977). The goal of an AS/RS is to provide random, high ...",t:"Automated Storage/Retrieval Systems"},"281":{i:0.00105296307399408,u:"../Content/Topics/C-06-ModelingTips.htm",a:"Modeling Tips The following section provides advanced Modeling Tips. All examples are given in a ProModel context, but are valid in MedModel.",t:"Modeling Tips"},"282":{i:0.00105296307399408,u:"../Content/Topics/C-06-UsingEntityAttributes.htm",a:"Using  Entity Attributes Entity attributes are a powerful construct that enable a user to “tag” entities with characteristics to distinguish them from other entities of the same name.  Entity attributes are place holders associated with individual entities which usually contain information about ...",t:"Using Entity Attributes"},"283":{i:0.00105296307399408,u:"../Content/Topics/C-06-CustomizingGraphics.htm",a:"Background graphics can enhance the look of your models and provide valuable visual information to convey meaning and lend credibility to your models. For example, if a layout is created in a graphics program, it may be desirable to import the entire layout rather than create it in  MedModel . This ...",t:"Customizing Graphics"},"284":{i:0.00105296307399408,u:"../Content/Topics/C-06-BatchingandUnbatchingEntities.htm",a:"Batching refers to congregating or consolidating multiple entities of the same or different type for processing or movement purposes.  Batching may be either temporary or permanent.  For temporary batching, use the Group statement.  For permanent batching, use the Combine statement. Temporary ...",t:"Batching \u0026 Unbatching Entities"},"285":{i:0.00105296307399408,u:"../Content/Topics/C-06-ModelingPriorities.htm",a:"Priorities are an important part of modeling any system.  They range from determining which location has priority for processing parts to choosing the appropriate resource.  Priorities allow you to determine the order in which events occur in the simulation.  The three most common uses of priorities ...",t:"Modeling Priorities"},"286":{i:0.00105296307399408,u:"../Content/Topics/C-06-DisplayingStatisticsonScreen.htm",a:"Effective use of statistics lends meaning and credibility to simulation models.  This section is designed to show ways of displaying statistics on screen while the simulation is running.  It also provides examples you can incorporate into any model. Displaying on-screen statistics is valuable for ...",t:"Displaying Statistics On Screen"},"287":{i:0.00105296307399408,u:"../Content/Topics/C-06-CreatingPullSystems.htm",a:"Creating  Pull Systems Types of Pull Systems A pull system is a system in which locations produce parts only on downstream demand.  There are two types of pull systems:  those based on limited buffer or queue sizes. those based on more distant “downstream” demand. The first method, that of limited ...",t:"Creating Pull Systems"},"288":{i:0.00105296307399408,u:"../Content/Topics/C-06-MakingAssemblies.htm",a:"An assembly occurs when you attach specific items or entities to another entity such as a base part or frame.  To assemble entities, use the Join or Load Perm statement.  Implementing Join is a two-step process: \tEmploy the  Join statement at the designated assembly location. \tUse the Join routing ...",t:"Making Assemblies"},"289":{i:0.00194799402334195,u:"../Content/Topics/C-07-BuildingtheLogic.htm",a:"Building the Logic Logic Builder Operation Logic Preemptive Process Logic Routing Move Logic Shift and Break Logic",t:"Building the Logic"},"290":{i:0.00105296307399408,u:"../Content/Topics/C-07-Intellisense.htm",a:"The logic for a model can be constructed with valid statements and expressions within a logic window. Logic windows possess a number of features that facilitate the writing of logic, and one such feature is Intellisense. Intellisense is a feature that becomes active when you start to write a new ...",t:"Intellisense"},"291":{i:0.00105296307399408,u:"../Content/Topics/C-07-SyntaxGuide.htm",a:"The logic for a model can be constructed with valid statements and expressions within a logic window. Logic windows possess a number of features that facilitate the writing of logic, and one such feature is the Syntax Guide.   The Syntax Guide is a feature that works in conjunction with the ...",t:"Syntax Guide"},"292":{i:0.00105296307399408,u:"../Content/Topics/C-07-LogicBuilder.htm",a:"The Logic Builder provides a quick and powerful way to create valid statements and expressions in logic windows or fields. It takes you through the process of creating statements or expressions, as well as providing point-and-click access to every element defined in your model. The Logic Builder ...",t:"Logic Builder"},"293":{i:0.00105296307399408,u:"../Content/Topics/C-07-UsingtheLogicBuilder.htm",a:"When the Logic Builder is opened from a logic window, it remains on the screen until you click the Close button or close the logic window or table from which it was invoked. This allows you to enter multiple statements in a logic window and even move around to other logic windows without having to ...",t:"Using the Logic Builder"},"294":{i:0.00179882219845063,u:"../Content/Topics/C-07-OperationLogic.htm",a:"Operation logic defines what happens to an entity when it enters a location. Operation logic is optional, but typically contains at least a  Wait statement for the amount of time the entity should spend at the location. For modeling purposes, the exact nature of the operation (joining, grouping, ...",t:"Operation Logic"},"295":{i:0.00426015730915727,u:"../Content/Topics/C-07-PreemptionProcessLogic.htm",a:"With Preemption Process Logic,  MedModel  makes it possible to control preemption rather than limit you to default preemption priority levels and values. This feature pertains only to the preemption of entities using a location. It does not include preemption of downtimes. Normally, if an entity or ...",t:"Preemption Process Logic"},"296":{i:0.00373805592203768,u:"../Content/Topics/C-07-RoutingMoveLogic.htm",a:"To accommodate the use of multiple resources for entity movement, the Move Logic window allows you to define the method of movement as well as any other logic to be executed upon movement.  Once the route condition or rule has been satisfied for allowing an entity to route to a particular location, ...",t:"Routing Move Logic"},"297":{i:0.00105296307399408,u:"../Content/Topics/C-07-MoveRelatedStatements.htm",a:"Admissible statements in the Move Logic window include the new move-related statements listed here. A brief description of how each statement functions in  MedModel  follows the list. See  Statements and Functions  for complete syntax, description, and examples of these statements. Move statements ...",t:"Move-Related Statements"},"298":{i:0.00105296307399408,u:"../Content/Topics/C-07-RelatedLogicStatements.htm",a:"In addition to these routing specific statements, all statements and functions allowed in exit logic may be used in the Move Logic window. Note, however, that the  Location() function returns the current location when executed before the Move statement and returns the destination location when ...",t:"Related Logic Statements"},"299":{i:0.00105296307399408,u:"../Content/Topics/C-07-StatementProcessing.htm",a:"Statements executed before a Move related statement are processed after the entity claims the next location but before the entity actually departs from the current location. Statements executed after a Move related statement are processed after the move has been completed but before the entity ...",t:"Statement Processing"},"300":{i:0.00463308687138554,u:"../Content/Topics/C-07-ShiftandBreakLogic.htm",a:"Shift and break logic are optional and are defined in four distinct logic windows. Each logic window is executed in a specific sequence throughout the simulation run. You can define logic that controls how resources and locations go off duty or off line and what happens once they are off-line. To ...",t:"Shift and Break Logic"},"301":{i:0.00194799402334195,u:"../Content/Topics/C-09-RunningtheModel.htm",a:"Simulation Start All of the controls to initiate a simulation are available in the Simulation group located on the Home ribbon. This group contains options for running a model, specifying multiple replication statistics, defining scenario data, and other extended run-time options. Each of the ...",t:"Running the Model"},"302":{i:0.00314007504121772,u:"../Content/Topics/C-09-SimulationOptions.htm",a:"The Simulations Options dialog provides you with a number of options to control the simulation, such as run length, warm-up time, clock precision, and the output. You also control the type of statistics reporting you want from the simulation, including period length and number of replications.  In ...",t:"Simulation Options"},"303":{i:0.00105296307399408,u:"../Content/Topics/C-09-GeneralOptionsandSettings.htm",a:"Output Path Contains the path of the output file (the name of the file is automatically created using the name of the model).  MedModel  records all statistical output in this file for your analysis. If this field is left blank, the default path is used, which points to the Output directory in the  ...",t:"General Options and Settings"},"304":{i:0.00105296307399408,u:"../Content/Topics/C-09-OutputReportingOptions.htm",a:"Standard  When you select Standard output reporting,  MedModel  collects output statistics for one or more replications. No interval length can be specified when using this option. From the output program, statistics can be viewed for each replication; although, by default they are displayed as an ...",t:"Output Reporting Options"},"305":{i:0.00105296307399408,u:"../Content/Topics/C-09-OutputViewerstolaunch.htm",a:"Output Viewer New models created in  MedModel  will choose Output Viewer as the default output viewer.  Minitab MedModel  links and integrates with Minitab to provide users with Six Sigma analysis. This integration allows for the tracking of Six Sigma metrics in a  MedModel  model and the automatic ...",t:"Output viewer(s) to launch"},"306":{i:0.00105296307399408,u:"../Content/Topics/C-09-RunningaSpecificReplication.htm",a:"MedModel  allows you to run a specific replication in order to produce time series graphs in the Output Program. To run a specific replication, enter the “ @” symbol in the “Number of Replications” box followed by the replication number. For example, “@5” will run only the fifth replication.",t:"Running a Specific Replication"},"307":{i:0.00374497778324228,u:"../Content/Topics/C-09-CustomizedReporting.htm",a:"For customized reporting, you may want to take advantage of the following statements:  Report,  Reset Stats, and  Warmup. See  Report ,  Reset Stats , and  Warmup  for syntax and examples. ReportA general statement called from any logic. When the statement is called, a full set of statistics is ...",t:"Customized Reporting"},"308":{i:0.00334154507640634,u:"../Content/Topics/C-09-Scenarios.htm",a:"MedModel  gives you the option of defining several scenarios for a model using parameters.  A scenario is a set of parameters with settings defined by the user. Using scenarios allows you to alter various parameters to run a series of “what-if” scenarios without changing the model directly. ...",t:"Scenarios"},"309":{i:0.00105296307399408,u:"../Content/Topics/C-09-RunningtheSimulation.htm",a:"Choosing Simulate begins the simulation of the current model. The model is automatically saved in a file called autosave.mod. Therefore, if the simulation is terminated abnormally,  MedModel  will ask you if you would like to load the latest autosave.mod file when you re-open  MedModel . Once you ...",t:"Simulation Start"},"310":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeMenusandControls.htm",a:"Once a simulation begins, the application will switch to the simulation environment and a new Simulation ribbon appears with options for controlling and interacting with the simulation. There is also an animation speed control bar and simulation clock just below the ribbon. Each of the ribbon ...",t:"Simulation Environment"},"311":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeSimulationMenu.htm",a:"Simulation controls are found in the Simulate group in the ribbon and provide controls for pausing, resuming and stopping the simulation as well as toggling the animation on and off. Play   Choose Play when the simulation is paused to resume running the simulation. Pause   Choose Pause to pause the ...",t:"Simulation Controls"},"312":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeInformationMenu.htm",a:"The Info group in the Simulation ribbon allows you to see the status of locations in two different ways. In addition, you may view the current state of all variables and array elements. Each of these options is defined in the following pages. Variables  Select this option to show the current state ...",t:"Info Group"},"313":{i:0.00105296307399408,u:"../Content/Topics/C-09-AnimationOptions.htm",a:"Controls for viewing different sections of your model during simulation as well as dynamically displaying statistics are found in the View group of the ribbon. Zoom to Fit  Select this option to bring all graphical elements of the model into view. Zoom  Select this option to Zoom in or out on the ...",t:"View Controls"},"314":{i:0.0012895087983828,u:"../Content/Topics/C-09-DynamicPlots.htm",a:"Dynamic plots allow you to select certain metrics for various model elements and observe value changes for those metrics dynamically as the model runs.  Configurations of one or more plot windows can be saved and later retrieved to quickly view a customized set of graphs. Features include: Up to six ...",t:"Dynamic Plots"},"315":{i:0.0012895087983828,u:"../Content/Topics/C-09-TraceOption.htm",a:"Controls for troubleshooting and verifying your model are found in the Trace group of the Simulation ribbon. Options such as stepping through simulation events and debugging your model logic. A trace is a list of events occurring over the course of a simulation in the order in which the simulation ...",t:"Trace Controls"},"316":{i:0.00287758701966943,u:"../Content/Topics/C-09-DebugOption.htm",a:"Debugging  MedModel  Logic The Debugger is a convenient and efficient way to test or follow the processing of any logic defined in your model. The debugger is used to step through logic one statement at a time and examine variables and attributes while a model is running.  Before discussing the ...",t:"Debug Option"},"317":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeControls.htm",a:"In addition to the animation options discussed in the previous sections, you may pan the animation screen in any direction, control the speed of the simulation, and change the format of the simulation clock display. These and other procedures are discussed in this section. How to pan through the  ...",t:"Navigation, Speed and Time"},"318":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeRightClickMenu.htm",a:"Right clicking in the simulation window will bring up a right-click context menu, which gives you easy access to several animation controls. Animation Off Turns off the animation, which makes the simulation run faster. Zoom to Fit Layout Brings all model graphics into view. Zoom Allows you to choose ...",t:"Right-Click Context Menu"},"319":{i:0.00373805592203768,u:"../Content/Topics/C-10-ReportsandGraphs.htm",a:"MedModel  provides several tools for analyzing your model, exploring solutions, and making important decisions about your real-world process based on your model. Output Viewer helps you make the most of the data collected during a simulation run by allowing you to analyze your data numerically, in ...",t:"Simulation Analysis"},"320":{i:0.0011806917160245,u:"../Content/Topics/C-10-OutputViewer.htm",a:"Once you have defined a process and built a model, you are ready to begin making important decisions based upon the resulting simulation data. To help you make the most of the data collected during your simulation,  MedModel  comes with a powerful, easy-to-use Output Viewer. The Output Viewer allows ...",t:"Output Viewer"},"321":{i:0.00105296307399408,u:"../Content/Topics/C-10-SixSigmaAnalysiswithMinitab.htm",a:"MedModel  links and integrates with Minitab to provide users with Six Sigma analysis capability. This integration allows for the tracking of Six Sigma metrics in a model and the automatic reporting of these metrics in Minitab after a scenario is run.  Before simulating a scenario in, adjust the ...",t:"Six Sigma Analysis with Minitab"},"322":{i:0.00105296307399408,u:"../Content/Topics/C-10-SimulationProperties-SelectinganOutputViewer.htm",a:"Selecting Simulation Options from the Simulation group in the Home ribbon will open the Simulation Options dialog. By default the Output Viewer check box is selected under “Output viewer(s)\" section of the dialog. Select the Minitab check box to automatically launch Minitab at the end of the ...",t:"Simulation Properties - Selecting an Output Viewer"},"323":{i:0.00105296307399408,u:"../Content/Topics/C-10-AccessingMinitab.htm",a:"Accessing Minitab Analysis Ribbon \n/         Minitab can also be accessed by opening the Six Sigma Configuration dialog and then selecting the Launch Minitab button to open Minitab. ",t:"Accessing Minitab"},"324":{i:0.0011806917160245,u:"../Content/Topics/C-10-SixSigmaConfigurationDialog.htm",a:"Disabled Click and place a checkmark in the box in the Disabled column for items to be temporarily removed from the analysis. This does not delete the items but rather disables them from being included in the Six Sigma analysis while preserving all the information about the item.  Name Name of the ...",t:"Six Sigma Configuration Dialog"},"325":{i:0.00105296307399408,u:"../Content/Topics/C-10-AddAnalysisDialog.htm",a:"Add Button Click on the Add button in the Six Sigma Configuration table to select items to be included in a Six Sigma analysis. The Add Analysis Item dialog opens. Variables  Variables can be used anywhere in the model to capture any kind of statistic or data item for a Six Sigma analysis. For ...",t:"Add Analysis Dialog"},"326":{i:0.0011806917160245,u:"../Content/Topics/C-10-ViewingResultsinMinitab.htm",a:"Two charts are generated in Minitab per scenario for each Six Sigma analysis item defined in the Six Sigma Configuration dialog, the Capability Analysis Chart and the Capability Sixpack Chart.   Please Note:  MedModel  assumes that the data generated is normalized and creates the charts in Minitab ...",t:"Viewing Results in Minitab"},"327":{i:0.00105296307399408,u:"../Content/Topics/C-10-ViewingDatainMinitab.htm",a:"Viewing Data in Minitab To view the data generated by  MedModel  and populated in Minitab, used to create the charts, the user can select the Worksheets Folder view from the Minitab Toolbar.",t:"Viewing Data in Minitab"},"328":{i:0.0011806917160245,u:"../Content/Topics/C-09-SimRunner.htm",a:"SimRu nner SimRunner takes your existing  MedModel  simulation models, evaluates them for you, then performs tests to find better ways to achieve the results you desire. Typically, most people use simulation tools to predict and improve a system’s performance by modeling the actual location (e.g., a ...",t:"SimRunner"},"329":{i:0.00105296307399408,u:"../Content/Topics/C-11-LanguageElementsandExpressions.htm",a:"Language Elements and Expressions Language Elements Language elements are the smallest units of the language used to define a model’s objects and logic. Language elements include: Names Keywords Numbers Character Strings Operators",t:"Language Elements and Expressions"},"330":{i:0.00216948810572053,u:"../Content/Topics/C-11-Names.htm",a:"A name or identifier is any combination (up to eighty characters long) of letters, numbers, and underscores (“_”), used to identify model elements such as locations, entities, variables, and functions. Although any valid name can refer to any object, it is best to use names which describe the object ...",t:"Names"},"331":{i:0.00105296307399408,u:"../Content/Topics/C-11-Keywords.htm",a:"Keywords are words that  MedModel  reserves for special use as commands or function calls. Keywords may not be used as names, although names may contain keywords. Keywords, like all words in  MedModel , are case insensitive. Please Note: *Reserved for future use. For information on tank keywords, ...",t:"Keywords"},"332":{i:0.00630667053579541,u:"../Content/Topics/C-11-Numbers.htm",a:"MedModel  uses two types of numbers: real numbers and integers.  MedModel  also uses a special category of integers, called “name-index numbers.” This section discusses real numbers, integers, and name-index numbers. It then discusses converting between the different types. Integers An integer ...",t:"Numbers"},"333":{i:0.00105296307399408,u:"../Content/Topics/C-11-CharacterStrings.htm",a:"Character  Strings A string is any collection of characters enclosed in quotes, such as “Now Boarding.” Unlike some programming languages,  MedModel  uses character strings exclusively for output either to a file or to the screen. Strings may contain any of the 256  ASCII characters. (ASCII ...",t:"Character Strings"},"334":{i:0.00105296307399408,u:"../Content/Topics/C-11-Operators.htm",a:"Operators are symbols used to perform operations on elements in an expression.  MedModel  operators include Boolean operators, mathematical operators, and a string operator. Unlike reserved words, you may not use operators as any part of a name. The following sections explain the use of these ...",t:"Operators"},"335":{i:0.00105296307399408,u:"../Content/Topics/C-11-MathematicalOperators.htm",a:"Mathematical Operators",t:"Mathematical Operators"},"336":{i:0.00105296307399408,u:"../Content/Topics/C-11-RelationalOperators.htm",a:"Relational Operators",t:"Relational Operators"},"337":{i:0.00105296307399408,u:"../Content/Topics/C-11-ComparisonOperators.htm",a:"Comparison Operators",t:"Comparison Operators"},"338":{i:0.00105296307399408,u:"../Content/Topics/C-11-OperatorsOperatorPrecedence.htm",a:"Operator  Precedence As in conventional mathematics,  MedModel  evaluates expressions with more than one operator according to certain rules of precedence. Expressions with more than one operator evaluate in the following order: Terms inside parentheses: ( ) Exponentiation: ** Multiplication: *; ...",t:"Operator Precedence"},"339":{i:0.00105296307399408,u:"../Content/Topics/C-11-Expressions.htm",a:"Expressions consist of a value or combination of values (even of different types), variables, attributes, functions, and operators that result in a value. Many consider an expression to be a string expression if it evaluates to a string, a numeric expression if it evaluates to a number, and so on. ...",t:"Expressions"},"340":{i:0.00194799402334195,u:"../Content/Topics/C-11-NumericExpressions.htm",a:"A numeric expression is a combination of numeric elements (such as numbers, variables, and functions) and operators that evaluates to a numeric value.  An expression can contain any of the following in any combination: The following mathematical operators are available: You can perform additional ...",t:"Numeric Expressions"},"341":{i:0.0018682944316222,u:"../Content/Topics/C-11-BooleanExpressions.htm",a:"Boolean expressions are relational comparisons between numeric expressions resulting in a value of either True or False. Boolean expressions are used most often in If...Then and other control statements. The following relational operators are used in Boolean expressions: Relational operator examples ...",t:"Boolean Expressions"},"342":{i:0.0013513067237767,u:"../Content/Topics/C-11-TimeExpressions.htm",a:"A time expression is a numeric expression followed optionally by a time unit ( wk,  day,  hr,  min,  sec) which defines a duration. If no time unit is specified, the default time unit specified in the General Information dialog box is assumed.  MedModel  knows whether an expression is a time ...",t:"Time Expressions"},"343":{i:0.00775627767628918,u:"../Content/Topics/C-11-StringExpressions.htm",a:"Any text to be written to a file or displayed on the screen is created with a string expression. String expressions are created from a combination of the following:  A string expression must begin with a concatenation operator ($) or with a string constant in quotes (i.e., “...”). The concatenation ...",t:"String Expressions"},"344":{i:0.0051918923153496,u:"../Content/Topics/C-11-OperatorPrecedence.htm",a:"As in conventional mathematics,  MedModel  evaluates expressions with more than one operator according to certain rules of precedence. Expressions with more than one operator are evaluated in the following order: Terms inside  parentheses: ( ) Exponentiation: ** Multiplication: *;  Division: /; and  ...",t:"Operator Precedence"},"345":{i:0.00314347870038952,u:"../Content/Topics/C-12-RoutingRules.htm",a:"Routing rules determine the next location for the processing entity. They are specified in the “R ule” field of the Routing edit table. They may be typed manually or selected from the  Routing Rule Dialog box shown below by clicking on the Rule button. For more information about routing, see  ...",t:"Routing Rules"},"346":{i:0.00105296307399408,u:"../Content/Topics/C-12-Alternate.htm",a:"Syntax samples ALT Description Causes a location to be selected as an alternate destination if it has available capacity and the condition for a preceding routing rule is not met. If the ALTERNATE location is unavailable, the entity waits until it becomes available or until the preceding routing ...",t:"Alternate"},"347":{i:0.00105296307399408,u:"../Content/Topics/C-12-Backup.htm",a:"Syntax samples Backup Description Locations specified by this rule are selected only if all of the destinations (primary or alternate) listed in the preceding routings of the same block are unavailable due to any downtime, including a shift. One use of Backup is to handle a machine that is not ...",t:"Backup"},"348":{i:0.00105296307399408,u:"../Content/Topics/C-12-Continue.htm",a:"Syntax samples Cont 1 Description Leaves an entity at the current location for further processing.  MedModel  searches the process list forward and then from the beginning until a process is found for the output entity at the current location. If the entity name remains the same and no additional ...",t:"Continue"},"349":{i:0.00105296307399408,u:"../Content/Topics/C-12-Dependent.htm",a:"Syntax samples DEP  Description Selects a location if, and only if, the routing immediately preceding it is selected. An ALTERNATE routing which follows a dependent routing is an alternate to the last major routing preceding the dependent condition and not to the dependent routing itself.  A ...",t:"Dependent"},"350":{i:0.00105296307399408,u:"../Content/Topics/C-12-Empty.htm",a:"Syntax samples EMPTY {\u003cexpression\u003e} Description Selects a location only if it is completely empty. This routing rule is similar to the  Until FULL rule except that a location must be completely empty before it is initially selected. Once an empty location is selected, it continues to be selected ...",t:"Empty"},"351":{i:0.00105296307399408,u:"../Content/Topics/C-12-FirstAvailable.htm",a:"Syntax samples First {\u003cexpression\u003e} Description Selects the first location available among one or more locations listed in a routing block. Specifying multiple First Available routings in a routing block has the same effect as specifying a First Available routing followed by one or more  ALTERNATE ...",t:"First Available"},"352":{i:0.00105296307399408,u:"../Content/Topics/C-12-Join.htm",a:"Syntax samples Join {\u003cexpression\u003e} Description Selects a location whenever a Join request is issued at that location. Since a joining entity does not require capacity, there is no need to check for available capacity at the destination. Multiple Join requests are filled according to the oldest ...",t:"Join"},"353":{i:0.00105296307399408,u:"../Content/Topics/C-12-Load.htm",a:"Syntax samples Load {\u003cexpression\u003e} Description Selects a location whenever a Load request is issued at the destination location. Since a loading entity does not fill capacity, there is no need to check for available capacity at the destination. Multiple Load requests are filled according to the ...",t:"Load"},"354":{i:0.00105296307399408,u:"../Content/Topics/C-12-LongestUnoccupied.htm",a:"Syntax samples LU {\u003cexpression\u003e} Description Selects one of the locations listed in a block of routings based on which has been unoccupied the longest. If several multi-capacity locations all have one or more current entities, the location with the most available capacity will be selected. If no ...",t:"Longest Unoccupied"},"355":{i:0.00105296307399408,u:"../Content/Topics/C-12-MostAvailable.htm",a:"Syntax samples Most {\u003cexpression\u003e} Description Selects one of the locations listed in a block of routings based on which has the most available capacity. If no capacity is available at any of the locations listed, the first one that becomes available is selected. Use the Most routing rule to ...",t:"Most Available"},"356":{i:0.00105296307399408,u:"../Content/Topics/C-12-Probability.htm",a:"Syntax samples \u003cprobability\u003e {\u003cexpression\u003e} Description Randomly selects a location listed in a block of routings based on a probability. Several probability routings should be used together and the sum of all probabilities must equal one. The entity will wait to be routed until the selected ...",t:"Probability"},"357":{i:0.00105296307399408,u:"../Content/Topics/C-12-Random.htm",a:"Syntax samples RANDOM {\u003cexpression\u003e} Description Randomly selects one of several available locations listed in a block of routings such that each location having available capacity is equally likely to be selected. If none of the locations listed has available capacity, the first location that ...",t:"Random"},"358":{i:0.00105296307399408,u:"../Content/Topics/C-12-Send.htm",a:"Syntax samples Send {\u003cexpression\u003e} Description Causes an entity to remain at the current location until one of the listed destinations issues a Send. Once a location has been selected, capacity must be available at that location before the routing actually takes place. Multiple alternative Send ...",t:"Send"},"359":{i:0.00105296307399408,u:"../Content/Topics/C-12-Turn.htm",a:"Syntax samples TURN {\u003cexpression\u003e} Description Selects the locations listed in a block of routings in rotation by availability. If none of the locations listed are available, the first one that becomes available is selected. A particular location may be listed more than once in a routing block if it ...",t:"Turn"},"360":{i:0.00105296307399408,u:"../Content/Topics/C-12-UntilFull.htm",a:"Syntax samples FULL {\u003cexpression\u003e} Description This rule continues to direct all output to the first location specified until it fills to capacity and then to the next location until it fills and so on. If all locations are full, the first one that becomes available is selected. Valid In The rule ...",t:"Until Full"},"361":{i:0.00105296307399408,u:"../Content/Topics/C-12-UserCondition.htm",a:"Syntax samples \u003cBoolean expression\u003e {\u003cexpression\u003e} Description Selects one of several locations listed in a routing block based upon a user-defined condition. Several User-Condition routings usually are used in the same routing block. At least one of the user-defined conditions in a block must be ...",t:"User Condition"},"362":{i:0.00194799402334195,u:"../Content/Topics/C-13-LogicElements.htm",a:"Functions Functions return information such as a location’s capacity, the amount of time the simulation has been running, or a random number. A function is a keyword followed by parentheses, which may contain data that the function needs to complete its operation. You should be aware that if a ...",t:"Logic Elements"},"363":{i:0.00105296307399408,u:"../Content/Topics/C-13-SystemFunctions.htm",a:"The following list describes the function types available in  MedModel . General System Functions General system functions return information about the simulation, such as the length of time that the simulation has run, and may be referenced in any numeric expression.  Entity-Specific System ...",t:"System Functions"},"364":{i:0.00105296307399408,u:"../Content/Topics/C-13-GeneralFunctions.htm",a:"Math Functions Math functions are built-in functions used for performing mathematical operations on numeric expressions. Type Conversion Functions When two types of numbers are used in an expression, as when a real value is assigned to an integer variable, they must all be converted to the same type ...",t:"General Functions"},"365":{i:0.00155472024178347,u:"../Content/Topics/C-13-Statements.htm",a:"Statements cause  MedModel  to take some action or perform some operation. Unlike functions, statements neither return a value nor use parentheses, and logic may contain comments. (See  Comments .) Statements can use spacing (including a new line) before each word in a statement, and are case ...",t:"Statements"},"366":{i:0.00194799402334195,u:"../Content/Topics/C-13-DistributionFunctions.htm",a:"Distribution functions are built-in functions which, in conjunction with streams, return random values according to a statistical distribution. The following table is a summary of available distribution functions. They are valid in any numeric expression. General Components \u003cs\u003e  The optional  stream ...",t:"Distribution Functions"},"367":{i:0.00105296307399408,u:"../Content/Topics/C-13-Priorities.htm",a:"Many statements in this manual use \u003cpriority\u003e as a component. A priority determines the order in which competing commands are fulfilled. For example, priority determines which of two competing requests to  use a resource gets fulfilled, or which of two competing requests to  Send the same entities ...",t:"Priorities"},"368":{i:0.0107664557227883,u:"../Content/Topics/C-14-StatementsandFunctions.htm",a:"Statements cause  MedModel  to take some action or perform some operation. Unlike functions, statements neither return a value nor use parentheses, and logic may contain comments. (See  Comments .) Statements can use spacing (including a new line) before each word in a statement, and are case ...",t:"Statements and Functions"},"369":{i:0.00105296307399408,u:"../Content/Topics/C-14-Accum.htm",a:"E ntity-Related Operation Statement Syntax samples Accum \u003cexpression\u003e Accum 10 Accum Var1 Description Accumulates, without consolidating, the specified quantity of entities at a location. Accum works like a gate that prevents entities from processing until a certain number arrive. Once the specified ...",t:"Accum"},"370":{i:0.0238188934528861,u:"../Content/Topics/C-14-Activate.htm",a:"General Action Statement Syntax samples Activate \u003csubroutine\u003e({parameter1\u003e,\u003cparameter2\u003e...}) Activate Sub1() Description\n         Starts an independent subroutine. The calling logic then continues without waiting for the called subroutine to finish. Therefore, independent subroutines can run in ...",t:"Activate"},"371":{i:0.00373805592203768,u:"../Content/Topics/C-14-Animate.htm",a:"General Action Statement Syntax samples\n         Animate \u003cexpression\u003e Animate 70 Animate Var1 Description\n         Sets the simulation’s animation speed. The higher the value, the faster the animation. Animate is used primarily to speed up or slow down a model for cursory or detailed observation ...",t:"Animate"},"372":{i:0.00105296307399408,u:"../Content/Topics/C-14-ArrayDims().htm",a:"General System Function Syntax samples\n         ArrayDims(\u003carrayname\u003e) ArrayDims(MyArray) Description\n         Returns the number of dimensions in an array. Valid In\n         Any Logic Components\n         \u003carrayname\u003e The name of the array for which you wish to know the number of dimensions. See Also ...",t:"ArrayDims()"},"373":{i:0.00105296307399408,u:"../Content/Topics/C-14-ArrayDimSize().htm",a:"General System Function Syntax samples\n         ArrayDimSize(\u003carrayname\u003e, \u003cdim_num\u003e) ArrayDimSize(MyArray, 2) Description\n         Returns the size of a dimension in an array. You must provide the name of the array and the particular dimension of the array for which you want to know the size. Valid ...",t:"ArrayDimSize()"},"374":{i:0.00105296307399408,u:"../Content/Topics/C-14-AssignmentStatement.htm",a:"Syntax samples \u003cvariable, array element, or attribute\u003e = \u003cnumeric expression\u003e Description Assigns the value of a numeric expression to a designated variable, array element, or attribute. Valid In Any Logic Example Var1 = 300 Attr2 = Clock(hr) - Attr3 Please Note: If you assign an expression that ...",t:"Assignment Statement"},"375":{i:0.00105296307399408,u:"../Content/Topics/C-14-Begin.htm",a:"General Control Statement Syntax samples Begin or } While FreeCap(Loc1) \u003e 5 Do { Inc Var2, 5\t\t\t\t\t Wait 5 sec\t } If Var1 \u003e 5 Then \t{ Inc Var2, 5 Wait 5 sec } Description Defines a statement block with a corresponding  End (}) statement. Begin ({) and End (}) are almost always used in conjunction with ...",t:"Begin"},"376":{i:0.00105296307399408,u:"../Content/Topics/C-14-Break.htm",a:"General Control Statement Syntax samples Break Description Exits the innermost  While...Do,  Do...While, or  Do...Until loop. The next statement to be executed will be the one immediately following the  End statement associated with the innermost loop. If a Break is encountered outside any loop, ...",t:"Break"},"377":{i:0.00105296307399408,u:"../Content/Topics/C-14-BreakBlk.htm",a:"General Control Statement Syntax samples BreakBlk Description Exits from the innermost statement block. The next statement to be executed will be the one immediately following the  End statement of the innermost statement block. If a BreakBlk is executed outside any statement block,  MedModel  will ...",t:"BreakBlk"},"378":{i:0.00105296307399408,u:"../Content/Topics/C-14-CalDay().htm",a:"General System Function Syntax samples\n         CalDay() Description\n         The CalDay() function corresponds to the weekday of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options. Since CalDay() resets with the advent of a new week, every ...",t:"CalDay()"},"379":{i:0.00105296307399408,u:"../Content/Topics/C-14-CalDOM().htm",a:"General System Function Syntax samples CalDOM() Description The CalDOM() function corresponds to the calendar day of the month you defined as part of the warm-up period or simulation begin date under simulation options. Values returned by this function will be integers in the range of 1 to 31. Valid ...",t:"CalDOM()"},"380":{i:0.00105296307399408,u:"../Content/Topics/C-14-CalHour().htm",a:"General System Function Syntax samples CalHour() Description The CalHour() function corresponds to the hour of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options. Since this function ties directly to the 24-hour clock displayed on the screen ...",t:"CalHour()"},"381":{i:0.00105296307399408,u:"../Content/Topics/C-14-CalMin().htm",a:"General System Function Syntax samples CalMin() Description The CalMin() function corresponds to the minute of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options. Since this function ties directly to the 24-hour clock displayed during ...",t:"CalMin()"},"382":{i:0.00105296307399408,u:"../Content/Topics/C-14-CalMonth().htm",a:"General System Function Syntax samples CalMonth() Description The CalMonth() function corresponds to the month of the year you defined as part of the warm-up period or simulation begin date under simulation options. Values returned by this function will be integers in the range of 1 to 12. Valid In ...",t:"CalMonth()"},"383":{i:0.00105296307399408,u:"../Content/Topics/C-14-CalYear().htm",a:"General System Function Syntax samples CalYear() Description The CalYear() function corresponds to the year of the calendar date you defined as part of the warm-up period or simulation begin date under simulation options.  Valid In Any logic. Please Note: CalYear() works only when you select ...",t:"CalYear()"},"384":{i:0.00105296307399408,u:"../Content/Topics/C-14-Cap().htm",a:"General System Function Syntax samples Cap (\u003clocation\u003e) Group Cap(Loc1) Description Returns the total capacity of a location. Cap() can be used to prepare a batch of entities to fill a location.  Valid In Any logic and any expression evaluated after translation. For a list of expressions evaluated ...",t:"Cap()"},"385":{i:0.00105296307399408,u:"../Content/Topics/C-14-Char().htm",a:"String Function Syntax samples Char(\u003cexpression\u003e) Char(10) Description Returns the  ASCII character for the number that the expression evaluates to. This function is most useful for outputting ASCII characters that cannot be typed, such as accented characters. This function is most often used in ...",t:"Char()"},"386":{i:0.00105296307399408,u:"../Content/Topics/C-14-Clock().htm",a:"General System Function Syntax samples Clock({\u003ctime unit\u003e}) If Clock(day) \u003e= 1.5 Then Pause Attr1 = Clock() Description Returns value of the elapsed simulation time in the units specified. Clock units should be kept consistent when comparing values. If an attribute has been assigned a time in ...",t:"Clock()"},"387":{i:0.00182367205676388,u:"../Content/Topics/C-14-Close.htm",a:"General Operation Statement Syntax samples Close \u003cfile ID\u003e Close Arrival_File Description Closes a file that has previously been written to with  Write,  Writeline,  Xwrite, or read with  Read. Use Close when finished with a file to free system resources. A file will automatically be re-opened to be ...",t:"Close"},"388":{i:0.007017631163518,u:"../Content/Topics/C-14-Combine.htm",a:"Entity-Related Operation Statement Syntax samples Combine \u003cexpression\u003e {As \u003cnew entity name\u003e} Combine Var1 Combine 3 As EntQ Combine Var1 as Ent(Attr1) Description Accumulates and consolidates a specified quantity of entities into an entity, optionally with a different name. Unlike the  Group ...",t:"Combine"},"389":{i:0.0115261494245761,u:"../Content/Topics/C-14-Comments.htm",a:"Documentation Symbols Syntax samples // /*...*/ Components // \tTwo forward slashes signal the start of a one-line comment.  MedModel  will ignore any characters on the rest of the line. /*...*/ A slash followed by an asterisk signals the start of a multi-line comment.  MedModel  will ignore all ...",t:"Comments"},"390":{i:0.00105296307399408,u:"../Content/Topics/C-14-Contents().htm",a:"General System Function Syntax samples Contents(\u003clocation\u003e{,\u003centity type\u003e}) Load Contents(Loc1) Join Contents(Loc1, EntA) EntA Description Returns either the total number of entities at a location or the number of a certain type of entity at a location. Use Contents() to make decisions based on how ...",t:"Contents()"},"391":{i:0.0013513067237767,u:"../Content/Topics/C-14-Create.htm",a:"Entity-Related Operation Statement Syntax samples Create \u003cexpression1\u003e {As \u003centity name\u003e} {TAKE {\u003cexpression2\u003e} \u003cresource\u003e,...} Create 10 As EntX Create 2 As EntB  TAKE 1 Res1, 2 Res2 Create Var1 As Ent(Var2) TAKE Var3 Res(Var4) Description Creates a specified number of entities in addition to the ...",t:"Create"},"392":{i:0.0018682944316222,u:"../Content/Topics/C-14-Debug.htm",a:"General Action Statement Syntax samples Debug Description Brings up  MedModel ’s debugger. Use Debug to step through logic one statement at a time and examine variable and attribute values while developing a model. After a model is working, Debug statements are generally removed. Valid In Any logic. ...",t:"Debug"},"393":{i:0.00105296307399408,u:"../Content/Topics/C-14-Dec.htm",a:"General Operation Statement Syntax samples Dec \u003cname\u003e{, \u003cexpression\u003e} Dec Var1 Dec Attr1, 5 Description Decrements a variable, array element, or attribute by the value of a specified numeric expression. To decrement a variable, attribute, or array element when the current entity actually leaves a ...",t:"Dec"},"394":{i:0.00183532488321777,u:"../Content/Topics/C-14-Display.htm",a:"General Action Statement Syntax samples Display \u003cstring expression\u003e  Display “Var1 =” $ Var1 $ “and Attr1 =” $ Attr1 Display “Now beginning 100th process” Display Number_in_Queue Description Pauses the simulation and displays a message. The simulation will resume when the user selects OK. The ...",t:"Display"},"395":{i:0.00105296307399408,u:"../Content/Topics/C-14-DistanceTraveled().htm",a:"Returns distance traveled of a resource and its unit. Syntax samples DistanceTraveled(\u003cresource name\u003e {,unit}) Description Returns the distance traveled of a resource; and its unit/s. Valid In Valid in Most Logic a resource can be used. Example An AGV requires charging after it has traveled X ...",t:"DistanceTraveled()"},"396":{i:0.00105296307399408,u:"../Content/Topics/C-14-Do...Until.htm",a:"General Control Statement Syntax samples Do \u003cstatement block\u003e Until \u003cBoolean expression\u003e Do Inc Var1 Until Array1[Var1] \u003c\u003e 10  Do { \t\tInc Var2, 5  \t\tWait 5 sec \t} \tUntil FreeCap(Loc1) \u003e 5 Description Repeats a statement or statement block continuously while a condition remains false. Do...Until is ...",t:"Do...Until"},"397":{i:0.00105296307399408,u:"../Content/Topics/C-14-Do...While.htm",a:"General Control Statement Syntax samples Do \u003cstatement block\u003e While \u003cBoolean expression\u003e Do Inc Var1 While Array1[Var1] \u003c\u003e 10  Do { \t\tInc Var2, 5  \t\tWait 5 sec } While FreeCap(Loc1) \u003e 5 Description Repeats a statement or statement block continuously while a condition remains true. Do...While is an ...",t:"Do...While"},"398":{i:0.00304977784739325,u:"../Content/Topics/C-14-Down.htm",a:"Downtime-Specific System Function Syntax samples Down \u003cdtname\u003e, {\u003cpriority\u003e} Description Makes a location, with the specified called downtime, attempt to go down. This statement is used in conjunction with the Called Downtime dialog, where you have previously defined the called downtime’s name, ...",t:"Down"},"399":{i:0.00105296307399408,u:"../Content/Topics/C-14-DownQty().htm",a:"General System Function Syntax samples DownQty(\u003clocation\u003e or \u003cresource\u003e) If DownQty(Loc1) \u003e 3 Then Route 2 Display “Total Res1 Down Now:” $ DownQty(Res1) Description Returns the number of location or resource units down at the time of the call. Use this function to make decisions based on how many ...",t:"DownQty()"},"400":{i:0.00105296307399408,u:"../Content/Topics/C-14-DTDelay().htm",a:"Downtime-Specific System Function Syntax samples DTDelay(\u003ctime unit\u003e) Wait Att1 - DTDelay(Min) Display “The downtime delay was”$DTDelay(day)$“days.” Description Returns the difference between the time when you scheduled a non-preemptive downtime to occur and the time it actually occurred. Use ...",t:"DTDelay()"},"401":{i:0.00105296307399408,u:"../Content/Topics/C-14-DTLeft().htm",a:"Shift \u0026 Break System Function Syntax samples DTLeft \u003ctime units\u003e Shift_Time = DTLeft() Description The DTLeft function returns the balance of the off-shift or break time remaining for a location or resource before it resumes normal activities. Unless passed as an argument (e.g., DTLeft(hr)), the ...",t:"DTLeft()"},"402":{i:0.00105296307399408,u:"../Content/Topics/C-14-DTLength().htm",a:"Shift \u0026 Break System Function Syntax samples DTLength \u003ctime units\u003e Shift_Time = DTLength() Description The DTLength function returns the full length of the off-shift or break time for a location or resource before it resumes normal activities. Unless passed as an argument (e.g., DTLength(hr)), the ...",t:"DTLength()"},"403":{i:0.00105296307399408,u:"../Content/Topics/C-14-DynPlot().htm",a:"General Action Statement Syntax samples DynPlot “\u003cchart name\u003e” DynPlot “my dynamic plot name” DynPlot “Chart 1” DynPlot “”  Description The DynPlot statement is used to automatically turn on predefined Dynamic Plot windows. Its usage is similar to that of the View statement. Dynamic Plot windows are ...",t:"DynPlot()"},"404":{i:0.00105296307399408,u:"../Content/Topics/C-14-End.htm",a:"General Control Statement Syntax samples } (the End statement) While FreeCap(Loc1) \u003e 5 Do  { \t\tInc Var2, 5 \t\tWait 5 sec \t} Description Defines a statement block along with a corresponding Begin ({) statement.  Begin ({) and End (}) are almost always used in conjunction with other control statements ...",t:"End"},"405":{i:0.00387328558980634,u:"../Content/Topics/C-14-Ent().htm",a:"Type Conversion Function Syntax samples Ent(\u003centity name-index number\u003e) Send 10 Ent(Var1) TO Loc1 Display “Ent A has been combined with” $ Ent(Var1) Description Converts a name-index number or integer to an entity name. Use this function when a statement or function needs the name of an entity whose ...",t:"Ent()"},"406":{i:0.00105296307399408,u:"../Content/Topics/C-14-Entity().htm",a:"Entity-Specific System Function Syntax samples Entity({\u003cexpression\u003e}) Entity() Entity(Var1) Description Returns the name-index number of the current entity or a particular entity in an entity group. This function is especially useful in macros and subroutines that vary depending on which entity ...",t:"Entity()"},"407":{i:0.00105296307399408,u:"../Content/Topics/C-14-Entries().htm",a:"General System Function Syntax samples Entries(\u003clocation\u003e) Display “LocA has had” $ Entries(LocA) $ “entries.” Description Returns the total entries to a location. This function returns an integer. Valid In Any logic and any field except those evaluated only at translation. For a list of fields ...",t:"Entries()"},"408":{i:0.00105296307399408,u:"../Content/Topics/C-14-Exp().htm",a:"Math Function Syntax samples Exp(\u003cexpression\u003e) Real1 = Exp(Real2) Description Returns the exponential of an expression. This function is equivalent to ex. Valid In Any expression. This function returns a real number. Components \u003cexpression\u003e Exp() returns the exponential of this expression. See Also ...",t:"Exp()"},"409":{i:0.00105296307399408,u:"../Content/Topics/C-14-ForLocation().htm",a:"Shift and Break System Function Syntax samples ForLocation() If ForLocation() Then Priority 100 If ForLocation() Then  \tInc Arr1 [1, 2] Else \tInc Arr1 [2, 2] Description This function returns TRUE if the object executing the shift or break logic is a location. Valid In Shift or break logic. Example ...",t:"ForLocation()"},"410":{i:0.00105296307399408,u:"../Content/Topics/C-14-Format().htm",a:"String Function Syntax samples Format(\u003cexpression\u003e, \u003ctotal number of characters in expression\u003e {,\u003cdigits after decimal\u003e}) Display “The value of Var1 is” $ Format(Var1, 5) Description Converts a number to a string in the format specified. Format() should most often be used with the concatenation ...",t:"Format()"},"411":{i:0.00105296307399408,u:"../Content/Topics/C-14-ForResource().htm",a:"Shift and Break System Function Syntax samples ForResource() If ForResource() Then Get Res1 Description This function returns TRUE if the object executing the shift or break logic is a resource. Valid In All Shift or Break logic. Example A shift called DAYS.SFT has five resources and eight locations ...",t:"ForResource()"},"412":{i:0.00105296307399408,u:"../Content/Topics/C-14-Free.htm",a:"Resource-Related Operation Statement Syntax samples Free {\u003cquantity\u003e} \u003cresource\u003e{, {quantity} \u003cresource\u003e...}  Free Res1, 2 Res2, 5 Res3A Free All Free Res(Attr1) Description Frees resources which are currently “owned” by the current entity. These resources must have been captured through a Get or ...",t:"Free"},"413":{i:0.00105296307399408,u:"../Content/Topics/C-14-FreeCap().htm",a:"General System Function Syntax samples FreeCap(\u003clocation\u003e) Send FreeCap(Loc1) EntA TO Loc1 Description Returns the available capacity of a location. This function returns an integer. Valid In Any logic and any field except those fields evaluated only at translation time. For a list of fields ...",t:"FreeCap()"},"414":{i:0.00105296307399408,u:"../Content/Topics/C-14-FreeUnits().htm",a:"General System Function Syntax samples FreeUnits(\u003clocation\u003e or \u003cresource\u003e) Use (FreeUnits(Res1)) Res1 For 5 min Description Returns the free units of a location or resource. Valid In  Any logic and any field except those fields evaluated only at translation time. For a list of fields evaluated only ...",t:"FreeUnits()"},"415":{i:0.00105296307399408,u:"../Content/Topics/C-14-Get.htm",a:"Resource-Related Operation/Move Logic Statement Syntax samples Get {\u003cquantity\u003e} \u003cresource\u003e {,\u003cpriority\u003e} {And or Or {\u003cquantity\u003e} \u003cresource\u003e {,\u003cpriority\u003e}...} Get Res1 Get 3 Res1, 5 Get 2 Res1OR 3 Res2 Get Res1, 3 And (Res2 Or Res3) Get Res(Skill_required) Description Captures a specified number of ...",t:"Get"},"416":{i:0.00150047854866801,u:"../Content/Topics/C-14-GetCost().htm",a:"Cost Related Function Syntax samples GetCost() Description Returns the cost of the current entity executing the logic. Use this function to return the entity’s actual, accumulated dollar amount. Valid In Operation logic only. Example The following example shows how to use the GetCost() function to ...",t:"GetCost()"},"417":{i:0.00105296307399408,u:"../Content/Topics/C-14-GetReplicationNum().htm",a:"General System Function Syntax samples GetReplicationNum() Description Returns the number of the currently running replication. Valid In Any Logic. Example Based on the current replication, you may want to make a decision regarding the exporting of array data. In this case, you could use an If Then ...",t:"GetReplicationNum()"},"418":{i:0.00105296307399408,u:"../Content/Topics/C-14-GetResRate().htm",a:"Cost Related Function Syntax samples GetResRate({\u003cresource\u003e}) GetResRate() GetResRate(Operator1) Description Returns the cost rate specified in the Cost dialog or through the SetRate() function for a resource currently owned by the entity making the function call. When used without the optional ...",t:"GetResRate()"},"419":{i:0.00322341953337639,u:"../Content/Topics/C-14-Graphic.htm",a:"Gen eral Operation Statement Syntax samples Graphic \u003cexpression\u003e Graphic 2 Graphic Var1  Description Changes the entity’s or resource’s current graphic. Entities and resources are assigned graphics from the graphics library in the Entity or Resource editor. Use the Graphic to show the result of a ...",t:"Graphic"},"420":{i:0.00540594413036961,u:"../Content/Topics/C-14-Group.htm",a:"Entity-Related Operation Statement Syntax samples Group \u003cexpression\u003e {As \u003centity name\u003e} Group (Var1+Var2) Group 10 As EntX Description Accumulates and temporarily consolidates a specified quantity of entities into a single Group shell entity. The shell entity retains the same attributes as the first ...",t:"Group"},"421":{i:0.00105296307399408,u:"../Content/Topics/C-14-GroupQty().htm",a:"Entity-Specific System Function Syntax samples GroupQty({\u003centity name\u003e}) Order GroupQty(Part1) Part2 TO Loc1 If GroupQty(Part1) \u003e 5 Then... Description Returns the number of entities of a specified type in a grouped or loaded entity. If no name is specified, it returns the entire group quantity. If ...",t:"GroupQty()"},"422":{i:0.00105296307399408,u:"../Content/Topics/C-14-If...Then...Else.htm",a:"General Control Statement Syntax samples If \u003cBoolean expression\u003e Then \u003cstatement 1\u003e {Else \u003cstatement 2\u003e} If Var1 = 5 Then Wait 2 min If (Attr2 = 5) Or (Var5 \u003c\u003e 0) Then Wait 2 min  Else Wait 3 min If Var1 \u003e Attr2 Then \t{ Var1 = Attr2 \tWait Attr1 } Else { Inc Var1  \tWait Attr2 } Description Executes a ...",t:"If...Then...Else"},"423":{i:0.00105296307399408,u:"../Content/Topics/C-14-Inc.htm",a:"General Operation Statement Syntax samples Inc \u003cname\u003e{, \u003cexpression\u003e} Inc Var1  Inc Attr2, 5+Var1 Description Increments a variable, array element, or attribute by the value of a specified numeric expression. When counting the number of entities a location has processed, increment a variable at the ...",t:"Inc"},"424":{i:0.00150047854866801,u:"../Content/Topics/C-14-IncEntCost.htm",a:"Cost Related Statement Syntax samples IncEntCost \u003cexpression\u003e IncEntCost 15 IncEntCost -15  Description Enables you to increment the cost (positively or negatively) of the current entity by a given amount. Use this function to add to the entity’s actual, accumulated dollar amount. Please Note: When ...",t:"IncEntCost"},"425":{i:0.00105296307399408,u:"../Content/Topics/C-14-IncLocCost.htm",a:"Cost Related Statement Syntax samples IncLocCost \u003cexpression\u003e IncLocCost 15 IncLocCost -15  Description Enables you to increment the cost (positively or negatively) of the current location by a given amount. Use this function to add to the location’s actual, accumulated dollar amount. Valid In ...",t:"IncLocCost"},"426":{i:0.00105296307399408,u:"../Content/Topics/C-14-IncResCost.htm",a:"Cost Related Statement Syntax samples IncResCost \u003ccost expression\u003e {,\u003cresource\u003e} IncResCost 10 IncResCost GetResRate(Operator1)*20, Operator1  Description Enables you to increment the cost (positively or negatively) of a resource currently owned by the entity executing the statement. Use this ...",t:"IncResCost"},"427":{i:0.00234914596703361,u:"../Content/Topics/C-14-Int.htm",a:"Local Variable Declaration Statement Syntax samples Int \u003cname1\u003e{= \u003cexpression1\u003e, \u003cname2\u003e= \u003cexpression2\u003e...)  Int Count Int Count = 1 Int Count = 1, Test = FreeCap(Loc2) Description Creates a local variable of type integer. Local variables work much the same as attributes, except that they only are ...",t:"Int"},"428":{i:0.0102410052298148,u:"../Content/Topics/C-14-Join.htm",a:"Entity-Related Operation Statement Syntax samples Join \u003cexpression\u003e \u003centity name\u003e {,\u003cpriority\u003e} Join 4 EntA Join Var1 EntA, 1  Description Joins a specified quantity of a designated entity type to the current entity. The entities joined to the current entity lose their identities and any resources ...",t:"Join"},"429":{i:0.00105296307399408,u:"../Content/Topics/C-14-JointlyGet.htm",a:"Resource-Related Operation Statement Syntax samples Jointly Get {\u003cquantity\u003e} \u003cresource\u003e  {,\u003cpriority\u003e} {And or Or {\u003cquantity\u003e} \u003cresource\u003e {,\u003cpriority\u003e}} Jointly Get 3 Res1,5 Jointly Get 2 Res1 Or 3 Res2 Jointly Get Res1,3 And (Res2 Or Res3) Jointly Get 2 Res(Attribute1) Description Captures a ...",t:"Jointly Get"},"430":{i:0.00105296307399408,u:"../Content/Topics/C-14-Last().htm",a:"Resource-Specific System Function Syntax samples Last() Var1=Last() If Last() = 13 Then Var3 = 0 If Last() = PathNet1.N1 Then Inc Var1 Description Returns the name-index number of the node from which a resource has just traveled. Last() can be useful to choose the appropriate graphic or to reset a ...",t:"Last()"},"431":{i:0.00105296307399408,u:"../Content/Topics/C-14-Ln().htm",a:"Math Function Syntax samples Ln(\u003cexpression\u003e) Real1 = Ln(Real2) Description Returns the natural logarithm of an expression. Valid In Any expression. This function returns a real number. Components \u003cexpression\u003e Ln() returns the natural logarithm of this expression. See Also Exp(). Please Note: To get ...",t:"Ln()"},"432":{i:0.00540594413036961,u:"../Content/Topics/C-14-Load.htm",a:"Entity-Related Operation Statement Syntax samples Load \u003cexpression\u003e {Perm}{Iff \u003cBoolean expression\u003e}{IN \u003ctime\u003e}{,\u003cpriority\u003e} Load 5, 99 Load 5 Iff Attr3 \u003e 2 IN 5 min Load Pallet_Capacity  Load 5 Perm IN 10 min Description Loads a specified quantity of entities onto a base entity. Temporarily loaded ...",t:"Load"},"433":{i:0.00528579352177059,u:"../Content/Topics/C-14-Loc().htm",a:"Name-Index-Number Conversion Function Syntax samples Loc(\u003clocation name-index number\u003e) Order 10 EntA TO Loc(5) Display “EntA arrived at” $ Loc(5) Description Converts a name-index number or integer to a location name. Use this function when a statement or function needs the name of a location but ...",t:"Loc()"},"434":{i:0.00105296307399408,u:"../Content/Topics/C-14-LocState().htm",a:"General System Function Syntax samples LocState (\u003clocationname\u003e) Description Returns a value indicating the current state of the specified location. Return values will range from 1-7, which translate to the following: 1 = idle/empty 2 = setup 3 = operating 4 = blocked 5 = waiting 6 = up ...",t:"LocState()"},"435":{i:0.00105296307399408,u:"../Content/Topics/C-14-Location().htm",a:"Location-Specific System Function Syntax samples Location() Attr1 = Location() If Location() = 2 Then Wait 4 min Description Returns the current location’s name-index number. This function is especially useful in macros and subroutines that vary depending on which location’s logic calls them. By ...",t:"Location()"},"436":{i:0.00105296307399408,u:"../Content/Topics/C-14-Log.htm",a:"General Action Statement Syntax samples Log \u003cstring\u003e, \u003cexpression\u003e Log “Activity Time”, Attr1 Description MedModel  assumes that the time stored in the expression is in the model’s default time units set in the General Information dialog box. Use the Log statement to record the time from one ...",t:"Log"},"437":{i:0.00105296307399408,u:"../Content/Topics/C-14-MapArr.htm",a:"General Action Statement Syntax samples MapArr \u003carray name\u003e{TO \u003cvariable name\u003e} MapArr Array1 TO Var10 MapArr Array5 Description Starting with the variable you specify, the MapArr statement maps each individual cell of an array to a unique variable (i.e., if you define 12 cells for the array, the ...",t:"MapArr"},"438":{i:0.00105296307399408,u:"../Content/Topics/C-14-Match.htm",a:"Entity-Related Operation Statement Syntax samples Match \u003cattribute\u003e Match Attr1 Description Causes the current entity to wait until the value of the specified attribute matches the value of another entity’s same attribute. Both entities must have a corresponding Match statement specified for the ...",t:"Match"},"439":{i:0.00105296307399408,u:"../Content/Topics/C-14-Move.htm",a:"Entity-Related Operation Statement Syntax samples Move {For \u003ctime expression\u003e} Move For .25 min Move For 3.2 Move Description Moves the entity to the end of a queue or conveyor location. Use the Move statement to explicitly control the movement of an entity through a queue or conveyor. Please Note: ...",t:"Move"},"440":{i:0.00105296307399408,u:"../Content/Topics/C-14-MoveFor.htm",a:"Entity-Related Move Logic Statement Syntax samples Move For \u003ctime\u003e Move For 0 Move For 2.5 + CleanupTime Move For N(8, .5) + 3 sec Description Used to specify the amount of time required to move the entity. A move-time of zero may be entered to cause events for other entities occurring at the same ...",t:"Move For"},"441":{i:0.00105296307399408,u:"../Content/Topics/C-14-MoveOn.htm",a:"Entity-Related Move Logic Statement Syntax samples Move On \u003cpath network\u003e Move On StatPath2 Description Use this statement to move an entity along a path network.  Valid In This statement is valid only in Move Logic. Move On may only be encountered once by an entity in the same move logic. ...",t:"Move On"},"442":{i:0.00105296307399408,u:"../Content/Topics/C-14-MoveWith.htm",a:"Entity-Related Move Logic Statement Syntax samples Move With \u003cres1\u003e {, \u003cpriority\u003e}      Or \u003cres2\u003e {, \u003cpriority\u003e}      {For \u003ctime \u003e} {Then Free} Move With Technician, 100 Move With Operator1, 399 For 3 min Move With Truck1, 99 Then Free Move With Operator1 Or Operator2 Description This statement is ...",t:"Move With"},"443":{i:0.00105296307399408,u:"../Content/Topics/C-14-Next().htm",a:"Resource-Specific System Function Syntax samples Next() Var1=Next() If Next() = PathNet5.N11 Then Var5=3 Description Returns the name-index number of the resource’s destination node. Use Next() to determine the direction an entity is headed and choose the appropriate graphic. This function can be ...",t:"Next()"},"444":{i:0.00105296307399408,u:"../Content/Topics/C-14-ObjectID().htm",a:"Entity-Specific System Function Syntax samples ObjectID() Description Returns the unique ID number associated with the entity calling the function.  As each entity enters the simulation, whether through an arrival, order, or being created, its ID number is incremented in sequence, thus ensuring that ...",t:"ObjectID()"},"445":{i:0.0013513067237767,u:"../Content/Topics/C-14-Order.htm",a:"General Action Statement Syntax samples Order \u003cexpression\u003e \u003centity\u003e {TO \u003clocation\u003e} Order 10 EntA TO Loc2 Order Order_Qty_Attr Ent(Entity_Attr) TO Loc(Loc_Attr) Description Causes the specified number of entities to be created and placed into the system at the designated location.  If the location ...",t:"Order"},"446":{i:0.00105296307399408,u:"../Content/Topics/C-14-OwnedResource().htm",a:"Resource-Specific System Function Syntax samples OWNEDResource ({\u003cexpression \u003e}) OWNEDResource (2) OWNEDResource (ResQty()) OWNEDResource () Description Returns the name-index number of the nth resource currently owned by the entity or downtime making the function call. The function parameter ...",t:"OwnedResource()"},"447":{i:0.00105296307399408,u:"../Content/Topics/C-14-OwnedResourceUnit().htm",a:"Resource-Specific System Function Syntax samples OwnedResourceUnit ({\u003cexpression \u003e}) OwnedResourceUnit (2) OwnedResourceUnit (ResQty()) OwnedResourceUnit () Description Returns the unit number of the nth resource currently owned by the entity or downtime making the function call. The function ...",t:"OwnedResourceUnit()"},"448":{i:0.00105296307399408,u:"../Content/Topics/C-14-Pause.htm",a:"General Action Statement Syntax samples Pause {\u003cstring expression\u003e} Pause Pause “Var1 =” $ Var1 Pause “Reached the midpoint of the simulation.” Description Pauses the simulation and optionally displays a message at some point of interest. This pause allows the user to examine the system in detail. ...",t:"Pause"},"449":{i:0.00105296307399408,u:"../Content/Topics/C-14-PercentOp().htm",a:"General System Function Syntax samples PercentOp (\u003clocationname\u003e) Description Returns the cumulative operation time percentage for the specified, single-capacity location. The value returned by this function represents the cumulative percentage of time the location was actually processing an entity ...",t:"PercentOp()"},"450":{i:0.00105296307399408,u:"../Content/Topics/C-14-PercentUtil().htm",a:"General System Function Syntax samples PercentUtil (\u003cloc or res name\u003e {, \u003cres unit}) PercentUtil (Lathe) PercentUtil (Operator) PercentUtil (Operator, 3) Description Returns the cumulative utilization percentage for the specified location or resource. If a resource is specified without the optional ...",t:"PercentUtil()"},"451":{i:0.00105296307399408,u:"../Content/Topics/C-14-Preemptor().htm",a:"Preemption Logic System Function Syntax samples Preemptor() Var1=Preemptor() Description Identifies whether a downtime or entity is making the preemptive request.  The function returns the name index number of the preempting entity; however, it returns a 0 if the preemptor is a downtime.  Valid In ...",t:"Preemptor()"},"452":{i:0.00105296307399408,u:"../Content/Topics/C-14-Priority.htm",a:"Shift and Break Logic Statement Syntax samples Priority \u003cexpression\u003e Priority 199 Description This statement is used to change the priority of the off-line state of the location or resource. If the priority is less than the value set previously, the system will check if the location or resource can ...",t:"Priority"},"453":{i:0.00105296307399408,u:"../Content/Topics/C-14-Prompt.htm",a:"General Operation Statement Syntax samples\n         Prompt \u003cstring expression\u003e, \u003cname\u003e{,  \u003cchoice1\u003e:\u003cexpression1\u003e,  \u003cchoice2\u003e:\u003cexpression2\u003e,  \u003cchoice3\u003e:\u003cexpression3\u003e...} Prompt “Enter the number of entities to process:”, Var2 Prompt “Enter the size of batches to accumulate:”,Var1, “Large”: 20, ...",t:"Prompt"},"454":{i:0.00105296307399408,u:"../Content/Topics/C-14-Rand().htm",a:"Math Function Syntax samples Rand(\u003cexpression\u003e) Rand(10) min Order Rand(10) EntA TO Loc1 If Rand(100) \u003e 45 Then Route 1 Description Returns a random value n between 0 and X (0 \u003c= n \u003c X) where X is the result of the expression.  To generate random numbers between the expression and a number other ...",t:"Rand()"},"455":{i:0.00182367205676388,u:"../Content/Topics/C-14-Read.htm",a:"General Action Statement Syntax samples Read \u003cfile ID\u003e, \u003cname\u003e Read File1, Var1  Description Reads the next numeric value from a general read file and assigns that value to a name. General read files are defined in the External Files Editor. When reading from a file,  MedModel  skips all non-numeric ...",t:"Read"},"456":{i:0.00234914596703361,u:"../Content/Topics/C-14-Real.htm",a:"Local Variable Declaration Statement Syntax samples Real \u003cname1\u003e{= \u003cexpression1\u003e, \u003cname2\u003e= \u003cexpression2\u003e...)  Real Var1 Real Counter = 0 Real Var1 = Clock(sec), Random_Num = Rand(10) Description Creates a local variable of type real.  Local variables work much the same as attributes, except that ...",t:"Real"},"457":{i:0.00105296307399408,u:"../Content/Topics/C-14-Real().htm",a:"Type Conversion Function Syntax sample Real(\u003cexpression\u003e) Var2 = Var1 + Real(Var3) Attr3 = 1.05 * Real(Var5) Description Converts an integer to a real number.  MedModel  automatically converts integers to real when needed.  Valid In Any expression. Components \u003cexpression\u003e Real() converts this ...",t:"Real()"},"458":{i:0.00105296307399408,u:"../Content/Topics/C-14-Region.htm",a:"Syntax samples #region \u003cOptional region name or description\u003e \u003clogic\u003e #endregion #region Declare Local Variables Int myInt Real myReal #endregion Description  Collapsible regions facilitate the readability and understandability of the logic and the visual compartmentalization of various portions of ...",t:"Region"},"459":{i:0.00210839520830326,u:"../Content/Topics/C-14-Rename.htm",a:"Entity-Related Operation Statement Syntax samples Rename {As} \u003cnew entity name\u003e Rename EntB Rename As EntB Rename As Ent(Var2) Description Renames the processing entity to the new entity name. After a Rename statement is encountered, the entity then searches forward in the process list and again ...",t:"Rename"},"460":{i:0.00211405987581548,u:"../Content/Topics/C-14-Report.htm",a:"General Action Statement Syntax samples Report {With Reset} {As \u003cstring expression\u003e} Report Report With Reset If thruput = 50 Then Report As “RepOvr50” Description Calculates and reports the current statistics to the output database. This is useful to get a snapshot of the model while it is running. ...",t:"Report"},"461":{i:0.00406909316242574,u:"../Content/Topics/C-14-Res().htm",a:"Name-Index-Number Conversion Function Syntax samples Res(\u003cresource name-index number\u003e) Use 10 Res(Var1) for 1.5 min Free Res(Var1) Display “Now using” $ Res(Var1) Description Converts a name-index number or integer to a resource name. Use this function when a statement or function needs the name of ...",t:"Res()"},"462":{i:0.00105296307399408,u:"../Content/Topics/C-14-Reset.htm",a:"General Action Statement Syntax samples Reset \u003cfile ID\u003e  Reset Times  Reset (Times) Description Starts a general read file over from the beginning. Reset is used primarily in the Initialization or Termination logic to reset a general read or write file at the beginning or end of multiple ...",t:"Reset"},"463":{i:0.00211405987581548,u:"../Content/Topics/C-14-ResetStats.htm",a:"General Action Statement Syntax samples Reset Stats If Total = 20 Then Reset Stats Description Resets the simulation statistics.  Useful in connection with the  Report statement to manually control statistics for reporting purposes in case specific or event logic. Valid In Any logic.  Example ...",t:"Reset Stats"},"464":{i:0.00105296307399408,u:"../Content/Topics/C-14-Resource().htm",a:"Shift \u0026 Break System Function Syntax samples Resource () Description Returns the name-index number of the resource currently processing the off-shift or break logic. Valid In Pre-Off Shift, Off-shift, Pre-Break, Break, Resource Clock DT, Resource Usage DT, Resource Node and Subroutine logic. Example ...",t:"Resource()"},"465":{i:0.00105296307399408,u:"../Content/Topics/C-14-ResourceUnit().htm",a:"Shift \u0026 Break System Function Syntax samples ResourceUNIT() Description Returns the unit number of the resource being used. Valid In Pre-Off Shift, Off-shift, Pre-Break, Break, Resource Clock DT, Resource Usage DT, Resource Node and Subroutine logic Example When a multi-unit resource goes on shift, ...",t:"ResourceUnit()"},"466":{i:0.00105296307399408,u:"../Content/Topics/C-14-ResQty().htm",a:"Entity-Specific System Function Syntax samples ResQty({\u003cresource name\u003e}) If ResQty(Res1) \u003e 5 Then Free 5 Res1 Description Returns the number of units of the specified resource that the current entity owns. ResQty() can be used to determine the amount of time necessary to process an entity based on ...",t:"ResQty()"},"467":{i:0.0109230967452196,u:"../Content/Topics/C-14-Return.htm",a:"General Action Statement Syntax samples RETURN {\u003cexpression\u003e} RETURN RETURN Attr1**Sqrt(Attr2) Description Sends a value from a subroutine to the logic that called the subroutine. In the same way that parameters send information from the calling logic to the subroutine, RETURN sends information from ...",t:"Return"},"468":{i:0.00105296307399408,u:"../Content/Topics/C-14-Round().htm",a:"Math Function Syntax samples Round(\u003cexpression\u003e) Integer1 = Round(3.5) Description  Rounds the expression to the nearest whole number.  Use this function to override  MedModel ’s default, truncation. Valid In Any expression. This function returns an integer. Components \u003cexpression\u003e The expression to ...",t:"Round()"},"469":{i:0.00210839520830326,u:"../Content/Topics/C-14-Route.htm",a:"Entity-Related Operation Statement Syntax samples Route \u003cexpression\u003e Route 2 Route Attr1 Route Dist1() Description Immediately executes a routing block for the processing entity before finishing any remaining processing logic. The process does not continue until all entities being routed for the ...",t:"Route"},"470":{i:0.00105296307399408,u:"../Content/Topics/C-14-ScenarioName().htm",a:"Returns current scenario name Syntax samples ScenarioName() Description Returns the Scenario Name when the function is invoked in logic. Valid In Valid in Most Logic. Example Suppose you choose to write out customer reports and want to know what Scenario you were running for the report, you would ...",t:"ScenarioName()"},"471":{i:0.00105296307399408,u:"../Content/Topics/C-14-Send.htm",a:"General Action Statement Syntax samples Send \u003cexpression\u003e \u003centity name\u003e TO \u003cdestination\u003e{,\u003cpriority\u003e} Send 2 EntA TO Loc2 Send 1 Grp_A TO Grp_A_Processing, 10 Description Sends the specified number of a particular entity type to the destination. The entities to be sent must be waiting with a Send ...",t:"Send"},"472":{i:0.00150047854866801,u:"../Content/Topics/C-14-SetRate.htm",a:"S etRate General Operation Statement Syntax samples SetRate \u003cresource name\u003e, \u003cexpression\u003e, \u003cunit #\u003e SetRate Operator, 25, 3 Description Allows you to define the regular rate of cost for resources contained in a model. If you have already defined the regular rate in the Cost module, this statement ...",t:"SetRate"},"473":{i:0.00105296307399408,u:"../Content/Topics/C-14-Skip.htm",a:"Shift and Break Logic Statement Syntax samples Skip Description In pre-off-shift or pre-break logic, a Skip statement causes any off-shift or break main logic to be skipped as well as the off-shift or break time defined in the shift file so that the affected location or resource stays on line. In ...",t:"Skip"},"474":{i:0.00105296307399408,u:"../Content/Topics/C-14-SplitAs.htm",a:"S plit As Entity-Re lated Operation Statement Syntax samples Split \u003cexpression\u003e AS \u003cnew entity name\u003e Split 10 As Entx Description Splits an existing entity into a number of new entities (greater than one) you specify, and optionally changes the entity names. The treatment of cost and time statistics ...",t:"Split As"},"475":{i:0.00105296307399408,u:"../Content/Topics/C-14-Sqrt().htm",a:"Math Function Syntax samples Sqrt(\u003cexpression\u003e)  Real1 = Sqrt(Real2) Description Returns the square root of an expression. Valid In Any expression. This function returns a real number. Components \u003cexpression\u003e Sqrt() returns the square root of this expression. See Also Round(). Please Note: To get a ...",t:"Sqrt()"},"476":{i:0.00105296307399408,u:"../Content/Topics/C-14-Stop.htm",a:"General Operation Statement Syntax samples Stop {\u003cstring expression\u003e} Stop Stop “Normal termination” Description Terminates the current replication and optionally displays a message. The simulation will then continue with the next replication. Use Stop to end a replication when the simulation has ...",t:"Stop"},"477":{i:0.00105296307399408,u:"../Content/Topics/C-14-SysClock().htm",a:"Returns the system clock of the users PC Syntax samples SysClock Description Returns the System date and time when the function is invoked in logic. Valid In Valid in most Logic. Example Suppose you choose to write out customer reports and want to know what time each scenario or replication started ...",t:"SysClock()"},"478":{i:0.00105296307399408,u:"../Content/Topics/C-14-ThreadNum().htm",a:"General System Function Syntax samples ThreadNum() If ThreadNum()=215 Then Debug Description Every time any logic is executed, it is executed by a thread which is assigned a unique number. ThreadNum returns the number of the thread that called the function. This function is most useful in ...",t:"ThreadNum()"},"479":{i:0.00105296307399408,u:"../Content/Topics/C-14-TimeLeft().htm",a:"Preemption Logic System Function Syntax samples TimeLeft() Attr1=TimeLeft() Description Returns the time remaining if the preemption occurred during a  Wait statement. The value returned is in default time units and must be checked before any processing delay occurs since the value is updated ...",t:"TimeLeft()"},"480":{i:0.00105296307399408,u:"../Content/Topics/C-14-TimesUsed().htm",a:"General System Function Syntax samples TimesUsed(\u003cresource\u003e) If TimesUsed(Res1) \u003e 5 Then Use Res2 for 10 Description Returns the number of times a resource has been used. Valid In Any logic and any field evaluated after translation. For a list of fields evaluated after translation, see the  Appendix ...",t:"TimesUsed()"},"481":{i:0.00105296307399408,u:"../Content/Topics/C-14-Trace.htm",a:"General Action Statement Syntax samples Trace {\u003cmessage\u003e}{Step or Cont or Off or Close} Trace “Begin Test for Resource A” Trace Cont Trace Close Description Turns tracing on and off. Trace listings will appear in a separate window on the screen. Use trace to follow the logical flow of a model. Valid ...",t:"Trace"},"482":{i:0.00105296307399408,u:"../Content/Topics/C-14-Trunc().htm",a:"Type Conversion Function Syntax samples Trunc(\u003cexpression\u003e) Integer1=Trunc(3.9) Description Returns a real expression truncated to an integer. Any digits to the right of the decimal place will be removed. When necessary,  MedModel  automatically converts real values to integers by truncating them. ...",t:"Trunc()"},"483":{i:0.00540594413036961,u:"../Content/Topics/C-14-Ungroup.htm",a:"Entity-Related Operation Statement Syntax samples Ungroup {LIFO} Ungroup Ungroup LIFO Description Separates entities that were grouped with the  Group statement. Each of the resulting entities searches ahead in the process list and then from the beginning of the list until a process is found that ...",t:"Ungroup"},"484":{i:0.00105296307399408,u:"../Content/Topics/C-14-Units().htm",a:"General System Function Syntax samples Units(\u003clocation\u003e or \u003cresource\u003e) Pause “There are” $ Units(Res1) $ “Res1\u0027s in the system.” Description Returns the total units of a location or resource. Valid In Any logic and any field except those evaluated before translation. For a list of fields evaluated ...",t:"Units()"},"485":{i:0.00540594413036961,u:"../Content/Topics/C-14-Unload.htm",a:"Entity-Related Operation Statement Syntax samples Unload \u003cexpression\u003e {Iff \u003cBoolean expression\u003e} Unload 5 Unload 5 Iff Entity() = EntA Description Unloads a certain quantity of entities, or a certain quantity of those entities depending on a condition. Use Unload to unload entities from a carrier ...",t:"Unload"},"486":{i:0.00105296307399408,u:"../Content/Topics/C-14-Use.htm",a:"Resource-Related Operation Statement Syntax samples Use {\u003cquantity\u003e} \u003cresource\u003e {,\u003cpriority\u003e} \tFor \u003ctime\u003e {And or Or {\u003cquantity\u003e}  \t\u003cresource\u003e {,\u003cpriority\u003e}  For \u003ctime\u003e... } Use 2 Res2, 5 For 4:23:03 Use 2 Res1 For 2.0 min Or 3 Res2 For 1.5 min Use Res1, 3 For 1 hr And (Res2 For 5 Or Res3 For 5) Use ...",t:"Use"},"487":{i:0.00105296307399408,u:"../Content/Topics/C-14-Variable().htm",a:"General System Function Syntax samples Variable(\u003cnumeric expression\u003e) Variable(Attr) = 124 Variable(x) = Variable(y) N=Variable(x) + Variable(y) - 1 Description Converts a name-index number or integer to a variable name. Use this function when a numeric expression uses a variable whose name-index ...",t:"Variable()"},"488":{i:0.00367063986401515,u:"../Content/Topics/C-14-View.htm",a:"General Action Statement Syntax samples View “view name” View “Cell5” View “View10” Description Use this statement to change the view in the Layout window from within your logic. Once the view has been defined from the View menu in main menu, you can use it in the logic. Valid In All logic. ...",t:"View"},"489":{i:0.00105296307399408,u:"../Content/Topics/C-14-Wait.htm",a:"Entity-Related Operation Statement Syntax samples Wait  \u003ctime expression\u003e Wait 3 min Wait 0 Wait 2.5 + CleanupTime Wait N(8,.5) + 3 sec Description Simulates the time it takes to process an entity. Wait delays further processing of the entity until the specified time has elapsed. The rest of the ...",t:"Wait"},"490":{i:0.00105296307399408,u:"../Content/Topics/C-14-WaitUntil.htm",a:"Entity And Resource-Related Operation Statement Syntax samples Wait Until \u003cBoolean expression\u003e  Wait Until Var1 \u003e 3 Wait Until Var1 \u003c Attr3 And Var2 \u003e= 5 Description Delays processing of the current logic until the Boolean expression is true. The rest of the model continues to process during the ...",t:"Wait Until"},"491":{i:0.00211405987581548,u:"../Content/Topics/C-14-Warmup.htm",a:"General Action Statement Syntax samples Warmup Warmup If thruput = 50 Then Warmup Description Instructs the simulation to end the warmup period by resetting all the statistics and erasing relevant time series files.  Only one Warmup statement may be used in the simulation. Please Note: If multiple ...",t:"Warmup"},"492":{i:0.00105296307399408,u:"../Content/Topics/C-14-While.htm",a:"While...Do General Control Statement Syntax samples While \u003cBoolean expression\u003e Do \u003cstatement block\u003e While Array1[n] \u003c\u003e 10 Do Inc n  While FreeCap(Loc1) \u003e 5 Do  { Inc Var2, 5  Wait 5 sec } Description Repeats a statement or statement block continuously while a condition remains true. While...Do is an ...",t:"While"},"493":{i:0.00182367205676388,u:"../Content/Topics/C-14-Write.htm",a:"General Operation Statement Syntax samples Write \u003cfile ID\u003e, \u003cstring or numeric expression\u003e \t{,\u003cmaximum digits before decimal\u003e, \t\u003cdigits after decimal\u003e} Description Writes information to a general write file. The next item written to the file will appear immediately after this item. Write always ...",t:"Write"},"494":{i:0.00182367205676388,u:"../Content/Topics/C-14-WriteLine.htm",a:"General Operation Statement Syntax samples Writeline \u003cfile ID\u003e, \u003cstring or numeric expression\u003e{,\u003cmaximum digits before decimal\u003e, \u003cdigits after decimal\u003e} Description Writes information to a general write file and starts a new line. Writeline always appends to the file unless the file is  Reset. Any ...",t:"WriteLine"},"495":{i:0.007017631163518,u:"../Content/Topics/C-14-Xsub().htm",a:"External Subroutine Call Syntax samples Xsub(\u003cfile ID\u003e, \u003cordinal function number\u003e or \u003cfunction name\u003e {, \u003cparameter1\u003e, \u003cparameter2\u003e...}) Xsub(Interface,1, 5) Xsub(LogDLL, “_Log_B_of_X”,10,5) Description Calls an external subroutine inside a DLL file. Xsub() is perhaps the most powerful statement in  ...",t:"Xsub()"},"496":{i:0.00182367205676388,u:"../Content/Topics/C-14-Xwrite.htm",a:"General Operation Statement Syntax samples Xwrite \u003cfile ID\u003e, \u003cstring or numeric expression\u003e Description Writes information to a general write file in any text format the user chooses. Xwrite is for writing user-formatted files, while  Write and  Writeline are for writing special formatted text ...",t:"Xwrite"},"497":{i:0.0161856800666168,u:"../Content/Topics/Appendix.htm",a:"MedModel  evaluates v arious fields and logic at different times during a simulation run. Some evaluate only once when the model prepares to run a simulation, called the translation time.  MedModel  evaluates others as necessary throughout the simulation. Below is a list of all expressions and ...",t:"Appendix"},"498":{i:0.00105296307399408,u:"../Content/Topics/ExpressionandStatementGroups.htm",a:"1.  General Expression Numbers, Variables, Math Functions, Functions Table, Distribution Functions,  Xsub(), and Name Functions (i.e.,  Res(),  Ent(),  Loc()). 2.  Arrays Arrays of any dimension. 3.  Location Attributes Referencing a location attribute in any expression or assigning to a location ...",t:"Expression and Statement Groups"},"499":{i:0.00105296307399408,u:"../Content/Topics/ProgramDefaults.htm",a:"This section discusses and lists the default settings when you first run  MedModel . As in most software packages,  MedModel  makes certain assumptions regarding the most useful settings for the program. While your models may require different settings, an effort has been made to select the most ...",t:"Program Defaults"},"500":{i:0.00105296307399408,u:"../Content/Topics/Active-XObjects.htm",a:"ActiveX  Objects MedModel ’s ActiveX Automation capability allows you to externally create, view, and edit model elements such as locations, entities, and variables. Using Visual Basic (or any other ActiveX-enabled language), you can add capabilities to  MedModel  including: Customized user ...",t:"ActiveX Objects"},"501":{i:0.00105296307399408,u:"../Content/Topics/SuggestedReadings.htm",a:"To expand your knowledge and understanding of simulation, its practices, and its applications, consider the following texts. Harrell, Charles; Ghosh, Biman; Bowden, Royce. 2012. Simulation Using ProModel. 3rd Edition; McGraw-Hill, Inc. Law, A.M. and David W. Kelton. 1991. Simulation Modeling and ...",t:"Suggested Readings"},"502":{i:0.00105296307399408,u:"../Content/Topics/Glossary.htm",a:"C ost Statistics Statistics collected on a cost basis (e.g., total cost and average, non-use cost). You have control of how  MedModel  collects these statistics. You may collect information through statements, base them on the system clock, or use a combination of both. Counter A counter is a ...",t:"Glossary"},"503":{i:0.00105296307399408,u:"../Content/Topics/Bibliography.htm",a:"Carson, J. S. “Convincing Users of Model\u0027s Validity is Challenging Aspect of Modeler\u0027s Job,” Industrial Engineering, June 1986, p. 77.  Conway, Richard, William L. Maxwell, and Steven L. Worona, User\u0027s guide to XCELL Factory Modeling System, The Scientific Press, 1986, pp 65-66. Gordon, Geoffrey, ...",t:"Bibliography"},"504":{i:0.00105296307399408,u:"../Content/Simulation Browser.htm",a:"Simulation Browser Delete this text and replace it with your own content.",t:"Simulation Browser"},"505":{i:0.00105296307399408,u:"../Content/Simulation Properties.htm",a:"Simulation Properties Delete this text and replace it with your own content.",t:"Simulation Properties"},"506":{i:0.00105296307399408,u:"../Content/Topics/C-01-UsingProModel.htm",a:"",t:"C-01-UsingProModel"},"507":{i:0.00105296307399408,u:"../Content/Topics/C-01-UsingServiceModel.htm",a:" ",t:"C-01-UsingServiceModel"},"508":{i:0.00105296307399408,u:"../Content/Topics/C-01-WelcometoProModel.htm",a:"In order to use  MedModel  effectively, you must understand the basics of the Microsoft Windows operating environment. If you are unfamiliar with Windows you should begin by reviewing the help information. To do this, select Help from the Start menu. If you are an accomplished Windows user, you can ...",t:"Training"},"509":{i:0.00105296307399408,u:"../Content/Topics/C-01-WelcometoServiceModel.htm",a:"In order to use  MedModel  effectively, you must understand the basics of the Microsoft Windows operating environment. If you are unfamiliar with Windows you should begin by reviewing the help information. To do this, select Help from the Start menu. If you are an accomplished Windows user, you can ...",t:"Where to Go from here"},"510":{i:0.00105296307399408,u:"../Content/Topics/C-02-CustomInstallationProcedures.htm",a:"Selecting the Custom option inside the Setup Type dialog allows you to make decisions to install or not install certain features of the application.  Select the Customoption and then Next to continue. Select the features you would like to include or exclude from the installation by selecting the ...",t:"Custom Installation Procedures"},"511":{i:0.00105296307399408,u:"../Content/Topics/C-02-InstallationTypes.htm",a:"Standard The Standard edition of  MedModel requires a Serial Number/License Key or a Hardware Key. Network The Network edition  MedModel requires a License Server. Technical Support If you encounter problems during installation, please call the Technical Support Team at (888) PRO-MODEL between 6:00 ...",t:"Installation Types"},"512":{i:0.00277590405870246,u:"../Content/Topics/C-02-NetworkClientInstallaqtionProcedure.htm",a:"Start Windows Insert CD-ROM or download the setup file from the Solutions Cafe to your desktop. While pressing the SHIFT key, right-click on the installation exe and select Copy as path from the context menu. This will copy the file name and path to your Windows clipboard. Open a Command Prompt ...",t:"Network Client Installation"},"513":{i:0.00105296307399408,u:"../Content/Topics/C-02-NetworkInstallationProcedures.htm",a:"Overview  ProModel Corporation offers a network edition of  MedModel  that allows a single machine to control license usage (via a network connection) for several users. To use this method of license tracking, you must install a network edition of  MedModel . The network edition  includes the  ...",t:"Network Installation Procedures"},"514":{i:0.00150047854866801,u:"../Content/Topics/C-02-NetworkLicenseServerSetup.htm",a:"Included on the CD-ROM is the HASP Driver and HASP License Manager Setup programs. Once these are installed, insert the network USB key in an open USB port on the license server. Install the HASP Driver from the CD-ROM (CD drive:\\License Server Setup\\HASP Driver\\HASPUserSetup.exe). Install the HASP ...",t:"Network License Server Setup"},"515":{i:0.00105296307399408,u:"../Content/Topics/C-02-Subscription License Procedure.htm",a:"Optionally your ProModel Edition may prompt for a user name and password to log in to the software: Select Login on the right side of the Home Ribbon. You will then be prompted to log in with your Autodesk or other email address and password: If it is your first time logging in you will be prompted ...",t:"Subscription License Procedure"},"516":{i:0.00105296307399408,u:"../Content/Topics/C-03-NewLocation,EntityandArrival.htm",a:"New Location, Entity, and Arrival ",t:"New Location, Entity, and Arrival "},"517":{i:0.00105296307399408,u:"../Content/Topics/C-03-ProcessandRoutingLogic.htm",a:"Process and Routing Logic The process and routing table below shows all of the changes and additions to the Phase 2 model in bold text. Process and Routing Table This concludes the final phase of our model building session. We now turn our focus to running the model.",t:"Process and Routing Logic"},"518":{i:0.00105296307399408,u:"../Content/Topics/C-04-BackgroundColor.htm",a:"Background Color The Background Color option allows the user to change the background color in the layout window.   How to set the background color of the layout: Select Layout Settings from the View menu. Select Background Color from the Layout Settings submenu. Select the desired color. Click OK.",t:"Background Color"},"519":{i:0.00105296307399408,u:"../Content/Topics/C-04-CustomColors.htm",a:"MedModel  allows you to create up to 16 custom colors for use anywhere a color selection is available. Entity, location, and resource icons, as well as background graphics, can use any custom color defined in the colors menu.   When creating a custom color, the nearest solid color is shown next to ...",t:"Custom Colors"},"520":{i:0.00194799402334195,u:"../Content/Topics/C-04-EditingBackgroundGraphics.htm",a:"When working with graphic objects in the Background Graphics module, the Edit menu appears as follows. Cut Removes the selected object(s) and makes a temporary copy that may be pasted back into the layout window.   Copy Makes a temporary copy of the selected object(s) for pasting later.   Paste Adds ...",t:"Editing Background Graphics"},"521":{i:0.00105296307399408,u:"../Content/Topics/C-04-GridScale.htm",a:"In addition to setting the resolution of the grid lines, you may also associate a time and distance value to each grid unit. This is extremely useful when you are creating conveyors, queues, or path networks to scale and you want the time or distance between nodes to be based on the number of grid ...",t:"Grid Scale"},"522":{i:0.00105296307399408,u:"../Content/Topics/C-04-GridSize.htm",a:"By using the grid dialog box, you may set the resolution of the grid lines to your preference. Please Note: You may save the grid settings for the model by checking the Save as default grid settings check box. How to change the colors and resolution of the  grid lines: Select Layout Settings from ...",t:"Grid Size"},"523":{i:0.00105296307399408,u:"../Content/Topics/C-04-HelpMenu.htm",a:"The  MedModel Help menu is a convenient, quick way to look up information about a task you are performing, a feature you would like to know more about, or a command you want to use.  MedModel  Help is available whenever you see a Help command button, or Help as an item on a menu bar. The selections ...",t:"Help Menu"},"524":{i:0.00105296307399408,u:"../Content/Topics/C-04-Right-ClickMenu.htm",a:"To simplify many of the steps required to perform common modeling operations,  MedModel  includes a variety of right-click menus. From these menus, you can access context-sensitive options and settings for variables, locations, processing, path networks, resources, and other components. The ...",t:"Right-Click Menu"},"525":{i:0.00105296307399408,u:"../Content/Topics/C-04-RoutingPathColor.htm",a:"MedModel  allows you to select which colors to use when showing selected, unselected and related routings in the Processing module. This helps in visually identifying the origin and destination of a process routing.   How to specify the routing colors: Select Routing Path Color from the View menu. ...",t:"Routing Path Color"},"526":{i:0.00194799402334195,u:"../Content/Topics/C-04-Toolbars.htm",a:"The  MedModel  toolbars provides quick access to many of the options found in the menu bar. The toolbar space may contain up to nine toolbars, which can be be toggled on or off in the View menu. These toolbars are described below. File New Closes any currently opened model so a new model can be ...",t:"Toolbars"},"527":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuCommands.htm",a:"Commands The Commands section of the View menu contains various selections for controlling the modeling environment. Refresh Layout   Clears and redraws the graphics in the layout window.   Reset Window Positions   Causes all edit tables to return to their original positions and sizes.",t:"Commands"},"528":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuEditTable.htm",a:"Edit TablesEdit Table Fonts Edit tables are used extensively in  MedModel  for data entry.  MedModel  allows you to specify the font used in these tables.    How to change the edit table font: Select Edit Tables from the View menu. Select Font from the Edit Tables submenu. Choose the desired font by ...",t:"Edit Tables"},"529":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuSettings.htm",a:"The following table defines each of the selections available from the settings section of the View menu. These selections and their submenus are discussed in more detail on the following pages. Views   Allows you to define, then quickly and easily access specific areas of the model layout. Once the ...",t:"Settings"},"530":{i:0.00105296307399408,u:"../Content/Topics/C-04-ViewMenuToolbars.htm",a:"Toolbars Allows you to toggle the various  MedModel  toolbars on and off. See  Toolbars  for more infomation on each toolbar.",t:"Toolbars"},"531":{i:0.00105296307399408,u:"../Content/Topics/C-04-WindowMenu.htm",a:"The  Window menu allows you to rearrange windows and icons and select the active window. These functions are standard to all Windows applications. Tile  Causes all open windows to fit in the available screen space. Windows that may be hidden behind other windows become visible.   Cascade   Causes ...",t:"Window Menu"},"532":{i:0.00105296307399408,u:"../Content/Topics/C-05-BackgroundGraphicsEditorMode.htm",a:"Background Graphics  Editor Modes MedModel  gives you the option of placing the background graphic in front of or behind the grid. This is useful when you want to view the imported background graphic, but you also want to see the grid for drawing and sizing objects on the imported background ...",t:"Background Graphics Editor Modes"},"533":{i:0.00105296307399408,u:"../Content/Topics/C-05-TypicalPathNetwork.htm",a:"The following diagram shows a path network consisting of thirteen nodes (N1 to N13) connected by path segments. Path segments may be straight lines from one node to another, as in the segment from node N2 to node N3, or they can have any number of joints, such as the segment from node N3 to node ...",t:"A Typical Path Network"},"534":{i:0.00559194479078936,u:"../Content/Topics/C-06-CraneSystems.htm",a:"Crane Systems",t:"Crane Systems"},"535":{i:0.00105296307399408,u:"../Content/Topics/C-06-InteractiveSubroutines.htm",a:"Interactive subroutines are subroutines activated by the user anytime during run-time by choosing the subroutine from the Interact menu. The name appearing in the Interact menu is either the subroutine name or if a string is entered as a comment statement at the beginning of the subroutine logic, ...",t:"Interactive Subroutines"},"536":{i:0.00194799402334195,u:"../Content/Topics/C-08-Customize.htm",a:"You can add direct links to applications and files right on your  MedModel  toolbar. Create a link to open a spreadsheet, a text document, or your favorite calculator–it’s your menu.   To create or modify you Custom Tools menu, select Customize from the Tools menu. This will pull up the Custom Tools ...",t:"Customize"},"537":{i:0.00105296307399408,u:"../Content/Topics/C-08-PowerTools.htm",a:"Packaged with  MedModel  are several powerful tools that can help you better use and understand your  MedModel  software and the statistical data it creates. These tools include: Calendar Library ProActiveX Any of these tools can be added to the custom Tools menu using the steps outlined in the ...",t:"Power Tools"},"538":{i:0.00105296307399408,u:"../Content/Topics/C-08-ProActiveX.htm",a:"Overview The ProActiveX spreadsheet is designed to help you understand how to use  MedModel ’s ActiveX components. The worksheets and macros give clear and functional examples of how to access all currently enabled data elements. A detailed help system is available  here .   The ProActiveX ...",t:"ProActiveX"},"539":{i:0.00105296307399408,u:"../Content/Topics/C-08-ShiftLibrary.htm",a:"For your convenience, predefined shift files are now included with your ProModel Corporation product. When installed they will appear in a Shift subfolder under the Calendar Editor installation folder (i.e. C:\\Program Files(x86)\\ProModel Corporation\\Tools\\Calendar Editor\\Shifts\\1p_3p_5.pmcal.)   ...",t:"Calendar Library"},"540":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeFileMenu.htm",a:"The Run-Time File menu contains only one selection, View Text.  V iew Text  Choose this option to bring up a window with a text listing of the current model. This feature is extremely useful for debugging and verifying models. Please Note: You may switch back and forth between a full size View Text ...",t:"Run-Time File Menu"},"541":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeHelpMenu.htm",a:"The Run-Time Help menu contains selections for accessing the  MedModel  on-line help system. It operates the same here as in the model editing functions. Index...   Choose this option to bring up the Main Help Index.   Context  Choose this option to go directly to the help screen that corresponds to ...",t:"Run-Time Help Menu"},"542":{i:0.00150047854866801,u:"../Content/Topics/C-09-Run-TimeInteractMenu.htm",a:"The Run-Time Interact menu displays the Interact dialog box. It allows you to execute interactive subroutines during run-time. Interactive subroutines are defined in the Subroutines edit table (see  Subroutine Editor ).   How to execute an interactive  subroutine during run-time: Select Interact ...",t:"Run-Time Interact Menu"},"543":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeOptionsMenu.htm",a:"The run-time Options menu has several selections that allow you to interact with the simulation while the model is running. These options are described in the following pages. Animation Off/On  Turns the animation on or off. Off greatly speeds up the simulation. Animation speed may also be set with ...",t:"Run-Time Options Menu"},"544":{i:0.00105296307399408,u:"../Content/Topics/C-09-Run-TimeWindowMenu.htm",a:"The Run-Time Window menu allows you to rearrange windows and icons and select the active window. These functions are standard to all Windows applications. Tile   Causes all open windows to fit in the available screen space. Windows hidden behind other windows become visible.   Cascade   Causes all ...",t:"Run-Time Window Menu"},"545":{i:0.00105296307399408,u:"../Content/Topics/C-09-Statuslights.htm",a:"The Run-Time Information menu allows you to see the status of locations in two different ways. In addition, you may view the current state of all variables and array elements. Each of these options is defined in the following pages. Status Light  Select this option to bring up the Status Light ...",t:"Run-Time Information Menu"},"546":{i:0.00105296307399408,u:"../Content/Topics/Cover.htm",a:"      user guide   version 10.0       www.promodel.com",t:"Cover"},"547":{i:0.00105296307399408,u:"../Content/Topics/OLDC-02 - Network Client Installation Procedure.htm",a:"",t:"Network Client Installation Procedure"},"548":{i:0.00105296307399408,u:"../Content/Topics/Title_2.htm",a:"The information in this guide is provided by ProModel Corporation to document  MedModel . The contents of this manual are subject to change without notice and does not represent a commitment on the part of ProModel Corporation. The software described in this guide is applied under a license ...",t:"Disclaimer"},"549":{i:0.00105296307399408,u:"../Content/Topics/USERIX.htm",a:"Index",t:"Index"},"550":{i:0.00105296307399408,u:"../Content/Topics/USERTOC.htm",a:"Table of Contents  ",t:"Table of Contents"},});